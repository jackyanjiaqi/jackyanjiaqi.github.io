import{_ as o,c,f as e,a as s,b as a,d as t,e as l,r as i,o as d}from"./app-BZlJFCNj.js";const r={};function u(m,n){const p=i("RouteLink");return d(),c("div",null,[n[7]||(n[7]=e(`<h1 id="相机与世界" tabindex="-1"><a class="header-anchor" href="#相机与世界"><span>相机与世界</span></a></h1><p><a href="https://immvpc32u2.feishu.cn/docx/QjHbd9ikvo9f87xr1EgcLMrdnte?from=from_copylink" target="_blank" rel="noopener noreferrer">教学笔记: 加群可访问</a></p><p>一个简单的游戏结构示例：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">FlameGame</span>
<span class="line">├── 世界</span>
<span class="line">│   ├── 玩家</span>
<span class="line">│   └── 敌人</span>
<span class="line">└── CameraComponent</span>
<span class="line">    ├── Viewfinder</span>
<span class="line">    │   ├── HudButton</span>
<span class="line">    │   └── FpsTextComponent</span>
<span class="line">    └── Viewport</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了理解 <code>CameraComponent</code> 的工作原理，想象你的游戏世界是一个独立于应用程序存在的实体。想象你的游戏只是一个窗口，通过它可以看这个世界。你可以随时关闭这个窗口，但游戏世界仍然存在。或者，相反地，你可以打开多个窗口，它们都看着相同的世界（或不同的世界）。</p><p>有了这种思维方式，我们现在可以理解 <code>CameraComponent</code> 的工作原理了。</p><p>首先，有一个 <a href="#world">World</a> 类，它包含了游戏中所有的组件。<code>World</code> 组件可以安装在游戏类的根部，就像内置的 <code>World</code> 一样。</p><p>然后是一个“看向”<a href="#world">World</a> 的 <a href="#cameracomponent">CameraComponent</a> 类。<code>CameraComponent</code> 有一个 <a href="#viewport">Viewport</a> 和一个 <a href="#viewfinder">Viewfinder</a> 在里面，允许在世界屏幕上的任何位置渲染世界，并控制观看位置和角度。<code>CameraComponent</code> 还包含一个 <a href="#backdrop">backdrop</a> 组件，它静态地呈现在世界下方。</p><h2 id="世界" tabindex="-1"><a class="header-anchor" href="#世界"><span>世界</span></a></h2><p>这个组件应该用来托管游戏中所有的组件，这些组件构成了你的游戏世界。<code>World</code> 类的主要属性是它不通过传统方式渲染——而是由一个或多个 <a href="#cameracomponent">CameraComponent</a> 渲染以“看向”世界。在 <code>FlameGame</code> 类中有一个名为 <code>world</code> 的 <code>World</code>，它是默认添加的，并与默认的 <code>CameraComponent</code> 称为 <code>camera</code> 配对。</p><p>一个游戏可以有多个 <code>World</code> 实例，它们可以在同一时间或不同时间渲染。例如，如果你有两个世界 A 和 B 和一个单一的相机，那么切换相机的目标从 A 到 B 会立即切换到世界 B 的视图，而不需要卸载 A 然后再挂载 B。</p><p>就像大多数 <code>Component</code> 一样，可以通过构造函数中的 <code>children</code> 参数或使用 <code>add</code> 和 <code>addAll</code> 方法向 <code>World</code> 添加子组件。</p><p>对于许多游戏，你希望扩展世界并在其中创建逻辑，这样的游戏结构可能如下所示：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">GameWidget</span><span class="token punctuation">(</span><span class="token class-name">FlameGame</span><span class="token punctuation">(</span>world<span class="token punctuation">:</span> <span class="token class-name">MyWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyWorld</span> <span class="token keyword">extends</span> <span class="token class-name">World</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Load all the assets that are needed in this world</span></span>
<span class="line">    <span class="token comment">// and add components etc.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cameracomponent" tabindex="-1"><a class="header-anchor" href="#cameracomponent"><span>CameraComponent</span></a></h2><p>这是一个“看向”<code>World</code> 的组件。多个相机可以同时观察相同的世界。</p><p>在 <code>FlameGame</code> 类中有一个默认的 <code>CameraComponent</code> 称为 <code>camera</code>，它与默认的 <code>world</code> 配对，所以如果你不需要创建或添加自己的 <code>CameraComponent</code>，则不必这样做。</p><p>一个 <code>CameraComponent</code> 有两个其他组件：一个 <a href="#viewport">Viewport</a> 和一个 <a href="#viewfinder">Viewfinder</a>，这些组件总是相机的孩子。</p><p><code>FlameGame</code> 类在其构造函数中有一个 <code>camera</code> 字段，所以你可以设置你想要的默认相机的类型，例如具有固定分辨率的相机：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">runApp</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">GameWidget</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token class-name">FlameGame</span><span class="token punctuation">(</span></span>
<span class="line">        camera<span class="token punctuation">:</span> <span class="token class-name">CameraComponent</span><span class="token punctuation">.</span><span class="token function">withFixedResolution</span><span class="token punctuation">(</span></span>
<span class="line">          width<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span></span>
<span class="line">          height<span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        world<span class="token punctuation">:</span> <span class="token class-name">MyWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个静态属性 <code>CameraComponent.currentCamera</code>，它返回当前执行渲染的相机对象。这在某些高级用例中是必需的，例如某些组件可能会决定在相机视口之外时不渲染自己及其子组件。</p><h3 id="具有固定分辨率的-cameracomponent" tabindex="-1"><a class="header-anchor" href="#具有固定分辨率的-cameracomponent"><span>具有固定分辨率的 CameraComponent</span></a></h3><p>这个命名构造函数允许你假装用户的设备具有你所选择的固定分辨率。例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> camera <span class="token operator">=</span> <span class="token class-name">CameraComponent</span><span class="token punctuation">.</span><span class="token function">withFixedResolution</span><span class="token punctuation">(</span></span>
<span class="line">  world<span class="token punctuation">:</span> myWorldComponent<span class="token punctuation">,</span></span>
<span class="line">  width<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span></span>
<span class="line">  height<span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将创建一个视口居中的相机，尽可能地占据屏幕空间，同时保持4:3（800x600）的宽高比，并在游戏中显示一个大小为800 x 600的世界区域。</p><p>具有固定分辨率非常简单易用，但如果用户的设备没有与你选择的尺寸相同的纵横比，它将不会充分利用用户可用的屏幕空间。</p><h2 id="viewport" tabindex="-1"><a class="header-anchor" href="#viewport"><span>Viewport</span></a></h2><p><code>Viewport</code> 是一个透过它的 <code>World</code> 被看到的窗口。这个窗口有特定的大小、形状和位置。有多种类型的视口可用，你可以随时实现你自己的视口。</p><p><code>Viewport</code> 是一个组件，这意味着你可以向它添加其他组件。这些子组件会受到视口的位移影响，但不会受其裁剪蒙版的影响。因此，如果一个视口是“看向”游戏世界的窗口，那么它的孩子就是你能放在窗口上面的东西。</p><p>将元素添加到视口中是一种方便的方法来实现“HUD”组件。以下视口可用：</p><ul><li><code>MaxViewport</code>（默认）——这个视口扩展到游戏中允许的最大尺寸，即它将与游戏的画布大小相等。</li><li><code>FixedResolutionViewport</code>——保持分辨率和纵横比固定，如果不匹配则有黑条。</li><li><code>FixedSizeViewport</code>——一个具有预定义大小的简单矩形视口。</li><li><code>FixedAspectRatioViewport</code>——一个扩展以适应游戏画布的矩形视口，但保留其纵横比。</li><li><code>CircularViewport</code>——一个圆形形状的视口，固定大小。</li></ul><p>如果你向 <code>Viewport</code> 添加子组件，它们将作为静态 HUD 出现在世界前面。</p><h2 id="viewfinder" tabindex="-1"><a class="header-anchor" href="#viewfinder"><span>Viewfinder</span></a></h2><p>这是相机的一部分，负责知道我们在底层游戏世界的哪个位置进行查看。<code>Viewfinder</code> 还控制缩放级别和视角的旋转角度。</p><p><code>Viewfinder</code> 的 <code>anchor</code> 属性允许你指定视口中哪个点作为相机的“逻辑中心”。例如，在侧向滚动动作游戏中，通常将相机集中在主角上，这个主角并不在屏幕中心，而是在更靠近左下角的位置。这种偏心的位置就是相机的“逻辑中心”，由 <code>Viewfinder</code> 的 <code>anchor</code> 控制。</p><p>如果你向 <code>Viewfinder</code> 添加子组件，它们将出现在世界前面，但位于视口和世界之后，与世界的变换相同，因此这些组件不是静态的。</p>`,36)),s("p",null,[n[1]||(n[1]=a("你还可以向 ")),n[2]||(n[2]=s("code",null,"Viewfinder",-1)),n[3]||(n[3]=a(" 添加行为组件作为孩子，例如 ")),t(p,{to:"/guide/flame/effects.html"},{default:l(()=>n[0]||(n[0]=[a("效果")])),_:1}),n[4]||(n[4]=a(" 或其他控制器。例如，如果你添加一个 ")),n[5]||(n[5]=s("code",null,"ScaleEffect",-1)),n[6]||(n[6]=a("，你可以实现平滑缩放在你的游戏中。"))]),n[8]||(n[8]=e(`<h2 id="backdrop" tabindex="-1"><a class="header-anchor" href="#backdrop"><span>Backdrop</span></a></h2><p>为了在世界的后面添加静态组件，可以将它们添加到 <code>backdrop</code> 组件中，或者替换 <code>backdrop</code> 组件。这对于希望有一个静态的 <code>ParallaxComponent</code> 以显示在包含可以移动玩家的世界上非常有用。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">camera<span class="token punctuation">.</span>backdrop<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">MyStaticBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">camera<span class="token punctuation">.</span>backdrop <span class="token operator">=</span> <span class="token class-name">MyStaticBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="相机控制" tabindex="-1"><a class="header-anchor" href="#相机控制"><span>相机控制</span></a></h2><p>有几种方法可以在运行时修改相机的设置：</p><ol><li>使用相机函数，如 <code>follow()</code>、<code>moveBy()</code> 和 <code>moveTo()</code>。这些方法底层使用了与 (2) 相同的效应/行为。</li><li>应用效果和/或行为到相机的 <code>Viewfinder</code> 或 <code>Viewport</code>。效果和行为是特殊类型的组件，其目的是随时间修改某个组件的属性。</li><li>手动操作。你可以随时重写 <code>CameraComponent.update()</code> 方法（或者视口或视点的相同方法），并在其中更改视点位置或缩放。虽然这在某些情况下可能适用，但通常不推荐这样做。</li></ol><p><code>CameraComponent</code> 有几种控制其行为的方法：</p><ul><li><code>follow()</code> 将强制相机跟随提供的目标。你还可以选择限制相机的最大移动速度，或者只允许它水平/垂直移动。</li><li><code>stop()</code> 会撤销上一次调用的效果，并停止相机在其当前位置。</li><li><code>moveBy()</code> 可以用来按指定偏移量移动相机。如果相机已经在跟随另一个组件或正在移动，这些行为将自动取消。</li><li><code>moveTo()</code> 可以用来将相机移动到世界地图上的指定点。如果相机已经在跟随另一个组件或正向另一个点移动，这些行为将自动取消。</li><li><code>setBounds()</code> 允许你为相机的活动范围添加限制。这些限制通常是形状（如矩形），但也可以是其他任何形状。</li></ul><h3 id="visibleworldrect" tabindex="-1"><a class="header-anchor" href="#visibleworldrect"><span>visibleWorldRect</span></a></h3><p>相机暴露属性 <code>visibleWorldRect</code>，这是一个描述当前通过相机可见的世界区域的矩形。这个区域可以用来避免渲染不在视口内的组件，或更少地更新远离玩家的对象。</p><p><code>visibleWorldRect</code> 是一个缓存属性，每当相机移动或视口大小改变时都会自动更新。</p><h3 id="cansee" tabindex="-1"><a class="header-anchor" href="#cansee"><span>canSee</span></a></h3><p><code>CameraComponent</code> 有一个名为 <code>canSee</code> 的方法，可以用来检查一个组件是否从相机的角度可见。这在例如为了剔除不在视野中的组件时非常有用。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>camera<span class="token punctuation">.</span><span class="token function">canSee</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   component<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 剔除组件</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17))])}const v=o(r,[["render",u],["__file","camera.1.23.0.deepseek.html.vue"]]),h=JSON.parse('{"path":"/guide/flame/camera.1.23.0.deepseek.html","title":"相机与世界","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"世界","slug":"世界","link":"#世界","children":[]},{"level":2,"title":"CameraComponent","slug":"cameracomponent","link":"#cameracomponent","children":[{"level":3,"title":"具有固定分辨率的 CameraComponent","slug":"具有固定分辨率的-cameracomponent","link":"#具有固定分辨率的-cameracomponent","children":[]}]},{"level":2,"title":"Viewport","slug":"viewport","link":"#viewport","children":[]},{"level":2,"title":"Viewfinder","slug":"viewfinder","link":"#viewfinder","children":[]},{"level":2,"title":"Backdrop","slug":"backdrop","link":"#backdrop","children":[]},{"level":2,"title":"相机控制","slug":"相机控制","link":"#相机控制","children":[{"level":3,"title":"visibleWorldRect","slug":"visibleworldrect","link":"#visibleworldrect","children":[]},{"level":3,"title":"canSee","slug":"cansee","link":"#cansee","children":[]}]}],"git":{},"filePathRelative":"guide/flame/camera.1.23.0.deepseek.md"}');export{v as comp,h as data};
