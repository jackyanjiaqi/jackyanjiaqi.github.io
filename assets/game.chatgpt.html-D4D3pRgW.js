import{_ as l,a as c}from"./lowlevel-OSTE4exW.js";import{_ as t,c as o,f as a,a as e,b as s,d as i,e as d,r,o as u}from"./app-BZlJFCNj.js";const m={};function k(v,n){const p=r("RouteLink");return u(),o("div",null,[n[5]||(n[5]=a(`<h1 id="flamegame" tabindex="-1"><a class="header-anchor" href="#flamegame"><span>FlameGame</span></a></h1><p><code>FlameGame</code> 类实现了一个基于 <code>Component</code> 的游戏。它拥有一个组件树，并调用所有已添加到游戏中的组件的 <code>update</code> 和 <code>render</code> 方法。</p><p>我们将这种基于组件的系统称为 Flame 组件系统（Flame Component System，简称 FCS）。在整个文档中，FCS 用来指代这个系统。</p><p>组件可以直接通过构造函数中的命名参数 <code>children</code> 添加到 <code>FlameGame</code>，或者通过 <code>add</code>/<code>addAll</code> 方法从任何地方添加。然而，大多数时候，您可能想将子组件添加到一个 <code>World</code> 中，默认的 <code>World</code> 存在于 <code>FlameGame.world</code> 下，您可以像添加到任何其他组件一样将组件添加到它。</p><p>以下是一个简单的 <code>FlameGame</code> 实现，其中通过 <code>onLoad</code> 和直接在构造函数中添加了两个组件：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/components.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/game.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/widgets.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// 一个渲染箱子精灵的组件，大小为 16x16。</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyCrate</span> <span class="token keyword">extends</span> <span class="token class-name">SpriteComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyCrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    sprite <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Sprite</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;crate.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyWorld</span> <span class="token keyword">extends</span> <span class="token class-name">World</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">MyCrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> myGame <span class="token operator">=</span> <span class="token class-name">FlameGame</span><span class="token punctuation">(</span>world<span class="token punctuation">:</span> <span class="token class-name">MyWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">runApp</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">GameWidget</span><span class="token punctuation">(</span>game<span class="token punctuation">:</span> myGame<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">如果您在构建方法中实例化游戏，每次 Flutter 树被重建时，您的游戏都会被重新构建，这通常会比您希望的频率更高。为避免这种情况，您可以先创建一个游戏实例，并在小部件结构中引用它，或者使用 \`GameWidget.controlled\` 构造函数。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要从 <code>FlameGame</code> 的组件列表中移除组件，可以使用 <code>remove</code> 或 <code>removeAll</code> 方法。如果您只想移除一个组件，可以使用 <code>remove</code>，如果要移除多个组件，则可以使用 <code>removeAll</code>。这些方法适用于所有的 <code>Component</code>，包括世界。</p><h2 id="游戏循环" tabindex="-1"><a class="header-anchor" href="#游戏循环"><span>游戏循环</span></a></h2><p><code>GameLoop</code> 模块是游戏循环概念的简单抽象。基本上，大多数游戏建立在两个方法上：</p><ul><li><code>render</code> 方法用于获取画布并绘制当前游戏状态。</li><li><code>update</code> 方法接收自上次更新以来的增量时间（以微秒为单位），并允许您转到下一个状态。</li></ul><p><code>GameLoop</code> 被 Flame 所有的 <code>Game</code> 实现所使用。</p><h2 id="调整大小" tabindex="-1"><a class="header-anchor" href="#调整大小"><span>调整大小</span></a></h2><p>每当游戏需要调整大小时，例如，当屏幕方向更改时，<code>FlameGame</code> 会调用所有组件的 <code>onGameResize</code> 方法，并将此信息传递给相机和视口。</p><p><code>FlameGame.camera</code> 控制视口中应对齐的坐标空间中的点，默认情况下，[0,0] 位于视口的中心 (<code>Anchor.center</code>)。</p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><p><code>FlameGame</code> 的生命周期回调方法，如 <code>onLoad</code>、<code>render</code> 等，按以下顺序调用：</p><p><img src="`+l+`" alt="a"></p><p>当一个 <code>FlameGame</code> 被首次添加到 <code>GameWidget</code> 时，生命周期方法 <code>onGameResize</code>、<code>onLoad</code> 和 <code>onMount</code> 会按顺序调用。然后，<code>update</code> 和 <code>render</code> 会在每个游戏周期中按顺序调用。如果 <code>FlameGame</code> 从 <code>GameWidget</code> 中移除，则会调用 <code>onRemove</code>。如果 <code>FlameGame</code> 被添加到一个新的 <code>GameWidget</code> 中，则生命周期顺序将从 <code>onGameResize</code> 开始重复。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">\`onGameResize\` 和 \`onLoad\` 的顺序与其他 \`Component\` 不同。这是为了允许游戏元素的大小在加载或生成资源之前计算。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>onRemove</code> 回调方法可以用于清理子组件和缓存的数据：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 根据游戏需求选择性地执行。</span></span>
<span class="line">    <span class="token function">removeAll</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">processLifecycleEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Flame</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Flame</span><span class="token punctuation">.</span>assets<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 其他在游戏被移除时要执行的代码。</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">\`FlameGame\` 中的子组件和资源清理不会自动进行，必须明确添加到 \`onRemove\` 回调中。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="调试模式" tabindex="-1"><a class="header-anchor" href="#调试模式"><span>调试模式</span></a></h2><p>Flame 的 <code>FlameGame</code> 类提供了一个名为 <code>debugMode</code> 的变量，默认为 <code>false</code>。但您可以将其设置为 <code>true</code>，以启用游戏组件的调试功能。<strong>请注意</strong>，当组件被添加到游戏中时，这个变量的值会传递给它们，因此，如果您在运行时更改 <code>debugMode</code>，默认情况下，它不会影响已经添加的组件。</p>`,25)),e("p",null,[n[1]||(n[1]=s("要了解更多关于 Flame 中 ")),n[2]||(n[2]=e("code",null,"debugMode",-1)),n[3]||(n[3]=s(" 的内容，请参考 ")),i(p,{to:"/guide/flame/other/debug.html"},{default:d(()=>n[0]||(n[0]=[s("调试文档")])),_:1}),n[4]||(n[4]=s("。"))]),n[6]||(n[6]=a(`<h2 id="更改背景颜色" tabindex="-1"><a class="header-anchor" href="#更改背景颜色"><span>更改背景颜色</span></a></h2><p>要更改 <code>FlameGame</code> 的背景颜色，您需要重写 <code>backgroundColor()</code> 方法。</p><p>在下面的示例中，背景颜色设置为完全透明，以便可以看到 <code>GameWidget</code> 后面的部件。默认的背景颜色是不透明的黑色。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Color</span> <span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0x00000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，背景颜色不能在游戏运行时动态更改，但如果您希望它动态更改，可以绘制一个覆盖整个画布的背景。</p><h2 id="singlegameinstance-混入" tabindex="-1"><a class="header-anchor" href="#singlegameinstance-混入"><span>SingleGameInstance 混入</span></a></h2><p>如果您正在制作单一游戏应用程序，可以选择应用 <code>SingleGameInstance</code> 混入。这是构建游戏时常见的场景：应用中有一个全屏的 <code>GameWidget</code>，它托管一个单一的 <code>Game</code> 实例。</p><p>添加这个混入会在某些场景下提供性能优势。特别是，组件的 <code>onLoad</code> 方法保证会在该组件添加到父组件时启动，即使父组件尚未挂载。因此，<code>await</code> 等待 <code>parent.add(component)</code> 总是能确保组件加载完成。</p><p>使用这个混入非常简单：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token keyword">with</span> <span class="token class-name">SingleGameInstance</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="低级游戏-api" tabindex="-1"><a class="header-anchor" href="#低级游戏-api"><span>低级游戏 API</span></a></h2><p><img src="`+c+`" alt="1"></p><p>抽象类 <code>Game</code> 是一个低级 API，当您想实现游戏引擎结构的功能时可以使用。比如，<code>Game</code> 并没有实现任何 <code>update</code> 或 <code>render</code> 函数。</p><p>该类还具有生命周期方法 <code>onLoad</code>、<code>onMount</code> 和 <code>onRemove</code>，这些方法会在游戏加载、挂载或移除时从 <code>GameWidget</code>（或其他父组件）调用。<code>onLoad</code> 只会在类第一次添加到父组件时调用，但 <code>onMount</code>（在 <code>onLoad</code> 后调用）每次添加到新父组件时都会调用。<code>onRemove</code> 在类从父组件移除时调用。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">\`Game\` 类提供了更多自由来实现功能，但如果使用它，您将错过 Flame 中的所有内置功能。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一个 <code>Game</code> 实现的示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGameSubClass</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> myGame <span class="token operator">=</span> <span class="token class-name">MyGameSubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">runApp</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">GameWidget</span><span class="token punctuation">(</span></span>
<span class="line">      game<span class="token punctuation">:</span> myGame<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="暂停-恢复-逐步执行游戏" tabindex="-1"><a class="header-anchor" href="#暂停-恢复-逐步执行游戏"><span>暂停/恢复/逐步执行游戏</span></a></h2><p>Flame 的 <code>Game</code> 可以通过两种方式暂停和恢复：</p><ul><li>使用 <code>pauseEngine</code> 和 <code>resumeEngine</code> 方法。</li><li>通过更改 <code>paused</code> 属性。</li></ul><p>当暂停 <code>Game</code> 时，<code>GameLoop</code> 会暂停，这意味着在恢复之前不会发生任何更新或渲染。</p><p>当游戏暂停时，可以使用 <code>stepEngine</code> 方法逐帧推进它。虽然这在最终的游戏中可能用处不大，但在开发周期中逐步检查游戏状态时非常有用。</p><h3 id="后台处理" tabindex="-1"><a class="header-anchor" href="#后台处理"><span>后台处理</span></a></h3><p>当应用被发送到后台时，游戏会自动暂停，当它回到前台时，游戏会恢复。可以通过将 <code>pauseWhenBackgrounded</code> 设置为 <code>false</code> 来禁用此行为。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    pauseWhenBackgrounded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在当前的 Flutter 稳定版本（3.13）中，这个标志在非移动平台（包括 Web）上被忽略。</p><h2 id="hasperformancetracker-混入" tabindex="-1"><a class="header-anchor" href="#hasperformancetracker-混入"><span>HasPerformanceTracker 混入</span></a></h2><p>在优化游戏时，跟踪每帧更新和渲染所花费的时间可能很有用。这些数据可以帮助您发现运行效率低的代码区域，也可以帮助检测游戏中渲染最耗时的视觉区域。</p><p>要获取更新和渲染时间，只需将 <code>HasPerformanceTracker</code> 混入添加到游戏类中：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token keyword">with</span> <span class="token class-name">HasPerformanceTracker</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 访问 \`updateTime\` 和</span></span>
<span class="line"></span>
<span class="line"> \`renderTime\` 获取器。</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30))])}const h=t(m,[["render",k],["__file","game.chatgpt.html.vue"]]),f=JSON.parse('{"path":"/guide/flame/game.chatgpt.html","title":"FlameGame","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"游戏循环","slug":"游戏循环","link":"#游戏循环","children":[]},{"level":2,"title":"调整大小","slug":"调整大小","link":"#调整大小","children":[]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":2,"title":"调试模式","slug":"调试模式","link":"#调试模式","children":[]},{"level":2,"title":"更改背景颜色","slug":"更改背景颜色","link":"#更改背景颜色","children":[]},{"level":2,"title":"SingleGameInstance 混入","slug":"singlegameinstance-混入","link":"#singlegameinstance-混入","children":[]},{"level":2,"title":"低级游戏 API","slug":"低级游戏-api","link":"#低级游戏-api","children":[]},{"level":2,"title":"暂停/恢复/逐步执行游戏","slug":"暂停-恢复-逐步执行游戏","link":"#暂停-恢复-逐步执行游戏","children":[{"level":3,"title":"后台处理","slug":"后台处理","link":"#后台处理","children":[]}]},{"level":2,"title":"HasPerformanceTracker 混入","slug":"hasperformancetracker-混入","link":"#hasperformancetracker-混入","children":[]}],"git":{"updatedTime":1735588798000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/game.chatgpt.md"}');export{h as comp,f as data};
