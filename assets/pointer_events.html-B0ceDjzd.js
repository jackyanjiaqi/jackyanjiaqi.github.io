import{_ as s,c as e,f as a,o as t}from"./app-BZlJFCNj.js";const o={};function i(p,n){return t(),e("div",null,n[0]||(n[0]=[a(`<h1 id="pointer-events" tabindex="-1"><a class="header-anchor" href="#pointer-events"><span>Pointer Events</span></a></h1><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">This document describes the new events API. The old (legacy) approach,</span>
<span class="line">which is still supported, is described in [](gesture_input.md).</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Pointer events</strong> are Flutter&#39;s generalized &quot;mouse-movement&quot;-type events (for desktop or web).</p><p>If you want to interact with mouse movement events within your component or game, you can use the <code>PointerMoveCallbacks</code> mixin.</p><p>For example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">PointerMoveCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onPointerMove</span><span class="token punctuation">(</span><span class="token class-name">PointerMoveEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Do something in response to the mouse move (e.g. update coordinates)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The mixin adds two overridable methods to your component:</p><ul><li><code>onPointerMove</code>: called when the mouse moves within the component</li><li><code>onPointerMoveStop</code>: called once if the component was being hovered and the mouse leaves</li></ul><p>By default, each of these methods does nothing, they need to be overridden in order to perform any function.</p><p>In addition, the component must implement the <code>containsLocalPoint()</code> method (already implemented in <code>PositionComponent</code>, so most of the time you don&#39;t need to do anything here) -- this method allows Flame to know whether the event occurred within the component or not.</p><p>Note that only mouse events happening within your component will be proxied along. However, <code>onPointerMoveStop</code> will be fired once on the first mouse movement that leaves your component, so you can handle any exit conditions there.</p><h2 id="hovercallbacks" tabindex="-1"><a class="header-anchor" href="#hovercallbacks"><span>HoverCallbacks</span></a></h2><p>If you want to specifically know if your component is being hovered or not, or if you want to hook into hover enter and exist events, you can use a more dedicated mixin called <code>HoverCallbacks</code>.</p><p>For example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">HoverCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// use \`isHovered\` to know if the component is being hovered</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onHoverEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Do something in response to the mouse entering the component</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onHoverExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Do something in response to the mouse leaving the component</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that you can still listen to the &quot;raw&quot; onPointerMove methods for additional functionality, just make sure to call the <code>super</code> version to enable the <code>HoverCallbacks</code> behavior.</p><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h3><p>Play with the demo below to see the pointer hover events in action.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">:sources: ../flame/examples</span>
<span class="line">:page: pointer_events</span>
<span class="line">:show: widget code</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)]))}const c=s(o,[["render",i],["__file","pointer_events.html.vue"]]),d=JSON.parse('{"path":"/guide/flame/inputs/pointer_events.html","title":"Pointer Events","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"HoverCallbacks","slug":"hovercallbacks","link":"#hovercallbacks","children":[{"level":3,"title":"Demo","slug":"demo","link":"#demo","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/inputs/pointer_events.md"}');export{c as comp,d as data};
