import{_ as o,c,a as s,d as t,e as p,b as a,f as l,r as i,o as u}from"./app-B8TszOv9.js";const d={};function r(k,n){const e=i("RouteLink");return u(),c("div",null,[n[4]||(n[4]=s("h1",{id:"键盘输入",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#键盘输入"},[s("span",null,"键盘输入")])],-1)),n[5]||(n[5]=s("p",null,"本部分包括键盘输入的文档。",-1)),n[6]||(n[6]=s("p",null,"关于其他输入的文档，请参阅：",-1)),s("ul",null,[s("li",null,[t(e,{to:"/guide/flame/inputs/gesture_input.html"},{default:p(()=>n[0]||(n[0]=[a("手势输入")])),_:1}),n[1]||(n[1]=a(": 适用于鼠标和触摸指针手势"))]),s("li",null,[t(e,{to:"/guide/flame/inputs/other_inputs.html"},{default:p(()=>n[2]||(n[2]=[a("其他输入")])),_:1}),n[3]||(n[3]=a(": 适用于摇杆、游戏手柄等"))])]),n[7]||(n[7]=l(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Flame 中的键盘 API 基于 Flutter 的 <a href="https://api.flutter.dev/flutter/widgets/Focus-class.html" target="_blank" rel="noopener noreferrer">Focus 小部件</a>。</p><p>要自定义焦点行为，请参阅<a href="#controlling-focus">控制焦点</a>。</p><p>游戏可以通过两种方式响应按键：在游戏级别和组件级别。 对于每种情况，我们都有一个可以添加到 <code>Game</code> 或 <code>Component</code> 类的 mixin。</p><h3 id="在游戏级别接收键盘事件" tabindex="-1"><a class="header-anchor" href="#在游戏级别接收键盘事件"><span>在游戏级别接收键盘事件</span></a></h3><p>为了让 <code>Game</code> 子类对按键敏感，请将其与 <code>KeyboardEvents</code> 混合。</p><p>之后，可以重写 <code>onKeyEvent</code> 方法。</p><p>该方法接收两个参数：首先是触发回调的 <a href="https://api.flutter.dev/flutter/services/KeyEvent-class.html" target="_blank" rel="noopener noreferrer"><code>KeyEvent</code></a>；其次是当前按下的 <a href="https://api.flutter.dev/flutter/services/LogicalKeyboardKey-class.html" target="_blank" rel="noopener noreferrer"><code>LogicalKeyboardKey</code></a> 集合。</p><p>返回值是 <a href="https://api.flutter.dev/flutter/widgets/KeyEventResult.html" target="_blank" rel="noopener noreferrer"><code>KeyEventResult</code></a>。</p><p><code>KeyEventResult.handled</code> 将告诉框架该按键事件在 Flame 内部已解决，并跳过 <code>GameWidget</code> 以外的任何其他键盘处理小部件。</p><p><code>KeyEventResult.ignored</code> 将告诉框架继续测试此事件，以查看在 <code>GameWidget</code> 之外的任何其他键盘处理小部件中是否可以解决。如果没有任何处理程序解决该事件，框架将触发 <code>SystemSoundType.alert</code>。</p><p><code>KeyEventResult.skipRemainingHandlers</code> 类似于 <code>.ignored</code>，除了它会跳过任何其他处理程序并直接播放警报声音。</p><p>最小示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token keyword">with</span> <span class="token class-name">KeyboardEvents</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">KeyEventResult</span> <span class="token function">onKeyEvent</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">KeyEvent</span> event<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">&gt;</span></span> keysPressed<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> isKeyDown <span class="token operator">=</span> event <span class="token operator">is</span> <span class="token class-name">KeyDownEvent</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">final</span> isSpace <span class="token operator">=</span> keysPressed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>space<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSpace <span class="token operator">&amp;&amp;</span> isKeyDown<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>altLeft<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">          keysPressed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>altRight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shootHarder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token class-name">KeyEventResult</span><span class="token punctuation">.</span>handled<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">KeyEventResult</span><span class="token punctuation">.</span>ignored<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在组件级别接收键盘事件" tabindex="-1"><a class="header-anchor" href="#在组件级别接收键盘事件"><span>在组件级别接收键盘事件</span></a></h3><p>为了直接在组件中接收键盘事件，可以使用 <code>KeyboardHandler</code> mixin。</p><p>与 <code>TapCallbacks</code> 和 <code>DragCallbacks</code> 类似，<code>KeyboardHandler</code> 可以混合到 <code>Component</code> 的任何子类中。</p><p><code>KeyboardHandlers</code> 必须仅添加到与 <code>HasKeyboardHandlerComponents</code> 混合的游戏。</p><blockquote><p>⚠️ 注意：如果使用了 <code>HasKeyboardHandlerComponents</code>，则必须从游戏 mixin 列表中移除 <code>KeyboardEvents</code> 以避免冲突。</p></blockquote><p>应用 <code>KeyboardHandler</code> 后，可以重写 <code>onKeyEvent</code> 方法。</p><p>该方法接收两个参数。首先是触发回调的 <a href="https://api.flutter.dev/flutter/services/KeyEvent-class.html" target="_blank" rel="noopener noreferrer"><code>KeyEvent</code></a>；其次是当前按下的 <a href="https://api.flutter.dev/flutter/services/LogicalKeyboardKey-class.html" target="_blank" rel="noopener noreferrer"><code>LogicalKeyboardKey</code></a> 集合。</p><p>返回值应为 <code>true</code> 以允许按键事件在其他组件之间持续传播。要阻止任何其他组件接收该事件，返回 <code>false</code>。</p><p>Flame 还提供了一个默认实现 <code>KeyboardListenerComponent</code>，可用于处理键盘事件。与其他任何组件一样，它可以作为子组件添加到 <code>FlameGame</code> 或另一个 <code>Component</code> 中：</p><p>例如，假设有一个具有沿 X 和 Y 轴移动的方法的 <code>PositionComponent</code>，则可以使用以下代码将这些方法绑定到按键事件：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token class-name">KeyboardListenerComponent</span><span class="token punctuation">(</span></span>
<span class="line">    keyUp<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyA<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyD<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyW<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyS<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    keyDown<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyA<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyD<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyW<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyS<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="控制焦点" tabindex="-1"><a class="header-anchor" href="#控制焦点"><span>控制焦点</span></a></h3><p>在小部件级别，可以使用 <a href="https://api.flutter.dev/flutter/widgets/FocusNode-class.html" target="_blank" rel="noopener noreferrer"><code>FocusNode</code></a> API 来控制游戏是否获得焦点。</p><p><code>GameWidget</code> 具有一个可选的 <code>focusNode</code> 参数，允许外部控制其焦点。</p><p>默认情况下，<code>GameWidget</code> 的 <code>autofocus</code> 设置为 true，这意味着一旦挂载，它将获得焦点。要重写此行为，请将 <code>autofocus</code> 设置为 false。</p><p>有关更完整的示例，请参阅<a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/input/keyboard_example.dart" target="_blank" rel="noopener noreferrer">此处</a>。</p>`,30))])}const v=o(d,[["render",r],["__file","keyboard_input.qwen.html.vue"]]),y=JSON.parse('{"path":"/guide/flame/inputs/keyboard_input.qwen.html","title":"键盘输入","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"在游戏级别接收键盘事件","slug":"在游戏级别接收键盘事件","link":"#在游戏级别接收键盘事件","children":[]},{"level":3,"title":"在组件级别接收键盘事件","slug":"在组件级别接收键盘事件","link":"#在组件级别接收键盘事件","children":[]},{"level":3,"title":"控制焦点","slug":"控制焦点","link":"#控制焦点","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/inputs/keyboard_input.qwen.md"}');export{v as comp,y as data};
