import{_ as s,c as a,f as e,o as p}from"./app-BZlJFCNj.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="层和快照" tabindex="-1"><a class="header-anchor" href="#层和快照"><span>层和快照</span></a></h1><p>层和快照共享一些共同的功能，包括预渲染和缓存对象以提高性能。然而，它们也有独特的功能，使其更适合不同的用例。</p><p><code>Snapshot</code> 是一个可以添加到任何 <code>PositionComponent</code> 的混入类。使用场景包括：</p><ul><li>将其混入到现有的游戏对象（这些对象是 <code>PositionComponents</code>）。</li><li>缓存复杂的渲染游戏对象，如精灵。</li><li>在不需要每次重新渲染的情况下绘制相同对象多次。</li><li>捕获图像快照以保存为屏幕截图（例如）。</li></ul><p><code>Layer</code> 是一个类。使用或扩展此类的场景包括：</p><ul><li>使用逻辑层结构化你的游戏（例如 UI、前景、主内容、背景）。</li><li>将对象分组形成复杂的场景，然后对其进行缓存（例如背景层）。</li><li>处理器支持。层允许用户定义的处理器在渲染前后运行。</li></ul><h2 id="层" tabindex="-1"><a class="header-anchor" href="#层"><span>层</span></a></h2><p>层允许你按上下文对渲染进行分组，并且可以预渲染东西。这使得你可以将游戏中不经常变化的部分（如背景）预先渲染并存储到内存中，从而释放处理能力用于需要每帧渲染的动态内容。</p><p>Flame中有两种类型的层：</p><ul><li><code>DynamicLayer</code>：适用于移动或变化的事物。</li><li><code>PreRenderedLayer</code>：适用于静态的事物。</li></ul><h3 id="dynamiclayer" tabindex="-1"><a class="header-anchor" href="#dynamiclayer"><span>DynamicLayer</span></a></h3><p>动态层是每次在画布上绘制时都会被重新渲染的层。顾名思义，它适合用于动态内容，并且最适合对具有相同上下文的对象进行分组渲染。</p><p>使用示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">GameLayer</span> <span class="token keyword">extends</span> <span class="token class-name">DynamicLayer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">MyGame</span> game<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">GameLayer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">drawLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    game<span class="token punctuation">.</span>playerSprite<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">      canvas<span class="token punctuation">,</span></span>
<span class="line">      position<span class="token punctuation">:</span> game<span class="token punctuation">.</span>playerPosition<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    game<span class="token punctuation">.</span>enemySprite<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">      canvas<span class="token punctuation">,</span></span>
<span class="line">      position<span class="token punctuation">:</span> game<span class="token punctuation">.</span>enemyPosition<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 其他方法省略...</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    gameLayer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可选的 x 和 y 参数可以作为位置参数提供</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prerenderedlayer" tabindex="-1"><a class="header-anchor" href="#prerenderedlayer"><span>PreRenderedLayer</span></a></h3><p>预渲染层只被渲染一次，然后缓存到内存中，并在后续的游戏画布上复制显示。这对于缓存游戏过程中不变的内容（如背景）非常有用。</p><p>使用示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">BackgroundLayer</span> <span class="token keyword">extends</span> <span class="token class-name">PreRenderedLayer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">Sprite</span> sprite<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">BackgroundLayer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">drawLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sprite<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">      canvas<span class="token punctuation">,</span></span>
<span class="line">      position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 其他方法省略...</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 可选的 x 和 y 参数可以作为位置参数提供。</span></span>
<span class="line">    backgroundLayer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="层处理器" tabindex="-1"><a class="header-anchor" href="#层处理器"><span>层处理器</span></a></h3><p>Flame 还提供了一种在层上添加处理器的方式，这可以通过对整个层应用效果。目前内置的唯一处理器是 <code>ShadowProcessor</code>，它会在你的层上渲染一个背景阴影。</p><p>要向层添加处理器，只需将其添加到层的 <code>preProcessors</code> 或 <code>postProcessors</code> 列表中：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 适用于 DynamicLayer 和 PreRenderedLayer</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BackgroundLayer</span> <span class="token keyword">extends</span> <span class="token class-name">PreRenderedLayer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">Sprite</span> sprite<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">BackgroundLayer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sprite<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    preProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ShadowProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">drawLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 省略 */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过继承 <code>LayerProcessor</code> 类来创建自定义处理器。</p><p>参见 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/layers_example.dart" target="_blank" rel="noopener noreferrer">一个层次工作的示例</a>。</p><h2 id="快照" tabindex="-1"><a class="header-anchor" href="#快照"><span>快照</span></a></h2><p>快照是层的替代方案。<code>Snapshot</code> 混入可以应用于任何 <code>PositionComponent</code>。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SnapshotComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">Snapshot</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SnapshotComponent</span> root<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 添加一个快照组件。</span></span>
<span class="line">    root <span class="token operator">=</span> <span class="token class-name">SnapshotComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作为快照渲染" tabindex="-1"><a class="header-anchor" href="#作为快照渲染"><span>作为快照渲染</span></a></h3><p>将快照启用组件的 <code>renderSnapshot</code> 设置为 <code>true</code>（默认值）的行为类似于 <code>PreRenderedLayer</code>。该组件只被渲染一次，然后缓存到内存中，并在后续的游戏画布上复制显示。这对于缓存游戏过程中不变的内容（如背景）非常有用。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SnapshotComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">Snapshot</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SnapshotComponent</span> root<span class="token punctuation">;</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SpriteComponent</span> background1<span class="token punctuation">;</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SpriteComponent</span> background2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 添加一个快照组件。</span></span>
<span class="line">    root <span class="token operator">=</span> <span class="token class-name">SnapshotComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 添加一些子对象。</span></span>
<span class="line">    <span class="token keyword">final</span> background1Sprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;background1.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    background1 <span class="token operator">=</span> <span class="token class-name">SpriteComponent</span><span class="token punctuation">(</span>sprite<span class="token punctuation">:</span> background1Sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>background1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">final</span> background2Sprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;background2.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    background2 <span class="token operator">=</span> <span class="token class-name">SpriteComponent</span><span class="token punctuation">(</span>sprite<span class="token punctuation">:</span> background2Sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>background2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 现在，root 会渲染一次（它本身及其所有子对象），然后缓存结果。</span></span>
<span class="line">    <span class="token comment">// 在后续的渲染调用中，root 本身及其任何子对象都不会被重新渲染。</span></span>
<span class="line">    <span class="token comment">// 相反，将使用快照以提高性能。</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重新生成快照" tabindex="-1"><a class="header-anchor" href="#重新生成快照"><span>重新生成快照</span></a></h4><p>一个启用快照的组件会为其整个树（包括其子对象）生成一个快照。如果任何子对象发生变化（例如位置变化或动画），调用 <code>takeSnapshot</code> 来更新缓存的快照。如果它们变化非常频繁，最好不要使用 <code>Snapshot</code> 因为这将不会带来性能提升。</p><p>渲染快照的组件仍然可以被变换而不会产生任何性能代价。一旦生成了快照，该组件仍可缩放、移动和旋转。但是，如果组件的内容发生了变化（即它所渲染的内容），则需要通过调用 <code>takeSnapshot</code> 重新生成快照。</p><h3 id="生成快照" tabindex="-1"><a class="header-anchor" href="#生成快照"><span>生成快照</span></a></h3><p>启用快照的组件可以在任何时候被用于生成快照，即使 <code>renderSnapshot</code> 设置为 false。这对于捕获屏幕截图或任何其他可能需要用整个游戏或部分游戏的静态快照的情况非常有用。</p><p>快照总是以没有变换的方式生成 - 即好像启用快照的组件位于位置 (0,0) 并且没有缩放或旋转一样。</p><p>快照被保存为 <code>Picture</code>，但可以使用 <code>snapshotToImage</code> 转换为 <code>Image</code>。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SnapshotComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">Snapshot</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SnapshotComponent</span> root<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 添加一个快照组件，但不使用其渲染模式。</span></span>
<span class="line">    root <span class="token operator">=</span> <span class="token class-name">SnapshotComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>renderSnapshot <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 其他代码省略。</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 如此调用以在任何时间获取图像快照。</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    root<span class="token punctuation">.</span><span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> image <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">snapshotToImage</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="裁剪或偏心的快照" tabindex="-1"><a class="header-anchor" href="#裁剪或偏心的快照"><span>裁剪或偏心的快照</span></a></h3><p>有时你的快照 <code>Image</code> 可能会出现裁剪或不在你期望的位置。</p><p>这是因为一个 <code>Picture</code> 的内容可以相对于原点定位在任何位置，但当它被转换为 <code>Image</code> 时，图像总是从 <code>0,0</code> 开始。这意味着负位置的内容会被裁剪。</p><p>处理这个问题的最佳方法是确保你的 <code>Snapshot</code> 组件相对于游戏始终保持在位置 <code>0,0</code> 并且你从未移动过它。这意味着图像通常会包含你期望的内容。</p><p>然而，这并不总是可能的。要在转换为图像之前移动（或旋转、缩放等）快照，请将变换矩阵传递给 <code>snapshotToImage</code> 如下：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 如此调用以在任何时间获取图像快照。</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 准备一个矩阵来将快照移动到 (200,50)。</span></span>
<span class="line">  <span class="token keyword">final</span> matrix <span class="token operator">=</span> <span class="token class-name">Matrix4</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">200.0</span><span class="token punctuation">,</span><span class="token number">50.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  root<span class="token punctuation">.</span><span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> image <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">snapshotToImage</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> transform<span class="token punctuation">:</span> matrix<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44)]))}const o=s(t,[["render",l],["__file","layers.qwen.html.vue"]]),u=JSON.parse('{"path":"/guide/flame/rendering/layers.qwen.html","title":"层和快照","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"层","slug":"层","link":"#层","children":[{"level":3,"title":"DynamicLayer","slug":"dynamiclayer","link":"#dynamiclayer","children":[]},{"level":3,"title":"PreRenderedLayer","slug":"prerenderedlayer","link":"#prerenderedlayer","children":[]},{"level":3,"title":"层处理器","slug":"层处理器","link":"#层处理器","children":[]}]},{"level":2,"title":"快照","slug":"快照","link":"#快照","children":[{"level":3,"title":"作为快照渲染","slug":"作为快照渲染","link":"#作为快照渲染","children":[]},{"level":3,"title":"生成快照","slug":"生成快照","link":"#生成快照","children":[]},{"level":3,"title":"裁剪或偏心的快照","slug":"裁剪或偏心的快照","link":"#裁剪或偏心的快照","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/rendering/layers.qwen.md"}');export{o as comp,u as data};
