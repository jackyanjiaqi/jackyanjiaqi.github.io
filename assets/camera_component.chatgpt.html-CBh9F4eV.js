import{_ as a,c as s,f as e,o as t}from"./app-BZlJFCNj.js";const o={};function p(l,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h3 id="摄像机组件" tabindex="-1"><a class="header-anchor" href="#摄像机组件"><span>摄像机组件</span></a></h3><p><strong>摄像机作为组件（Camera-as-a-component）</strong> 是一种新的游戏结构设计方法，它允许灵活地放置摄像机，甚至可以同时拥有多个摄像机。</p><p>为了理解这种方法，想象一下你的游戏世界是一个独立存在的实体，它与应用程序是分离的。可以将你的游戏看作是一个可以用来观察这个世界的“窗口”。你可以随时关闭这个窗口，但游戏世界仍然存在。相反，你也可以同时打开多个窗口，观察同一个世界或不同的世界。</p><p>以这种思维方式，我们可以理解摄像机作为组件的工作原理。</p><hr><h3 id="world-世界" tabindex="-1"><a class="header-anchor" href="#world-世界"><span><strong>World（世界）</strong></span></a></h3><p><strong>World 类</strong> 包含了游戏世界中的所有组件。World 组件可以在任何位置挂载，例如挂载在游戏类的根目录中，就像内置的 World 一样。</p><p>World 本身并不通过传统方法渲染，而是通过一个或多个 CameraComponent 来“观察”这个世界。在 <code>FlameGame</code> 类中，默认存在一个 <code>world</code>，并与默认的 <code>camera</code> 组件配对使用。</p><h4 id="多世界支持" tabindex="-1"><a class="header-anchor" href="#多世界支持"><span><strong>多世界支持</strong></span></a></h4><p>游戏可以拥有多个 World 实例，这些实例可以同时渲染或分别渲染。例如，如果你有两个世界 A 和 B，并且只有一个摄像机，可以通过切换摄像机的目标，从世界 A 切换到 B，而不需要卸载 A 或挂载 B。</p><h4 id="扩展-world" tabindex="-1"><a class="header-anchor" href="#扩展-world"><span><strong>扩展 World</strong></span></a></h4><p>你可以通过构造函数的 <code>children</code> 参数，或使用 <code>add</code> 和 <code>addAll</code> 方法向 World 添加子组件。以下代码展示了如何扩展 World 并在其中创建游戏逻辑：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">GameWidget</span><span class="token punctuation">(</span><span class="token class-name">FlameGame</span><span class="token punctuation">(</span>world<span class="token punctuation">:</span> <span class="token class-name">MyWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyWorld</span> <span class="token keyword">extends</span> <span class="token class-name">World</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 加载这个世界需要的所有资源，并添加组件等</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="cameracomponent-摄像机组件" tabindex="-1"><a class="header-anchor" href="#cameracomponent-摄像机组件"><span><strong>CameraComponent（摄像机组件）</strong></span></a></h3><p><strong>CameraComponent</strong> 是用于渲染 World 的组件。它需要一个 World 实例的引用，但后续可以更改其目标 World。多个摄像机可以同时观察同一个世界。</p><h4 id="默认摄像机" tabindex="-1"><a class="header-anchor" href="#默认摄像机"><span><strong>默认摄像机</strong></span></a></h4><p>在 <code>FlameGame</code> 类中，默认存在一个名为 <code>camera</code> 的 CameraComponent，它与默认的 <code>world</code> 配对。如果你的游戏不需要自定义摄像机，则无需创建或添加新的 CameraComponent。</p><h4 id="组成结构" tabindex="-1"><a class="header-anchor" href="#组成结构"><span><strong>组成结构</strong></span></a></h4><p>CameraComponent 包含以下两个子组件：</p><ul><li><strong>Viewport（视口）</strong>：控制渲染区域的位置和大小。</li><li><strong>Viewfinder（取景器）</strong>：控制观察的世界位置、缩放和角度。</li></ul><h4 id="固定分辨率" tabindex="-1"><a class="header-anchor" href="#固定分辨率"><span><strong>固定分辨率</strong></span></a></h4><p>通过 <code>CameraComponent.withFixedResolution()</code> 工厂构造函数，你可以设置固定的用户设备分辨率：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> camera <span class="token operator">=</span> <span class="token class-name">CameraComponent</span><span class="token punctuation">.</span><span class="token function">withFixedResolution</span><span class="token punctuation">(</span></span>
<span class="line">  world<span class="token punctuation">:</span> myWorldComponent<span class="token punctuation">,</span></span>
<span class="line">  width<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span></span>
<span class="line">  height<span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此设置会创建一个中心对齐的视口，保持 800:600 的纵横比。</p><hr><h3 id="viewport-视口" tabindex="-1"><a class="header-anchor" href="#viewport-视口"><span><strong>Viewport（视口）</strong></span></a></h3><p>Viewport 是观察 World 的“窗口”，它具有特定的大小、形状和屏幕位置。以下是几种可用的视口类型：</p><ul><li><strong>MaxViewport</strong>（默认）：扩展到游戏允许的最大大小。</li><li><strong>FixedResolutionViewport</strong>：固定分辨率和纵横比。</li><li><strong>FixedSizeViewport</strong>：具有预定义大小的矩形视口。</li><li><strong>FixedAspectRatioViewport</strong>：在保持纵横比的情况下适配游戏画布的矩形视口。</li><li><strong>CircularViewport</strong>：固定大小的圆形视口。</li></ul><p>向 Viewport 添加子组件可以实现静态的 HUD（头部显示）。</p><hr><h3 id="viewfinder-取景器" tabindex="-1"><a class="header-anchor" href="#viewfinder-取景器"><span><strong>Viewfinder（取景器）</strong></span></a></h3><p>Viewfinder 决定摄像机当前观察的游戏世界位置，同时控制缩放和旋转角度。</p><ul><li><strong>Anchor 属性</strong>：定义取景器的“逻辑中心”。例如，在横版动作游戏中，摄像机通常聚焦在靠近屏幕左下角的主角，而非屏幕中心。</li></ul><p>你也可以为 Viewfinder 添加行为组件，例如缩放效果（<code>ScaleEffect</code>），以实现平滑的缩放。</p><hr><h3 id="backdrop-背景组件" tabindex="-1"><a class="header-anchor" href="#backdrop-背景组件"><span><strong>Backdrop（背景组件）</strong></span></a></h3><p>为了在世界后方添加静态组件，你可以将它们添加到 Backdrop 组件中，或者直接替换它。例如，你可以在一个可移动的世界下放置一个静态的背景：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">camera<span class="token punctuation">.</span>backdrop<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">MyStaticBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 或者替换背景</span></span>
<span class="line">camera<span class="token punctuation">.</span>backdrop <span class="token operator">=</span> <span class="token class-name">MyStaticBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="摄像机控制" tabindex="-1"><a class="header-anchor" href="#摄像机控制"><span><strong>摄像机控制</strong></span></a></h3><p>摄像机的设置可以在运行时进行修改：</p><ol><li><strong>手动修改</strong>：覆盖 <code>CameraComponent.update()</code> 方法，手动调整取景器位置或缩放。</li><li><strong>使用效果或行为</strong>：将效果（effects）或行为（behaviors）添加到 Viewfinder 或 Viewport。</li><li><strong>使用特殊方法</strong>： <ul><li><code>follow()</code>: 使摄像机跟随目标。</li><li><code>stop()</code>: 停止摄像机的移动或跟随。</li><li><code>moveBy()</code>: 按指定偏移量移动摄像机。</li><li><code>moveTo()</code>: 将摄像机移动到世界地图上的指定位置。</li><li><code>setBounds()</code>: 设置摄像机的移动边界。</li></ul></li></ol><hr><h3 id="可见区域与性能优化" tabindex="-1"><a class="header-anchor" href="#可见区域与性能优化"><span><strong>可见区域与性能优化</strong></span></a></h3><h4 id="visibleworldrect" tabindex="-1"><a class="header-anchor" href="#visibleworldrect"><span><strong>visibleWorldRect</strong></span></a></h4><p>摄像机的 <code>visibleWorldRect</code> 属性描述了当前可见的世界区域。这一属性可以用于避免渲染视野之外的组件，或减少更新远离玩家的对象频率。</p><h4 id="检查组件是否可见" tabindex="-1"><a class="header-anchor" href="#检查组件是否可见"><span><strong>检查组件是否可见</strong></span></a></h4><p>通过 <code>canSee()</code> 方法，可以判断某个组件是否在摄像机视野内。例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>camera<span class="token punctuation">.</span><span class="token function">canSee</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   component<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除不可见组件</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50)]))}const c=a(o,[["render",p],["__file","camera_component.chatgpt.html.vue"]]),r=JSON.parse('{"path":"/guide/flame/camera_component.chatgpt.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"摄像机组件","slug":"摄像机组件","link":"#摄像机组件","children":[]},{"level":3,"title":"World（世界）","slug":"world-世界","link":"#world-世界","children":[]},{"level":3,"title":"CameraComponent（摄像机组件）","slug":"cameracomponent-摄像机组件","link":"#cameracomponent-摄像机组件","children":[]},{"level":3,"title":"Viewport（视口）","slug":"viewport-视口","link":"#viewport-视口","children":[]},{"level":3,"title":"Viewfinder（取景器）","slug":"viewfinder-取景器","link":"#viewfinder-取景器","children":[]},{"level":3,"title":"Backdrop（背景组件）","slug":"backdrop-背景组件","link":"#backdrop-背景组件","children":[]},{"level":3,"title":"摄像机控制","slug":"摄像机控制","link":"#摄像机控制","children":[]},{"level":3,"title":"可见区域与性能优化","slug":"可见区域与性能优化","link":"#可见区域与性能优化","children":[]}],"git":{"updatedTime":1735588798000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/camera_component.chatgpt.md"}');export{c as comp,r as data};
