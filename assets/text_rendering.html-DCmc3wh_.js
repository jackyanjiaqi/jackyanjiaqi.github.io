import{_ as t,a as o,b as p}from"./text_rendering_big3-BPDHAm5q.js";import{_ as l,c as i,f as e,a as c,b as s,d as r,e as d,r as u,o as m}from"./app-BZlJFCNj.js";const k={};function h(v,n){const a=u("RouteLink");return m(),i("div",null,[n[3]||(n[3]=e(`<h1 id="text-rendering" tabindex="-1"><a class="header-anchor" href="#text-rendering"><span>Text Rendering</span></a></h1><p>Flame has some dedicated classes to help you render text.</p><h2 id="text-components" tabindex="-1"><a class="header-anchor" href="#text-components"><span>Text Components</span></a></h2><p>The simplest way to render text with Flame is to leverage one of the provided text-rendering components:</p><ul><li><code>TextComponent</code> for rendering a single line of text</li><li><code>TextBoxComponent</code> for bounding multi-line text within a sized box, including the possibility of a typing effect. You can use the <code>newLineNotifier</code> to be notified when a new line is added. Use the <code>onComplete</code> callback to execute a function when the text is completely printed.</li><li><code>ScrollTextBoxComponent</code> enhances the functionality of <code>TextBoxComponent</code> by adding vertical scrolling capability when the text exceeds the boundaries of the enclosing box.</li></ul><p>All components are showcased in <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/text_example.dart" target="_blank" rel="noopener noreferrer">this example</a>.</p><h3 id="textcomponent" tabindex="-1"><a class="header-anchor" href="#textcomponent"><span>TextComponent</span></a></h3><p><code>TextComponent</code> is a simple component that renders a single line of text.</p><p>Simple usage:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token class-name">TextComponent</span><span class="token punctuation">(</span></span>
<span class="line">        text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Hello, Flame&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">        position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In order to configure aspects of the rendering like font family, size, color, etc, you need to provide (or amend) a <code>TextRenderer</code> with such information; while you can read more details about this interface below, the simplest implementation you can use is the <code>TextPaint</code>, which takes a Flutter <code>TextStyle</code>:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> regular <span class="token operator">=</span> <span class="token class-name">TextPaint</span><span class="token punctuation">(</span></span>
<span class="line">  style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span></span>
<span class="line">    fontSize<span class="token punctuation">:</span> <span class="token number">48.0</span><span class="token punctuation">,</span></span>
<span class="line">    color<span class="token punctuation">:</span> <span class="token class-name">BasicPalette</span><span class="token punctuation">.</span>white<span class="token punctuation">.</span>color<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token class-name">TextComponent</span><span class="token punctuation">(</span></span>
<span class="line">        text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Hello, Flame&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">        textRenderer<span class="token punctuation">:</span> regular<span class="token punctuation">,</span></span>
<span class="line">        anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>topCenter<span class="token punctuation">,</span></span>
<span class="line">        position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can find all the options under <a href="https://pub.dev/documentation/flame/latest/components/TextComponent-class.html" target="_blank" rel="noopener noreferrer">TextComponent&#39;s API</a>.</p><h3 id="textboxcomponent" tabindex="-1"><a class="header-anchor" href="#textboxcomponent"><span>TextBoxComponent</span></a></h3><p><code>TextBoxComponent</code> is very similar to <code>TextComponent</code>, but as its name suggest it is used to render text inside a bounding box, creating line breaks according to the provided box size.</p><p>You can decide if the box should grow as the text is written or if it should be static by the <code>growingBox</code> variable in the <code>TextBoxConfig</code>. A static box could either have a fixed size (setting the <code>size</code> property of the <code>TextBoxComponent</code>), or to automatically shrink to fit the text content.</p><p>In addition, the <code>align</code> property allows you to control the horizontal and vertical alignment of the text content. For example, setting <code>align</code> to <code>Anchor.center</code> will center the text within its bounding box both vertically and horizontally.</p><p>If you want to change the margins of the box use the <code>margins</code> variable in the <code>TextBoxConfig</code>.</p><p>Finally, if you want to simulate a &quot;typing&quot; effect, by showing each character of the string one by one as if being typed in real-time, you can provide the <code>boxConfig.timePerChar</code> parameter.</p><p>Example usage:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyTextBox</span> <span class="token keyword">extends</span> <span class="token class-name">TextBoxComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyTextBox</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span></span>
<span class="line">    text<span class="token punctuation">:</span> text<span class="token punctuation">,</span></span>
<span class="line">    textRenderer<span class="token punctuation">:</span> tiny<span class="token punctuation">,</span></span>
<span class="line">    boxConfig<span class="token punctuation">:</span> <span class="token class-name">TextBoxConfig</span><span class="token punctuation">(</span>timePerChar<span class="token punctuation">:</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">final</span> bgPaint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFFFF00FF</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> borderPaint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>stroke<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Rect</span> rect <span class="token operator">=</span> <span class="token class-name">Rect</span><span class="token punctuation">.</span><span class="token function">fromLTWH</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> bgPaint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">deflate</span><span class="token punctuation">(</span>boxConfig<span class="token punctuation">.</span>margin<span class="token punctuation">)</span><span class="token punctuation">,</span> borderPaint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can find all the options under <a href="https://pub.dev/documentation/flame/latest/components/TextBoxComponent-class.html" target="_blank" rel="noopener noreferrer">TextBoxComponent&#39;s API</a>.</p><h3 id="scrolltextboxcomponent" tabindex="-1"><a class="header-anchor" href="#scrolltextboxcomponent"><span>ScrollTextBoxComponent</span></a></h3><p>The <code>ScrollTextBoxComponent</code> is an advanced version of the <code>TextBoxComponent</code>, designed for displaying scrollable text within a defined area. This component is particularly useful for creating interfaces where large amounts of text need to be presented in a constrained space, such as dialogues or information panels.</p><p>Note that the <code>align</code> property of <code>TextBoxComponent</code> is not available.</p><p>Example usage:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyScrollableText</span> <span class="token keyword">extends</span> <span class="token class-name">ScrollTextBoxComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyScrollableText</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> frameSize<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span></span>
<span class="line">    size<span class="token punctuation">:</span> frameSize<span class="token punctuation">,</span></span>
<span class="line">    text<span class="token punctuation">:</span> text<span class="token punctuation">,</span></span>
<span class="line">    textRenderer<span class="token punctuation">:</span> regular<span class="token punctuation">,</span> </span>
<span class="line">    boxConfig<span class="token punctuation">:</span> <span class="token class-name">TextBoxConfig</span><span class="token punctuation">(</span>timePerChar<span class="token punctuation">:</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="textelementcomponent" tabindex="-1"><a class="header-anchor" href="#textelementcomponent"><span>TextElementComponent</span></a></h3><p>If you want to render an arbitrary TextElement, ranging from a single InlineTextElement to a formatted DocumentRoot, you can use the <code>TextElementComponent</code>.</p><p>A simple example is to create a DocumentRoot to render a sequence of block elements (think of an HTML &quot;div&quot;) containing rich text:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token keyword">final</span> document <span class="token operator">=</span> <span class="token class-name">DocumentRoot</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token class-name">HeaderNode</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1984&#39;</span></span><span class="token punctuation">,</span> level<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ParagraphNode</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string-literal"><span class="token string">&#39;Anything could be true. The so-called laws of nature were nonsense.&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> element <span class="token operator">=</span> <span class="token class-name">TextElementComponent</span><span class="token punctuation">.</span><span class="token function">fromDocument</span><span class="token punctuation">(</span></span>
<span class="line">    document<span class="token punctuation">:</span> document<span class="token punctuation">,</span></span>
<span class="line">    position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the size can be specified in two ways; either via:</p><ul><li>the size property common to all <code>PositionComponents</code>; or</li><li>the width/height included within the <code>DocumentStyle</code> applied.</li></ul><p>An example applying a style to the document (which can include the size but other parameters as well):</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token keyword">final</span> style <span class="token operator">=</span> <span class="token class-name">DocumentStyle</span><span class="token punctuation">(</span></span>
<span class="line">    width<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line">    height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">    padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> horizontal<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    background<span class="token punctuation">:</span> <span class="token class-name">BackgroundStyle</span><span class="token punctuation">(</span></span>
<span class="line">      color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF4E322E</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      borderColor<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      borderWidth<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> document <span class="token operator">=</span> <span class="token class-name">DocumentRoot</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> element <span class="token operator">=</span> <span class="token class-name">TextElementComponent</span><span class="token punctuation">.</span><span class="token function">fromDocument</span><span class="token punctuation">(</span></span>
<span class="line">    document<span class="token punctuation">:</span> document<span class="token punctuation">,</span></span>
<span class="line">    style<span class="token punctuation">:</span> style<span class="token punctuation">,</span></span>
<span class="line">    position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See a more elaborate <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/rich_text_example.dart" target="_blank" rel="noopener noreferrer">example of rich-text, formatted text blocks rendering</a>.</p><p>For more details about the underlying mechanics of the text rendering pipeline, see &quot;Text Elements, Text Nodes, and Text Styles&quot; below.</p><h3 id="flame-markdown" tabindex="-1"><a class="header-anchor" href="#flame-markdown"><span>Flame Markdown</span></a></h3><p>In order to more easily create rich-text-based DocumentRoots, from simple strings with bold/italics to complete structured documents, Flame provides the <code>flame_markdown</code> bridge package that connects the <code>markdown</code> library with Flame&#39;s text rendering infrastructure.</p><p>Just use the <code>FlameMarkdown</code> helper class and the <code>toDocument</code> method to convert a markdown string into a DocumentRoot (which can then be used to create a <code>TextElementComponent</code>):</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/text.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame_markdown/flame_markdown.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">final</span> component <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">TextElementComponent</span><span class="token punctuation">.</span><span class="token function">fromDocument</span><span class="token punctuation">(</span></span>
<span class="line">  document<span class="token punctuation">:</span> <span class="token class-name">FlameMarkdown</span><span class="token punctuation">.</span><span class="token function">toDocument</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;# Header\\n&#39;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;\\n&#39;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;This is a **bold** text, and this is *italic*.\\n&#39;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;\\n&#39;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;This is a second paragraph.\\n&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span></span>
<span class="line">  position<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span></span>
<span class="line">  size<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="infrastructure" tabindex="-1"><a class="header-anchor" href="#infrastructure"><span>Infrastructure</span></a></h2><p>If you are not using the Flame Component System, want to understand the infrastructure behind text rendering, want to customize fonts and styles used, or want to create your own custom renderers, this section is for you.</p><ul><li><code>TextRenderer</code>: renderers know &quot;how&quot; to render text; in essence they contain the style information to render any string</li><li><code>TextElement</code>: an element is formatted, &quot;laid-out&quot; piece of text, include the string (&quot;what&quot;) and the style (&quot;how&quot;)</li></ul><p>The following diagram showcases the class and inheritance structure of the text rendering pipeline:</p><p><img src="`+t+`" alt=""></p><h3 id="textrenderer" tabindex="-1"><a class="header-anchor" href="#textrenderer"><span>TextRenderer</span></a></h3><p><code>TextRenderer</code> is the abstract class used by Flame to render text. Implementations of <code>TextRenderer</code> must include the information about the &quot;how&quot; the text is rendered. Font style, size, color, etc. It should be able to combine that information with a given string of text, via the <code>format</code> method, to generate a <code>TextElement</code>.</p><p>Flame provides two concrete implementations:</p><ul><li><code>TextPaint</code>: most used, uses Flutter <code>TextPainter</code> to render regular text</li><li><code>SpriteFontRenderer</code>: uses a <code>SpriteFont</code> (a sprite sheet-based font) to render bitmap text</li><li><code>DebugTextRenderer</code>: only intended to be used for Golden Tests</li></ul><p>But you can also provide your own if you want to extend to other customized forms of text rendering.</p><p>The main job of a <code>TextRenderer</code> is to format a string of text into a <code>TextElement</code>, that then can be rendered onto the screen:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> textElement <span class="token operator">=</span> textRenderer<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Flame is awesome&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">textElement<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>However the renderer provides a helper method to directly create the element and render it:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">textRenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">  canvas<span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-literal"><span class="token string">&#39;Flame is awesome&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>topCenter<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="textpaint" tabindex="-1"><a class="header-anchor" href="#textpaint"><span>TextPaint</span></a></h4><p><code>TextPaint</code> is the built-in implementation of text rendering in Flame. It is based on top of Flutter&#39;s <code>TextPainter</code> class (hence the name), and it can be configured by the style class <code>TextStyle</code>, which contains all typographical information required to render text; i.e., font size and color, font family, etc.</p><p>Outside of the style you can also optionally provide one extra parameter which is the <code>textDirection</code> (but that is typically already set to <code>ltr</code> or left-to-right).</p><p>Example usage:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token class-name">TextPaint</span> textPaint <span class="token operator">=</span> <span class="token class-name">TextPaint</span><span class="token punctuation">(</span></span>
<span class="line">  style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span></span>
<span class="line">    fontSize<span class="token punctuation">:</span> <span class="token number">48.0</span><span class="token punctuation">,</span></span>
<span class="line">    fontFamily<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Awesome Font&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: there are several packages that contain the class <code>TextStyle</code>. We export the right one (from Flutter) via the <code>text</code> module:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/text.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>But if you want to import it explicitly, make sure that you import it from <code>package:flutter/painting.dart</code> (or from material or widgets). If you also need to import <code>dart:ui</code>, you might need to hide its version of <code>TextStyle</code>, since that module contains a different class with the same name:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/painting.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:ui&#39;</span></span> <span class="token keyword">hide</span> <span class="token class-name">TextStyle</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Following are some common properties of <code>TextStyle</code>(see the <a href="https://api.flutter.dev/flutter/painting/TextStyle-class.html" target="_blank" rel="noopener noreferrer">full list of <code>TextStyle</code> properties</a>):</p><ul><li><code>fontFamily</code>: a commonly available font, like Arial (default), or a custom font added in your pubspec (see <a href="https://docs.flutter.dev/cookbook/design/fonts" target="_blank" rel="noopener noreferrer">how to add a custom font</a>).</li><li><code>fontSize</code>: font size, in pts (default <code>24.0</code>).</li><li><code>height</code>: height of text line, as a multiple of font size (default <code>null</code>).</li><li><code>color</code>: the color, as a <code>ui.Color</code> (default white).</li></ul>`,66)),c("p",null,[n[1]||(n[1]=s("For more information regarding colors and how to create them, see the ")),r(a,{to:"/guide/flame/rendering/palette.html"},{default:d(()=>n[0]||(n[0]=[s("Colors and Palette")])),_:1}),n[2]||(n[2]=s(" guide."))]),n[4]||(n[4]=e(`<h4 id="spritefontrenderer" tabindex="-1"><a class="header-anchor" href="#spritefontrenderer"><span>SpriteFontRenderer</span></a></h4><p>The other renderer option provided out of the box is <code>SpriteFontRenderer</code>, which allows you to provide a <code>SpriteFont</code> based off of a sprite sheet. TODO</p><h4 id="debugtextrenderer" tabindex="-1"><a class="header-anchor" href="#debugtextrenderer"><span>DebugTextRenderer</span></a></h4><p>This renderer is intended to be used for Golden Tests. Rendering normal font-based text in Golden Tests is unreliable due to differences in font definitions across platforms and different algorithms used for anti-aliasing. This renderer will render text as if each word was a solid rectangle, making it possible to test the layout, positioning and sizing of the elements without having to rely on font-based rendering.</p><h2 id="inline-text-elements" tabindex="-1"><a class="header-anchor" href="#inline-text-elements"><span>Inline Text Elements</span></a></h2><p>A <code>TextElement</code> is a &quot;pre-compiled&quot;, formatted and laid-out piece of text with a specific styling applied, ready to be rendered at any given position.</p><p>A <code>InlineTextElement</code> implements the <code>TextElement</code> interface and must implement their two methods, one that teaches how to translate it around and another on how to draw it to the canvas:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token keyword">void</span> <span class="token function">translate</span><span class="token punctuation">(</span>double dx<span class="token punctuation">,</span> double dy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>These methods are intended to be overwritten by the implementations of <code>InlineTextElement</code>, and probably will not be called directly by users; because a convenient <code>render</code> method is provided:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Vector2</span> position<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Anchor</span> anchor <span class="token operator">=</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>topLeft<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That allows the element to be rendered at a specific position, using a given anchor.</p><p>The interface also mandates (and provides) a getter for the <code>LineMetrics</code> object associated with that <code>InlineTextElement</code>, which allows you (and the <code>render</code> implementation) to access sizing information related to the element (width, height, ascend, etc).</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token class-name">LineMetrics</span> <span class="token keyword">get</span> metrics<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="text-elements-text-nodes-and-text-styles" tabindex="-1"><a class="header-anchor" href="#text-elements-text-nodes-and-text-styles"><span>Text Elements, Text Nodes, and Text Styles</span></a></h2><p>While normal renderers always work with a <code>InlineTextElement</code> directly, there is a bigger underlying infrastructure that can be used to render more rich or formatter text.</p><p>Text Elements are a superset of Inline Text Elements that represent an arbitrary rendering block within a rich-text document. Essentially, they are concrete and &quot;physical&quot;: they are objects that are ready to be rendered on a canvas.</p><p>This property distinguishes them from Text Nodes, which are structured pieces of text, and from Text Styles (called <code>FlameTextStyle</code> in code to make it easier to work alongside Flutter&#39;s <code>TextStyle</code>), which are descriptors for how arbitrary pieces of text ought to be rendered.</p><p>So, in the most general case, a user would use a <code>TextNode</code> to describe a desired piece of rich text; define a <code>FlameTextStyle</code> to apply to it; and use that to generate a <code>TextElement</code>. Depending on the type of rendering, the <code>TextElement</code> generated will be an <code>InlineTextElement</code>, which brings us back to the normal flow of the rendering pipeline. The unique property of the Inline-Text-type element is that it exposes a LineMetrics that can be used for advanced rendering; while the other elements only expose a simpler <code>draw</code> method which is unaware of sizing and positioning.</p><p>However, the other types of Text Elements, Text Nodes, and Text Styles must be used if the intent is to create an entire document (multiple blocks or paragraphs), enriched with formatted text. In order to render an arbitrary TextElement, you can alternatively use the <code>TextElementComponent</code> (see above).</p><p>See <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/rich_text_example.dart" target="_blank" rel="noopener noreferrer">examples of such usage</a>.</p><h3 id="text-nodes-and-the-document-root" tabindex="-1"><a class="header-anchor" href="#text-nodes-and-the-document-root"><span>Text Nodes and the Document Root</span></a></h3><p>A <code>DocumentRoot</code> is not a <code>TextNode</code> (inheritance-wise) in itself but represents a grouping of <code>BlockNodes</code> that layout a &quot;page&quot; or &quot;document&quot; of rich text laid out in multiple blocks or paragraphs. It represents the entire document and can receive a global Style.</p><p>The first step to define your rich-text document is to create a Node, which will likely be a <code>DocumentRoot</code>.</p><p>It will first contain the top-most list of Block Nodes that can define headers, paragraphs or columns.</p><p>Then each of those blocks can contain other blocks or the Inline Text Nodes, either Plain Text Nodes or some rich-text with specific formatting.</p><p>Note that the hierarchy defined by the node structure is also used for styling purposes as per defined in the <code>FlameTextStyle</code> class.</p><p>The actual nodes all inherit from <code>TextNode</code> and are broken down by the following diagram:</p><p><img src="`+o+'" alt=""></p><h3 id="flame-text-styles" tabindex="-1"><a class="header-anchor" href="#flame-text-styles"><span>(Flame) Text Styles</span></a></h3><p>Text Styles can be applied to nodes to generate elements. They all inherit from <code>FlameTextStyle</code> abstract class (which is named as is to avoid confusion with Flutter&#39;s <code>TextStyle</code>).</p><p>They follow a tree-like structure, always having <code>DocumentStyle</code> as the root; this structure is leveraged to apply cascading style to the analogous Node structure. In fact, they are pretty similar to, and can be thought of as, CSS definitions.</p><p>The full inheritance chain can be seen on the following diagram:</p><p><img src="'+p+'" alt=""></p><h3 id="text-elements" tabindex="-1"><a class="header-anchor" href="#text-elements"><span>Text Elements</span></a></h3><p>Finally, we have the elements, that represent a combination of a node (&quot;what&quot;) with a style (&quot;how&quot;), and therefore represent a pre-compiled, laid-out piece of rich text to be rendered on the Canvas.</p><p>Inline Text Elements specifically can alternatively be thought of as a combination of a <code>TextRenderer</code> (simplified &quot;how&quot;) and a string (single line of &quot;what&quot;).</p><p>That is because an <code>InlineTextStyle</code> can be converted to a specific <code>TextRenderer</code> via the <code>asTextRenderer</code> method, which is then used to lay out each line of text into a unique <code>InlineTextElement</code>.</p><p>When using the renderer directly, the entire layout process is skipped, and a single <code>TextPainterTextElement</code> or <code>SpriteFontTextElement</code> is returned.</p><p>As you can see, both definitions of an Element are, essentially, equivalent, all things considered. But it still leaves us with two paths for rendering text. Which one to pick? How to solve this conundrum?</p><p>When in doubt, the following guidelines can help you picking the best path for you:</p><ul><li>for the simplest way to render text, use <code>TextPaint</code> (basic renderer implementation) <ul><li>you can use the FCS provided component <code>TextComponent</code> for that.</li></ul></li><li>for rendering Sprite Fonts, you must use <code>SpriteFontRenderer</code> (a renderer implementation that accepts a <code>SpriteFont</code>);</li><li>for rendering multiple lines of text, with automatic line breaks, you have two options: <ul><li>use the FCS <code>TextBoxComponent</code>, which uses any text renderer to draw each line of text as an Element, and does its own layout and line breaking;</li><li>use the Text Node &amp; Style system to create your pre-laid-out Elements. Note: there is no current FCS component for it.</li></ul></li><li>finally, in order to have formatted (or rich) text, you must use Text Nodes &amp; Styles.</li></ul>',41))])}const f=l(k,[["render",h],["__file","text_rendering.html.vue"]]),g=JSON.parse('{"path":"/guide/flame/rendering/text_rendering.html","title":"Text Rendering","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Text Components","slug":"text-components","link":"#text-components","children":[{"level":3,"title":"TextComponent","slug":"textcomponent","link":"#textcomponent","children":[]},{"level":3,"title":"TextBoxComponent","slug":"textboxcomponent","link":"#textboxcomponent","children":[]},{"level":3,"title":"ScrollTextBoxComponent","slug":"scrolltextboxcomponent","link":"#scrolltextboxcomponent","children":[]},{"level":3,"title":"TextElementComponent","slug":"textelementcomponent","link":"#textelementcomponent","children":[]},{"level":3,"title":"Flame Markdown","slug":"flame-markdown","link":"#flame-markdown","children":[]}]},{"level":2,"title":"Infrastructure","slug":"infrastructure","link":"#infrastructure","children":[{"level":3,"title":"TextRenderer","slug":"textrenderer","link":"#textrenderer","children":[]}]},{"level":2,"title":"Inline Text Elements","slug":"inline-text-elements","link":"#inline-text-elements","children":[]},{"level":2,"title":"Text Elements, Text Nodes, and Text Styles","slug":"text-elements-text-nodes-and-text-styles","link":"#text-elements-text-nodes-and-text-styles","children":[{"level":3,"title":"Text Nodes and the Document Root","slug":"text-nodes-and-the-document-root","link":"#text-nodes-and-the-document-root","children":[]},{"level":3,"title":"(Flame) Text Styles","slug":"flame-text-styles","link":"#flame-text-styles","children":[]},{"level":3,"title":"Text Elements","slug":"text-elements","link":"#text-elements","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/rendering/text_rendering.md"}');export{f as comp,g as data};
