import{_ as p,c as i,a as s,d as t,e as o,b as a,f as c,r as l,o as u}from"./app-BZlJFCNj.js";const d={};function r(k,n){const e=l("RouteLink");return u(),i("div",null,[n[4]||(n[4]=s("h1",{id:"other-inputs-and-helpers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#other-inputs-and-helpers"},[s("span",null,"Other Inputs and Helpers")])],-1)),n[5]||(n[5]=s("p",null,"This includes documentation for input methods besides keyboard and mouse.",-1)),n[6]||(n[6]=s("p",null,"For other input documents, see also:",-1)),s("ul",null,[s("li",null,[t(e,{to:"/guide/flame/inputs/gesture_input.html"},{default:o(()=>n[0]||(n[0]=[a("Gesture Input")])),_:1}),n[1]||(n[1]=a(": for mouse and touch pointer gestures"))]),s("li",null,[t(e,{to:"/guide/flame/inputs/keyboard_input.html"},{default:o(()=>n[2]||(n[2]=[a("Keyboard Input")])),_:1}),n[3]||(n[3]=a(": for keystrokes"))])]),n[7]||(n[7]=c(`<h2 id="joystick" tabindex="-1"><a class="header-anchor" href="#joystick"><span>Joystick</span></a></h2><p>Flame provides a component capable of creating a virtual joystick for taking input for your game. To use this feature, you need to create a <code>JoystickComponent</code>, configure it the way you want, and add it to your game.</p><p>Check out the following example to get a better understanding:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;joystick.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> sheet <span class="token operator">=</span> <span class="token class-name">SpriteSheet</span><span class="token punctuation">.</span><span class="token function">fromColumnsAndRows</span><span class="token punctuation">(</span></span>
<span class="line">      image<span class="token punctuation">:</span> image<span class="token punctuation">,</span></span>
<span class="line">      columns<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span></span>
<span class="line">      rows<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> joystick <span class="token operator">=</span> <span class="token class-name">JoystickComponent</span><span class="token punctuation">(</span></span>
<span class="line">      knob<span class="token punctuation">:</span> <span class="token class-name">SpriteComponent</span><span class="token punctuation">(</span></span>
<span class="line">        sprite<span class="token punctuation">:</span> sheet<span class="token punctuation">.</span><span class="token function">getSpriteById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      background<span class="token punctuation">:</span> <span class="token class-name">SpriteComponent</span><span class="token punctuation">(</span></span>
<span class="line">        sprite<span class="token punctuation">:</span> sheet<span class="token punctuation">.</span><span class="token function">getSpriteById</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">final</span> player <span class="token operator">=</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>joystick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>joystick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">SpriteComponent</span> <span class="token keyword">with</span> <span class="token class-name">HasGameRef</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>joystick<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span></span>
<span class="line">        anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span></span>
<span class="line">        size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/// Pixels/s</span></span>
<span class="line">  double maxSpeed <span class="token operator">=</span> <span class="token number">300.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">JoystickComponent</span> joystick<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    sprite <span class="token operator">=</span> <span class="token keyword">await</span> gameRef<span class="token punctuation">.</span><span class="token function">loadSprite</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;layers/player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    position <span class="token operator">=</span> gameRef<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>joystick<span class="token punctuation">.</span>direction <span class="token operator">!=</span> <span class="token class-name">JoystickDirection</span><span class="token punctuation">.</span>idle<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      position<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>joystick<span class="token punctuation">.</span>relativeDelta  <span class="token operator">*</span> maxSpeed <span class="token operator">*</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      angle <span class="token operator">=</span> joystick<span class="token punctuation">.</span>delta<span class="token punctuation">.</span><span class="token function">screenAngle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we created the classes <code>MyGame</code> and <code>Player</code>. <code>MyGame</code> creates a joystick which is passed to the <code>Player</code> when the latter is created. In the <code>Player</code> class we act upon the current state of the joystick.</p><p>The joystick has a few fields that change depending on what state it is in.</p><p>Following fields should be used to know the state of the joystick:</p><ul><li><code>intensity</code>: The percentage [0.0, 1.0] that the knob is dragged from the epicenter to the edge of the joystick (or <code>knobRadius</code> if that is set).</li><li><code>delta</code>: The absolute amount (defined as a <code>Vector2</code>) that the knob is dragged from its epicenter.</li><li><code>relativeDelta</code>: The percentage, presented as a <code>Vector2</code>, and direction that the knob is currently pulled from its base position to a edge of the joystick.</li></ul><p>If you want to create buttons to go with your joystick, check out <a href="#hudbuttoncomponent"><code>HudButtonComponent</code></a>.</p><p>For the complete code on implementing the joystick, check out the <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/input/joystick_example.dart" target="_blank" rel="noopener noreferrer">Joystick Example</a>. You can also view the <a href="https://examples.flame-engine.org/#/Input_Joystick" target="_blank" rel="noopener noreferrer">JoystickComponent in action</a> to see a live example of the joystick input function integrated into a game.</p><p>For an additional challenge, explore the <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/input/joystick_advanced_example.dart" target="_blank" rel="noopener noreferrer">Advanced Joystick Example</a>. See what else the advanced features can do in the <a href="https://examples.flame-engine.org/#/Input_Joystick_Advanced" target="_blank" rel="noopener noreferrer">live demo</a>.</p><h2 id="hudbuttoncomponent" tabindex="-1"><a class="header-anchor" href="#hudbuttoncomponent"><span>HudButtonComponent</span></a></h2><p>A <code>HudButtonComponent</code> is a button that can be defined with margins to the edge of the <code>Viewport</code> instead of with a position. It takes two <code>PositionComponent</code>s. <code>button</code> and <code>buttonDown</code>, the first is used for when the button is idle and the second is shown when the button is being pressed. The second one is optional if you don&#39;t want to change the look of the button when it is pressed, or if you handle this through the <code>button</code> component.</p><p>As the name suggests this button is a hud by default, which means that it will be static on your screen even if the camera for the game moves around. You can also use this component as a non-hud by setting <code>hudButtonComponent.respectCamera = true;</code>.</p><p>If you want to act upon the button being pressed (which would be the common thing to do) and released, you can either pass in callback functions as the <code>onPressed</code> and <code>onReleased</code> arguments, or you can extend the component and override <code>onTapDown</code>, <code>onTapUp</code> and/or <code>onTapCancel</code> and implement your logic there.</p><h2 id="spritebuttoncomponent" tabindex="-1"><a class="header-anchor" href="#spritebuttoncomponent"><span>SpriteButtonComponent</span></a></h2><p>A <code>SpriteButtonComponent</code> is a button that is defined by two <code>Sprite</code>s, one that represents when the button is pressed and one that represents when the button is released.</p><h2 id="buttoncomponent" tabindex="-1"><a class="header-anchor" href="#buttoncomponent"><span>ButtonComponent</span></a></h2><p>A <code>ButtonComponent</code> is a button that is defined by two <code>PositionComponent</code>s, one that represents when the button is pressed and one that represents when the button is released. If you only want to use sprites for the button, use the <a href="#spritebuttoncomponent"></a> instead, but this component can be good to use if you for example want to have a <code>SpriteAnimationComponent</code> as a button, or anything else which isn&#39;t a pure sprite.</p><h2 id="gamepad" tabindex="-1"><a class="header-anchor" href="#gamepad"><span>Gamepad</span></a></h2><p>Flame has a dedicated plugin to support external game controllers (gamepads). Find more information in the <a href="https://github.com/flame-engine/gamepad" target="_blank" rel="noopener noreferrer">Gamepads repository</a>.</p><h2 id="advancedbuttoncomponent" tabindex="-1"><a class="header-anchor" href="#advancedbuttoncomponent"><span>AdvancedButtonComponent</span></a></h2><p>The <code>AdvancedButtonComponent</code> have separate states for each of the different pointer phases. The skin can be customized for each state and each skin is represented by a <code>PositionComponent</code>.</p><p>These are the fields that can be used to customize the looks of the <code>AdvancedButtonComponent</code>:</p><ul><li><code>defaultSkin</code>: Component that will be displayed by default on the button.</li><li><code>downSkin</code>: Component displayed when the button is clicked or tapped.</li><li><code>hoverSkin</code>: Component displayed when the button is hovered. (desktop and web).</li><li><code>defaultLabel</code>: Component shown on top of skins. Automatically aligned to center.</li><li><code>disabledSkin</code>: Component displayed when button is disabled.</li><li><code>disabledLabel</code>: Component shown on top of skins when button is disabled.</li></ul><h2 id="togglebuttoncomponent" tabindex="-1"><a class="header-anchor" href="#togglebuttoncomponent"><span>ToggleButtonComponent</span></a></h2><p>The [ToggleButtonComponent] is an [AdvancedButtonComponent] that can switch between selected and not selected.</p><p>In addition to the already existing skins, the [ToggleButtonComponent] contains the following skins:</p><ul><li><code>defaultSelectedSkin</code>: The component to display when the button is selected.</li><li><code>downAndSelectedSkin</code>: The component that is displayed when the selectable button is selected and pressed.</li><li><code>hoverAndSelectedSkin</code>: Hover on selectable and selected button (desktop and web).</li><li><code>disabledAndSelectedSkin</code>: For when the button is selected and in the disabled state.</li><li><code>defaultSelectedLabel</code>: Component shown on top of the skins when button is selected.</li></ul><h2 id="ignoreevents-mixin" tabindex="-1"><a class="header-anchor" href="#ignoreevents-mixin"><span>IgnoreEvents mixin</span></a></h2><p>If you don&#39;t want a component subtree to receive events, you can use the <code>IgnoreEvents</code> mixin. Once you have added this mixin you can turn off events to reach a component and its descendants by setting <code>ignoreEvents = true</code> (default when the mixin is added), and then set it to <code>false</code> when you want to receive events again.</p><p>This can be done for optimization purposes, since all events currently go through the whole component tree.</p>`,32))])}const h=p(d,[["render",r],["__file","other_inputs.html.vue"]]),b=JSON.parse('{"path":"/guide/flame/inputs/other_inputs.html","title":"Other Inputs and Helpers","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Joystick","slug":"joystick","link":"#joystick","children":[]},{"level":2,"title":"HudButtonComponent","slug":"hudbuttoncomponent","link":"#hudbuttoncomponent","children":[]},{"level":2,"title":"SpriteButtonComponent","slug":"spritebuttoncomponent","link":"#spritebuttoncomponent","children":[]},{"level":2,"title":"ButtonComponent","slug":"buttoncomponent","link":"#buttoncomponent","children":[]},{"level":2,"title":"Gamepad","slug":"gamepad","link":"#gamepad","children":[]},{"level":2,"title":"AdvancedButtonComponent","slug":"advancedbuttoncomponent","link":"#advancedbuttoncomponent","children":[]},{"level":2,"title":"ToggleButtonComponent","slug":"togglebuttoncomponent","link":"#togglebuttoncomponent","children":[]},{"level":2,"title":"IgnoreEvents mixin","slug":"ignoreevents-mixin","link":"#ignoreevents-mixin","children":[]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/inputs/other_inputs.md"}');export{h as comp,b as data};
