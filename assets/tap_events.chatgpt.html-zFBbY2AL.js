import{_ as a,c as s,f as e,o as p}from"./app-BZlJFCNj.js";const o={};function c(l,n){return p(),s("div",null,n[0]||(n[0]=[e(`<h1 id="点击事件-tap-events" tabindex="-1"><a class="header-anchor" href="#点击事件-tap-events"><span>点击事件 (Tap Events)</span></a></h1><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">本文档描述了新的事件 API。旧的（传统）方法仍然受支持，可参考 [](gesture_input.md)。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>点击事件</strong> 是与 Flame 游戏交互的最基本方式之一。这些事件在用户用手指触碰屏幕、用鼠标点击或使用触控笔点按时触发。<br> 点击可以是“长按”，但在手势过程中手指不能移动。因此，触碰屏幕后移动手指再松开并不算点击，而是拖拽。同样，鼠标移动时点击也会被注册为拖拽。</p><p>多个点击事件可以同时发生，尤其是在用户使用多指操作的情况下。Flame 会正确处理这些情况，您甚至可以通过事件的 <code>pointerId</code> 属性来跟踪它们。</p><p>要使组件对点击事件作出响应，可以添加 <code>TapCallbacks</code> 混入。</p><ul><li>此混入会为组件添加四个可覆盖的方法：<code>onTapDown</code>、<code>onTapUp</code>、<code>onTapCancel</code> 和 <code>onLongTapDown</code>。默认情况下，这些方法什么都不做，需要覆盖它们以实现功能。</li><li>此外，组件必须实现 <code>containsLocalPoint()</code> 方法（<code>PositionComponent</code> 已实现此方法，因此大多数情况下无需额外操作）-- 此方法允许 Flame 判断事件是否发生在组件内。</li></ul><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">TapCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onTapUp</span><span class="token punctuation">(</span><span class="token class-name">TapUpEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 响应点击事件</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="点击事件解析" tabindex="-1"><a class="header-anchor" href="#点击事件解析"><span>点击事件解析</span></a></h2><h3 id="ontapdown" tabindex="-1"><a class="header-anchor" href="#ontapdown"><span>onTapDown</span></a></h3><p>每个点击以“按下”事件开始，您可以通过 <code>void onTapDown(TapDownEvent)</code> 处理器接收该事件。<br> 事件将传递到触碰点第一个带有 <code>TapCallbacks</code> 混入的组件。通常，事件会停止传播。但您可以通过将 <code>event.continuePropagation</code> 设置为 true 强制将事件传递给底层组件。</p><p><code>TapDownEvent</code> 对象包含事件的相关信息。例如，<code>event.localPosition</code> 包含事件在当前组件本地坐标系统中的坐标，而 <code>event.canvasPosition</code> 是游戏画布坐标系统中的位置。</p><p>所有收到 <code>onTapDown</code> 事件的组件最终会收到同一 <code>pointerId</code> 的 <code>onTapUp</code> 或 <code>onTapCancel</code>。</p><h3 id="onlongtapdown" tabindex="-1"><a class="header-anchor" href="#onlongtapdown"><span>onLongTapDown</span></a></h3><p>如果用户长时间按住屏幕（时间由 <code>MultiTapDispatcher</code> 的 <code>.longTapDelay</code> 属性配置），将触发“长按”事件。<br> 此事件调用 <code>void onLongTapDown(TapDownEvent)</code> 处理器，针对先前接收到 <code>onTapDown</code> 事件的组件。</p><p>默认情况下，<code>.longTapDelay</code> 设置为 300 毫秒，可以通过设置 <code>TapConfig.longTapDelay</code> 更改此值，以满足特定的无障碍需求。</p><h3 id="ontapup" tabindex="-1"><a class="header-anchor" href="#ontapup"><span>onTapUp</span></a></h3><p>此事件表示点击序列成功完成。它只会传递给先前收到相同 <code>pointerId</code> 的 <code>onTapDown</code> 事件的组件。</p><p><code>TapUpEvent</code> 对象包含有关事件的信息，包括事件的坐标（即用户松开手指前触碰屏幕的位置）和事件的 <code>pointerId</code>。</p><p>请注意，点击抬起事件的设备坐标与相应的点击按下事件的设备坐标相同（或非常接近）。但本地坐标可能不同，特别是当组件在点击过程中移动时。本地坐标可能会有明显差异。</p><p>在极端情况下，当组件从触碰点移动走时，不会生成 <code>onTapUp</code> 事件，而是生成 <code>onTapCancel</code>。需要注意的是，在这种情况下，<code>onTapCancel</code> 是在用户松开或移动手指时生成的，而不是在组件离开触碰点时生成的。</p><h3 id="ontapcancel" tabindex="-1"><a class="header-anchor" href="#ontapcancel"><span>onTapCancel</span></a></h3><p>当点击失败时触发此事件。最常见的情况是用户移动了手指，将手势从“点击”转换为“拖拽”。<br> 也可能发生在被点击的组件移动到用户手指之外，或者其他组件覆盖了游戏组件，甚至设备关闭等情况。</p><p><code>TapCancelEvent</code> 对象仅包含之前 <code>TapDownEvent</code> 的 <code>pointerId</code>，不包含位置数据。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>通过以下示例了解点击事件的实际效果。</p><p>中间蓝色矩形是包含 <code>TapCallbacks</code> 混入的组件。在该组件上点击会在触碰点生成圆圈。<br> 具体来说，<code>onTapDown</code> 事件开始绘制圆圈。圆圈的线条粗细与点击持续时间成比例；在 <code>onTapUp</code> 后，线条粗细不再增长。当触发 <code>onLongTapDown</code> 时，会出现一道细白线。最后，移动手指触发 <code>onTapCancel</code> 时，圆圈会收缩并消失。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">:sources: ../flame/examples</span>
<span class="line">:page: tap_events</span>
<span class="line">:show: widget code</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="混入-mixins" tabindex="-1"><a class="header-anchor" href="#混入-mixins"><span>混入 (Mixins)</span></a></h2><p>以下部分更详细地描述了处理点击事件所需的几个混入。</p><h3 id="tapcallbacks" tabindex="-1"><a class="header-anchor" href="#tapcallbacks"><span>TapCallbacks</span></a></h3><p><code>TapCallbacks</code> 混入可添加到任何 <code>Component</code> 上，使该组件可以接收点击事件。</p><p>此混入为组件添加了 <code>onTapDown</code>、<code>onLongTapDown</code>、<code>onTapUp</code> 和 <code>onTapCancel</code> 方法，这些方法默认不执行任何操作，但可以覆盖它们以实现实际功能。<br> 无需覆盖所有方法。例如，您可以只覆盖 <code>onTapUp</code> 来响应“真实”点击。</p><p>关键点是，组件只能接收发生在组件范围内的点击事件，这由 <code>containsLocalPoint()</code> 函数决定。常用的 <code>PositionComponent</code> 类通过其 <code>size</code> 属性提供了一个基于大小的实现。因此，如果您的组件继承自 <code>PositionComponent</code>，请确保正确设置其大小。如果您的组件继承自基本的 <code>Component</code>，则必须手动实现 <code>containsLocalPoint()</code> 方法。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token keyword">with</span> <span class="token class-name">TapCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> _rect <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Rect</span><span class="token punctuation">.</span><span class="token function">fromLTWH</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> _paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  bool _isPressed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  bool <span class="token function">containsLocalPoint</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> point<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _rect<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">toOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onTapDown</span><span class="token punctuation">(</span><span class="token class-name">TapDownEvent</span> event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _isPressed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onTapUp</span><span class="token punctuation">(</span><span class="token class-name">TapUpEvent</span> event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _isPressed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onTapCancel</span><span class="token punctuation">(</span><span class="token class-name">TapCancelEvent</span> event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _isPressed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _paint<span class="token punctuation">.</span>color <span class="token operator">=</span> _isPressed <span class="token operator">?</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red <span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">;</span></span>
<span class="line">    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>_rect<span class="token punctuation">,</span> _paint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="doubletapcallbacks" tabindex="-1"><a class="header-anchor" href="#doubletapcallbacks"><span>DoubleTapCallbacks</span></a></h3><p>Flame 还提供了 <code>DoubleTapCallbacks</code> 混入，用于接收双击事件。<br> 要在组件中接收双击事件，请将 <code>DoubleTapCallbacks</code> 混入到您的 <code>PositionComponent</code> 中。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">DoubleTapCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onDoubleTapUp</span><span class="token punctuation">(</span><span class="token class-name">DoubleTapEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 执行双击后的操作</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onDoubleTapCancel</span><span class="token punctuation">(</span><span class="token class-name">DoubleTapCancelEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 双击取消时执行操作</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onDoubleTapDown</span><span class="token punctuation">(</span><span class="token class-name">DoubleTapDownEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 双击开始时执行操作</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="迁移" tabindex="-1"><a class="header-anchor" href="#迁移"><span>迁移</span></a></h2><p>如果您的现有游戏使用了 <code>Tappable</code>/<code>Draggable</code> 混入，则可以按以下步骤过渡到本文档描述的新 API：</p><ul><li>将所有使用这些混入的组件替换为 <code>TapCallbacks</code>/<code>DragCallbacks</code>。</li><li>需要调整以下方法以适配新 API： <ul><li>形参 <code>(int pointerId, TapDownDetails details)</code> 替换为单一事件对象 <code>TapDownEvent event</code>。</li><li>不再有返回值。如果需要使组件透传点击到下层组件，请在 <code>onTapDown</code> 事件中将 <code>event.continuePropagation</code> 设置为 true。其他事件会自动透传。</li><li>如果组件需要知道触碰点的坐标，请使用 <code>event.localPosition</code>，而非手动计算。此外，<code>event.canvasPosition</code> 和 <code>event.devicePosition</code> 属性也可用。</li><li>如果组件附属于自定义父组件，请确保父组件也正确实现了 <code>containsLocalPoint()</code>。</li></ul></li></ul>`,41)]))}const i=a(o,[["render",c],["__file","tap_events.chatgpt.html.vue"]]),d=JSON.parse('{"path":"/guide/flame/inputs/tap_events.chatgpt.html","title":"点击事件 (Tap Events)","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"点击事件解析","slug":"点击事件解析","link":"#点击事件解析","children":[{"level":3,"title":"onTapDown","slug":"ontapdown","link":"#ontapdown","children":[]},{"level":3,"title":"onLongTapDown","slug":"onlongtapdown","link":"#onlongtapdown","children":[]},{"level":3,"title":"onTapUp","slug":"ontapup","link":"#ontapup","children":[]},{"level":3,"title":"onTapCancel","slug":"ontapcancel","link":"#ontapcancel","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"混入 (Mixins)","slug":"混入-mixins","link":"#混入-mixins","children":[{"level":3,"title":"TapCallbacks","slug":"tapcallbacks","link":"#tapcallbacks","children":[]},{"level":3,"title":"DoubleTapCallbacks","slug":"doubletapcallbacks","link":"#doubletapcallbacks","children":[]}]},{"level":2,"title":"迁移","slug":"迁移","link":"#迁移","children":[]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/inputs/tap_events.chatgpt.md"}');export{i as comp,d as data};
