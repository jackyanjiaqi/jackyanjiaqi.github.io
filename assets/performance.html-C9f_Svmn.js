import{_ as s,c as a,f as e,o as t}from"./app-BZlJFCNj.js";const i={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="performance" tabindex="-1"><a class="header-anchor" href="#performance"><span>Performance</span></a></h1><p>Just like any other game engine, Flame tries to be as efficient as possible without making the API too complex. But given its general purpose nature, Flame cannot make any assumption about the type of game being made. This means game developers will always have some room for performance optimizations based on how their game functions.</p><p>On the other hand, depending on the underlying hardware, there will always be some hard limit on what can be achieved with Flame. But apart from the hardware limits, there are some common pitfalls that Flame users can run into, which can be easily avoided by following some simple steps. This section tries to cover some optimization tricks and ways to avoid the common performance pitfalls.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Disclaimer: Each Flame project is very different from the others. As a result, solution</span>
<span class="line">described here cannot guarantee to always produce a significant improvement in performance.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-creation-per-frame" tabindex="-1"><a class="header-anchor" href="#object-creation-per-frame"><span>Object creation per frame</span></a></h2><p>Creating objects of a class is very common in any kind of project/game. But object creation is a somewhat involved operation. Depending on the frequency and amount of objects that are being created, the application can experience some slow down.</p><p>In games, this is something to be very careful of because games generally have a game loop that updates as fast as possible, where each update is called a frame. Depending on the hardware, a game can be updating 30, 60, 120 or even higher frames per second. This means if a new object is created in a frame, the game will end up creating as many number of objects as the frame count per second.</p><p>Flame users, generally tend to run into this problem when they override the <code>update</code> and <code>render</code> method of a <code>Component</code>. For example, in the following innocent looking code, a new <code>Vector2</code> and a new <code>Paint</code> object is spawned every frame. But the data inside the objects is essentially the same across all frames. Now imagine if there are 100 instances of <code>MyComponent</code> in a game running at 60 FPS. That would essentially mean 6000 (100 * 60) new instances of <code>Vector2</code> and <code>Paint</code> each will be created every second.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">It is like buying a new computer every time you want to send an email or buying</span>
<span class="line">a new pen every time you want to write something. Sure it gets the job done, but</span>
<span class="line">it is not very economically smart.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    position <span class="token operator">+=</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> dt<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">toRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A better way of doing things would be something like as shown below. This code stores the required <code>Vector2</code> and <code>Paint</code> objects as class members and reuses them across all the update and render calls.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> _direction <span class="token operator">=</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> _paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    position<span class="token punctuation">.</span><span class="token function">setValues</span><span class="token punctuation">(</span></span>
<span class="line">      position<span class="token punctuation">.</span>x <span class="token operator">+</span> _direction<span class="token punctuation">.</span>x <span class="token operator">*</span> dt<span class="token punctuation">,</span> </span>
<span class="line">      position<span class="token punctuation">.</span>y <span class="token operator">+</span> _direction<span class="token punctuation">.</span>y <span class="token operator">*</span> dt<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">toRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">To summarize, avoid creating unnecessary objects in every frame. Even a seemingly</span>
<span class="line">small object can affect the performance if spawned in high volume.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unwanted-collision-checks" tabindex="-1"><a class="header-anchor" href="#unwanted-collision-checks"><span>Unwanted collision checks</span></a></h2><p>Flame has a built-in collision detection system which can detect when any two <code>Hitbox</code>es intersect with each other. In an ideal case, this system run on every frame and checks for collision. It is also smart enough to filter out only the possible collisions before performing th actually intersection checks.</p><p>Despite this, it is safe to assume that the cost of collision detection will increase as the number of hitboxes increases. But in many games, the developers are not always interested in detecting collision between every possible pair. For example, consider a simple game where players can fire a <code>Bullet</code> component that has a hitbox. In such a game it is likely that the developers are not interested in detecting collision between any two bullets, but Flame will still perform those collision checks.</p><p>To avoid this, you can set the <code>collisionType</code> for bullet component to <code>CollisionType.passive</code>. Doing so will cause Flame to completely skip any kind of collision check between all the passive hitboxes.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">This does not mean bullet component in all games must always have a passive hitbox.</span>
<span class="line">It is up to the developers to decide which hitboxes can be made passive based on</span>
<span class="line">the rules of the game. For example, the Rogue Shooter game in Flame&#39;s examples uses</span>
<span class="line">passive hitbox for enemies instead of the bullets. </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const p=s(i,[["render",o],["__file","performance.html.vue"]]),r=JSON.parse('{"path":"/guide/flame/other/performance.html","title":"Performance","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Object creation per frame","slug":"object-creation-per-frame","link":"#object-creation-per-frame","children":[]},{"level":2,"title":"Unwanted collision checks","slug":"unwanted-collision-checks","link":"#unwanted-collision-checks","children":[]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/other/performance.md"}');export{p as comp,r as data};
