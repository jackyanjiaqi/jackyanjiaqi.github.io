import{_ as o,a as l}from"./lowlevel-OSTE4exW.js";import{_ as i,c,f as e,a as s,b as a,d as p,e as d,r,o as u}from"./app-B8TszOv9.js";const m={};function h(k,n){const t=r("RouteLink");return u(),c("div",null,[n[4]||(n[4]=e(`<h1 id="flamegame" tabindex="-1"><a class="header-anchor" href="#flamegame"><span>FlameGame</span></a></h1><p>The <code>FlameGame</code> class implements a <code>Component</code> based <code>Game</code>. It has a tree of components and calls the <code>update</code> and <code>render</code> methods of all components that have been added to the game.</p><p>We refer to this component-based system as the Flame Component System (FCS). Throughout the documentation, FCS is used to reference this system.</p><p>Components can be added to the <code>FlameGame</code> directly in the constructor with the named <code>children</code> argument, or from anywhere else with the <code>add</code>/<code>addAll</code> methods. Most of the time however, you want to add your children to a <code>World</code>, the default world exist under <code>FlameGame.world</code> and you add components to it just like you would to any other component.</p><p>A simple <code>FlameGame</code> implementation that adds two components, one in <code>onLoad</code> and one directly in the constructor can look like this:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/components.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/game.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/widgets.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// A component that renders the crate sprite, with a 16 x 16 size.</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyCrate</span> <span class="token keyword">extends</span> <span class="token class-name">SpriteComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyCrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    sprite <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Sprite</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;crate.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyWorld</span> <span class="token keyword">extends</span> <span class="token class-name">World</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">MyCrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> myGame <span class="token operator">=</span> <span class="token class-name">FlameGame</span><span class="token punctuation">(</span>world<span class="token punctuation">:</span> <span class="token class-name">MyWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">runApp</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">GameWidget</span><span class="token punctuation">(</span>game<span class="token punctuation">:</span> myGame<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">If you instantiate your game in a build method your game will be rebuilt every</span>
<span class="line">time the Flutter tree gets rebuilt, which usually is more often than you&#39;d like.</span>
<span class="line">To avoid this, you can either create an instance of your game first and</span>
<span class="line">reference it within your widget structure or use the \`GameWidget.controlled\`</span>
<span class="line">constructor.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To remove components from the list on a <code>FlameGame</code> the <code>remove</code> or <code>removeAll</code> methods can be used. The first can be used if you just want to remove one component, and the second can be used when you want to remove a list of components. These methods exist on all <code>Component</code>s, including the world.</p><h2 id="game-loop" tabindex="-1"><a class="header-anchor" href="#game-loop"><span>Game Loop</span></a></h2><p>The <code>GameLoop</code> module is a simple abstraction of the game loop concept. Basically, most games are built upon two methods:</p><ul><li>The render method takes the canvas for drawing the current state of the game.</li><li>The update method receives the delta time in microseconds since the last update and allows you to move to the next state.</li></ul><p>The <code>GameLoop</code> is used by all of Flame&#39;s <code>Game</code> implementations.</p><h2 id="resizing" tabindex="-1"><a class="header-anchor" href="#resizing"><span>Resizing</span></a></h2><p>Every time the game needs to be resized, for example when the orientation is changed, <code>FlameGame</code> will call all of the <code>Component</code>s <code>onGameResize</code> methods and it will also pass this information to the camera and viewport.</p><p>The <code>FlameGame.camera</code> controls which point in the coordinate space that should be at the anchor of your viewfinder, [0,0] is in the center (<code>Anchor.center</code>) of the viewport by default.</p><h2 id="lifecycle" tabindex="-1"><a class="header-anchor" href="#lifecycle"><span>Lifecycle</span></a></h2><p>The <code>FlameGame</code> lifecycle callbacks, <code>onLoad</code>, <code>render</code>, etc. are called in the following sequence:</p><p><img src="`+o+`" alt="a"></p><p>When a <code>FlameGame</code> is first added to a <code>GameWidget</code> the lifecycle methods <code>onGameResize</code>, <code>onLoad</code> and <code>onMount</code> will be called in that order. Then <code>update</code> and <code>render</code> are called in sequence for every game tick. If the <code>FlameGame</code> is removed from the <code>GameWidget</code> then <code>onRemove</code> is called. If the <code>FlameGame</code> is added to a new <code>GameWidget</code> the sequence repeats from <code>onGameResize</code>.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">The order of \`onGameResize\`and \`onLoad\` are reversed from that of other</span>
<span class="line">\`Component\`s. This is to allow game element sizes to be calculated before</span>
<span class="line">resources are loaded or generated.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>onRemove</code> callback can be used to clean up children and cached data:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Optional based on your game needs.</span></span>
<span class="line">    <span class="token function">removeAll</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">processLifecycleEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Flame</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Flame</span><span class="token punctuation">.</span>assets<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Any other code that you want to run when the game is removed.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Clean-up of children and resources in a \`FlameGame\` is not done automatically</span>
<span class="line">and must be explicitly added to the \`onRemove\` call.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debug-mode" tabindex="-1"><a class="header-anchor" href="#debug-mode"><span>Debug mode</span></a></h2><p>Flame&#39;s <code>FlameGame</code> class provides a variable called <code>debugMode</code>, which by default is <code>false</code>. It can, however, be set to <code>true</code> to enable debug features for the components of the game. <strong>Be aware</strong> that the value of this variable is passed through to its components when they are added to the game, so if you change the <code>debugMode</code> at runtime, it will not affect already added components by default.</p>`,25)),s("p",null,[n[1]||(n[1]=a("To read more about the ")),n[2]||(n[2]=s("code",null,"debugMode",-1)),n[3]||(n[3]=a(" on Flame, please refer to the ")),p(t,{to:"/guide/flame/other/debug.html"},{default:d(()=>n[0]||(n[0]=[a("Debug Docs")])),_:1})]),n[5]||(n[5]=e(`<h2 id="change-background-color" tabindex="-1"><a class="header-anchor" href="#change-background-color"><span>Change background color</span></a></h2><p>To change the background color of your <code>FlameGame</code> you have to override <code>backgroundColor()</code>.</p><p>In the following example, the background color is set to be fully transparent, so that you can see the widgets that are behind the <code>GameWidget</code>. The default is opaque black.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Color</span> <span class="token function">backgroundColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0x00000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the background color can&#39;t change dynamically while the game is running, but you could just draw a background that covers the whole canvas if you would want it to change dynamically.</p><h2 id="singlegameinstance-mixin" tabindex="-1"><a class="header-anchor" href="#singlegameinstance-mixin"><span>SingleGameInstance mixin</span></a></h2><p>An optional mixin <code>SingleGameInstance</code> can be applied to your game if you are making a single-game application. This is a common scenario when building games: there is a single full-screen <code>GameWidget</code> that hosts a single <code>Game</code> instance.</p><p>Adding this mixin provides performance advantages in certain scenarios. In particular, a component&#39;s <code>onLoad</code> method is guaranteed to start when that component is added to its parent, even if the parent is not yet mounted itself. Consequently, <code>await</code>-ing on <code>parent.add(component)</code> is guaranteed to always finish loading the component.</p><p>Using this mixin is simple:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token keyword">with</span> <span class="token class-name">SingleGameInstance</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="low-level-game-api" tabindex="-1"><a class="header-anchor" href="#low-level-game-api"><span>Low-level Game API</span></a></h2><p><img src="`+l+`" alt="1"></p><p>The abstract <code>Game</code> class is a low-level API that can be used when you want to implement the functionality of how the game engine should be structured. <code>Game</code> does not implement any <code>update</code> or <code>render</code> function for example.</p><p>The class also has the lifecycle methods <code>onLoad</code>, <code>onMount</code> and <code>onRemove</code> in it, which are called from the <code>GameWidget</code> (or another parent) when the game is loaded + mounted, or removed. <code>onLoad</code> is only called the first time the class is added to a parent, but <code>onMount</code> (which is called after <code>onLoad</code>) is called every time it is added to a new parent. <code>onRemove</code> is called when the class is removed from a parent.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">The \`Game\` class allows for more freedom of how to implement things, but you</span>
<span class="line">are also missing out on all of the built-in features in Flame if you use it.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>An example of how a <code>Game</code> implementation could look like is:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGameSubClass</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> myGame <span class="token operator">=</span> <span class="token class-name">MyGameSubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">runApp</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">GameWidget</span><span class="token punctuation">(</span></span>
<span class="line">      game<span class="token punctuation">:</span> myGame<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pause-resuming-stepping-game-execution" tabindex="-1"><a class="header-anchor" href="#pause-resuming-stepping-game-execution"><span>Pause/Resuming/Stepping game execution</span></a></h2><p>A Flame <code>Game</code> can be paused and resumed in two ways:</p><ul><li>With the use of the <code>pauseEngine</code> and <code>resumeEngine</code> methods.</li><li>By changing the <code>paused</code> attribute.</li></ul><p>When pausing a <code>Game</code>, the <code>GameLoop</code> is effectively paused, meaning that no updates or new renders will happen until it is resumed.</p><p>While the game is paused, it is possible to advanced it frame by frame using the <code>stepEngine</code> method. It might not be much useful in the final game, but can be very helpful in inspecting game state step by step during the development cycle.</p><h3 id="backgrounding" tabindex="-1"><a class="header-anchor" href="#backgrounding"><span>Backgrounding</span></a></h3><p>The game will be automatically paused when the app is sent to the background, and resumed when it comes back to the foreground. This behavior can be disabled by setting <code>pauseWhenBackgrounded</code> to <code>false</code>.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    pauseWhenBackgrounded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On the current Flutter stable (3.13), this flag is effectively ignored on non-mobile platforms including the web.</p><h2 id="hasperformancetracker-mixin" tabindex="-1"><a class="header-anchor" href="#hasperformancetracker-mixin"><span>HasPerformanceTracker mixin</span></a></h2><p>While optimizing a game, it can be useful to track the time it took for the game to update and render each frame. This data can help in detecting areas of the code that are running hot. It can also help in detecting visual areas of the game that are taking the most time to render.</p><p>To get the update and render times, just add the <code>HasPerformanceTracker</code> mixin to the game class.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token keyword">with</span> <span class="token class-name">HasPerformanceTracker</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// access \`updateTime\` and \`renderTime\` getters.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30))])}const b=i(m,[["render",h],["__file","game.html.vue"]]),f=JSON.parse('{"path":"/guide/flame/game.html","title":"FlameGame","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Game Loop","slug":"game-loop","link":"#game-loop","children":[]},{"level":2,"title":"Resizing","slug":"resizing","link":"#resizing","children":[]},{"level":2,"title":"Lifecycle","slug":"lifecycle","link":"#lifecycle","children":[]},{"level":2,"title":"Debug mode","slug":"debug-mode","link":"#debug-mode","children":[]},{"level":2,"title":"Change background color","slug":"change-background-color","link":"#change-background-color","children":[]},{"level":2,"title":"SingleGameInstance mixin","slug":"singlegameinstance-mixin","link":"#singlegameinstance-mixin","children":[]},{"level":2,"title":"Low-level Game API","slug":"low-level-game-api","link":"#low-level-game-api","children":[]},{"level":2,"title":"Pause/Resuming/Stepping game execution","slug":"pause-resuming-stepping-game-execution","link":"#pause-resuming-stepping-game-execution","children":[{"level":3,"title":"Backgrounding","slug":"backgrounding","link":"#backgrounding","children":[]}]},{"level":2,"title":"HasPerformanceTracker mixin","slug":"hasperformancetracker-mixin","link":"#hasperformancetracker-mixin","children":[]}],"git":{"updatedTime":1735588798000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/game.md"}');export{b as comp,f as data};
