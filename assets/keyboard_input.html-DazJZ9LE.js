import{_ as p,c as l,a as s,d as t,e as o,b as a,f as c,r as i,o as u}from"./app-BZlJFCNj.js";const r={};function d(k,n){const e=i("RouteLink");return u(),l("div",null,[n[4]||(n[4]=s("h1",{id:"keyboard-input",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#keyboard-input"},[s("span",null,"Keyboard Input")])],-1)),n[5]||(n[5]=s("p",null,"This includes documentation for keyboard inputs.",-1)),n[6]||(n[6]=s("p",null,"For other input documents, see also:",-1)),s("ul",null,[s("li",null,[t(e,{to:"/guide/flame/inputs/gesture_input.html"},{default:o(()=>n[0]||(n[0]=[a("Gesture Input")])),_:1}),n[1]||(n[1]=a(": for mouse and touch pointer gestures"))]),s("li",null,[t(e,{to:"/guide/flame/inputs/other_inputs.html"},{default:o(()=>n[2]||(n[2]=[a("Other Inputs")])),_:1}),n[3]||(n[3]=a(": For joysticks, game pads, etc."))])]),n[7]||(n[7]=c(`<h2 id="intro" tabindex="-1"><a class="header-anchor" href="#intro"><span>Intro</span></a></h2><p>The keyboard API on flame relies on the <a href="https://api.flutter.dev/flutter/widgets/Focus-class.html" target="_blank" rel="noopener noreferrer">Flutter&#39;s Focus widget</a>.</p><p>To customize focus behavior, see <a href="#controlling-focus">Controlling focus</a>.</p><p>There are two ways a game can react to key strokes; at the game level and at a component level. For each we have a mixin that can me added to a <code>Game</code> or <code>Component</code> class.</p><h3 id="receive-keyboard-events-in-a-game-level" tabindex="-1"><a class="header-anchor" href="#receive-keyboard-events-in-a-game-level"><span>Receive keyboard events in a game level</span></a></h3><p>To make a <code>Game</code> sub class sensitive to key stroke, mix it with <code>KeyboardEvents</code>.</p><p>After that, it will be possible to override an <code>onKeyEvent</code> method.</p><p>This method receives two parameters, first the <a href="https://api.flutter.dev/flutter/services/KeyEvent-class.html" target="_blank" rel="noopener noreferrer"><code>KeyEvent</code></a> that triggers the callback in the first place. The second is a set of the currently pressed <a href="https://api.flutter.dev/flutter/services/LogicalKeyboardKey-class.html" target="_blank" rel="noopener noreferrer"><code>LogicalKeyboardKey</code></a>.</p><p>The return value is a <a href="https://api.flutter.dev/flutter/widgets/KeyEventResult.html" target="_blank" rel="noopener noreferrer"><code>KeyEventResult</code></a>.</p><p><code>KeyEventResult.handled</code> will tell the framework that the key stroke was resolved inside of Flame and skip any other keyboard handler widgets apart of <code>GameWidget</code>.</p><p><code>KeyEventResult.ignored</code> will tell the framework to keep testing this event in any other keyboard handler widget apart of <code>GameWidget</code>. If the event is not resolved by any handler, the framework will trigger <code>SystemSoundType.alert</code>.</p><p><code>KeyEventResult.skipRemainingHandlers</code> is very similar to <code>.ignored</code>, apart from the fact that will skip any other handler widget and will straight up play the alert sound.</p><p>Minimal example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token keyword">with</span> <span class="token class-name">KeyboardEvents</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">KeyEventResult</span> <span class="token function">onKeyEvent</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">KeyEvent</span> event<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">&gt;</span></span> keysPressed<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> isKeyDown <span class="token operator">=</span> event <span class="token operator">is</span> <span class="token class-name">KeyDownEvent</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">final</span> isSpace <span class="token operator">=</span> keysPressed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>space<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSpace <span class="token operator">&amp;&amp;</span> isKeyDown<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>altLeft<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">          keysPressed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>altRight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shootHarder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token class-name">KeyEventResult</span><span class="token punctuation">.</span>handled<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">KeyEventResult</span><span class="token punctuation">.</span>ignored<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="receive-keyboard-events-in-a-component-level" tabindex="-1"><a class="header-anchor" href="#receive-keyboard-events-in-a-component-level"><span>Receive keyboard events in a component level</span></a></h3><p>To receive keyboard events directly in components, there is the mixin <code>KeyboardHandler</code>.</p><p>Similarly to <code>TapCallbacks</code> and <code>DragCallbacks</code>, <code>KeyboardHandler</code> can be mixed into any subclass of <code>Component</code>.</p><p>KeyboardHandlers must only be added to games that are mixed with <code>HasKeyboardHandlerComponents</code>.</p><blockquote><p>⚠️ Note: If <code>HasKeyboardHandlerComponents</code> is used, you must remove <code>KeyboardEvents</code> from the game mixin list to avoid conflicts.</p></blockquote><p>After applying <code>KeyboardHandler</code>, it will be possible to override an <code>onKeyEvent</code> method.</p><p>This method receives two parameters. First the <a href="https://api.flutter.dev/flutter/services/KeyEvent-class.html" target="_blank" rel="noopener noreferrer"><code>KeyEvent</code></a> that triggered the callback in the first place. The second is a set of the currently pressed <a href="https://api.flutter.dev/flutter/services/LogicalKeyboardKey-class.html" target="_blank" rel="noopener noreferrer"><code>LogicalKeyboardKey</code></a>s.</p><p>The returned value should be <code>true</code> to allow the continuous propagation of the key event among other components. To not allow any other component to receive the event, return <code>false</code>.</p><p>Flame also provides a default implementation called <code>KeyboardListenerComponent</code> which can be used to handle keyboard events. Like any other component, it can be added as a child to a <code>FlameGame</code> or another <code>Component</code>:</p><p>For example, imagine a <code>PositionComponent</code> which has methods to move on the X and Y axis, then the following code could be used to bind those methods to key events:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token class-name">KeyboardListenerComponent</span><span class="token punctuation">(</span></span>
<span class="line">    keyUp<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyA<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyD<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyW<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyS<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    keyDown<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyA<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyD<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyW<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">LogicalKeyboardKey</span><span class="token punctuation">.</span>keyS<span class="token punctuation">:</span> <span class="token punctuation">(</span>keysPressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="controlling-focus" tabindex="-1"><a class="header-anchor" href="#controlling-focus"><span>Controlling focus</span></a></h3><p>On the widget level, it is possible to use the <a href="https://api.flutter.dev/flutter/widgets/FocusNode-class.html" target="_blank" rel="noopener noreferrer"><code>FocusNode</code></a> API to control whether the game is focused or not.</p><p><code>GameWidget</code> has an optional <code>focusNode</code> parameter that allow its focus to be controlled externally.</p><p>By default <code>GameWidget</code> has its <code>autofocus</code> set to true, which means it will get focused once it is mounted. To override that behavior, set <code>autofocus</code> to false.</p><p>For a more complete example see <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/input/keyboard_example.dart" target="_blank" rel="noopener noreferrer">here</a>.</p>`,30))])}const v=p(r,[["render",d],["__file","keyboard_input.html.vue"]]),h=JSON.parse('{"path":"/guide/flame/inputs/keyboard_input.html","title":"Keyboard Input","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Intro","slug":"intro","link":"#intro","children":[{"level":3,"title":"Receive keyboard events in a game level","slug":"receive-keyboard-events-in-a-game-level","link":"#receive-keyboard-events-in-a-game-level","children":[]},{"level":3,"title":"Receive keyboard events in a component level","slug":"receive-keyboard-events-in-a-component-level","link":"#receive-keyboard-events-in-a-component-level","children":[]},{"level":3,"title":"Controlling focus","slug":"controlling-focus","link":"#controlling-focus","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/inputs/keyboard_input.md"}');export{v as comp,h as data};
