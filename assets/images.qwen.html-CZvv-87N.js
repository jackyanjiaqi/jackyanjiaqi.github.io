import{_ as s,c as a,f as e,o as p}from"./app-BZlJFCNj.js";const t={};function c(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="图像" tabindex="-1"><a class="header-anchor" href="#图像"><span>图像</span></a></h1><p>首先，你需要有一个合适的文件夹结构，并将文件添加到 <code>pubspec.yaml</code> 文件中，如下所示：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">flutter</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">assets</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> assets/images/player.png</span>
<span class="line">    <span class="token punctuation">-</span> assets/images/enemy.png</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图像可以是 Flutter 支持的任何格式，包括：JPEG, WebP, PNG, GIF, 动态 GIF, 动态 WebP, BMP 和 WBMP。其他格式可能需要额外的库。例如，可以通过 <code>flame_svg</code> 库加载 SVG 图像。</p><h2 id="加载图像" tabindex="-1"><a class="header-anchor" href="#加载图像"><span>加载图像</span></a></h2><p>Flame 提供了一个名为 <code>Images</code> 的实用工具类，可让你轻松地将资产目录中的图像加载并缓存到内存中。</p><p>Flutter 与图像相关的类型有很多，在将本地资产正确转换为可以在 Canvas 上绘制的 <code>Image</code> 过程上有些复杂。此类允许你使用 <code>drawImageRect</code> 方法在 <code>Canvas</code> 上获得一个可以绘制的 <code>Image</code>。</p><p>它会根据文件名自动缓存加载的任何图像，因此你可以安全地多次调用它。</p><p>用于加载和清除缓存的方法是：<code>load</code>, <code>loadAll</code>, <code>clear</code> 和 <code>clearCache</code>。 它们返回用于加载图像的 <code>Future</code>。在以任何方式使用图像之前必须等待这些 <code>Future</code> 完成。 如果你不想立即等待这些 <code>Future</code>，可以先发起多个 <code>load()</code> 操作，然后通过调用 <code>Images.ready()</code> 方法一次性等待所有加载完成。</p><p>要同步检索先前缓存的图像，可以使用 <code>fromCache</code> 方法。如果之前没有加载具有该键的图像，则会抛出异常。</p><p>要将已加载的图像添加到缓存中，可以使用 <code>add</code> 方法，并设置该图像在缓存中的键。 可以通过 <code>keys</code> getter 获取缓存中的所有键。</p><p>还可以使用 <code>ImageExtension.fromPixels()</code> 在游戏中动态创建图像。</p><p>对于 <code>clear</code> 和 <code>clearCache</code>，请注意从缓存中移除的每个图像都会调用其 <code>dispose</code> 方法，因此请确保在之后不再使用该图像。</p><h3 id="独立使用" tabindex="-1"><a class="header-anchor" href="#独立使用"><span>独立使用</span></a></h3><p>可以通过实例化来手动使用它：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/cache.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> imagesLoader <span class="token operator">=</span> <span class="token class-name">Images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">await</span> imagesLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;yourImage.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但 Flame 还提供了两种无需自行实例化此类的方法。</p><h3 id="flame-images" tabindex="-1"><a class="header-anchor" href="#flame-images"><span>Flame.images</span></a></h3><p><code>Flame</code> 类提供了一个单例，可以用作全局图像缓存。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/flame.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/sprite.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在异步上下文中</span></span>
<span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Flame</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> playerSprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="game-images" tabindex="-1"><a class="header-anchor" href="#game-images"><span>Game.images</span></a></h3><p><code>Game</code> 类还提供了用于处理图像加载的一些实用方法。它包含一个 <code>Images</code> 类的实例，可用于在游戏期间加载图像资源。 当游戏部件从部件树中移除时，游戏会自动释放缓存。</p><p>可以从 <code>Game</code> 类的 <code>onLoad</code> 方法中加载初始资产。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Sprite</span> player<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 注意，你也可以使用 Sprite.load 来实现这一点。</span></span>
<span class="line">    <span class="token keyword">final</span> playerImage <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    player <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>playerImage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载的资源在游戏运行时也可以通过 <code>images.fromCache</code> 获取，例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 省略属性</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 省略其他加载项</span></span>
<span class="line">    <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bullet.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 这只是一个示例，在你的游戏中可能不希望每次射击时都实例化新的 [Sprite] 对象。</span></span>
<span class="line">    <span class="token keyword">final</span> bulletSprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">fromCache</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bullet.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _bullets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bulletSprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网络加载图像" tabindex="-1"><a class="header-anchor" href="#网络加载图像"><span>网络加载图像</span></a></h2><p>Flame 核心包没有提供用于从网络加载图像的内置方法。</p><p>原因在于 Flutter/Dart 没有内置的 http 客户端，这需要使用一个包，并且由于有多个可用的包，我们不强制用户使用特定的包。</p><p>尽管如此，一旦用户选择了 http 客户端包，从网络加载图像是相当简单的。以下代码片段展示了如何使用 <a href="https://pub.dev/packages/http" target="_blank" rel="noopener noreferrer">http</a> 包从 Web 获取 <code>Image</code>。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:http/http.dart&#39;</span></span> <span class="token operator">as</span> http<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/painting.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;https://url.com/image.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">decodeImageFromList</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>bodyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">检查 [\`flame_network_assets\`](https://pub.dev/packages/flame_network_assets)</span>
<span class="line">以获取现成的网络资源解决方案，该解决方案提供了内置缓存。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sprite" tabindex="-1"><a class="header-anchor" href="#sprite"><span>Sprite</span></a></h2><p>Flame 提供了一个 <code>Sprite</code> 类，它代表一个图像或图像的一部分。</p><p>你可以通过提供一个 <code>Image</code> 和定义精灵所表示的部分图像的坐标来创建一个 <code>Sprite</code>。</p><p>例如，这将创建一个代表传递的文件整个图像的精灵：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Sprite</span> player <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以指定原始图像中精灵的位置坐标。这允许使用精灵图集并减少内存中的图像数量，例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> playerFrame <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span></span>
<span class="line">  image<span class="token punctuation">,</span></span>
<span class="line">  srcPosition<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">32.0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  srcSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>srcPosition</code> 的默认值为 <code>(0.0, 0.0)</code>，而 <code>srcSize</code> 的默认值为 <code>null</code>（这意味着它将使用源图像的完整宽度/高度）。</p><p><code>Sprite</code> 类有一个 render 方法，允许你将精灵渲染到 <code>Canvas</code> 上：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;block.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Sprite</span> block <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在你的 render 方法中</span></span>
<span class="line">block<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// canvas, size</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>必须向 render 方法传递大小，图像将相应地调整大小。</p><p><code>Sprite</code> 类的所有渲染方法都可以接收一个可选命名参数 <code>overridePaint</code> 的 <code>Paint</code> 实例，该参数将在渲染调用期间覆盖当前的 <code>Sprite</code> paint 实例。</p><p><code>sprites</code> 也可以作为 widget 使用，为此请使用 <code>SpriteWidget</code> 类。 这是一个完整的 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/widgets/sprite_widget_example.dart" target="_blank" rel="noopener noreferrer">示例，将 sprite 作为 widget</a>。</p><h2 id="spritebatch" tabindex="-1"><a class="header-anchor" href="#spritebatch"><span>SpriteBatch</span></a></h2><p>如果你有一个精灵图集（也称为图像图集，即包含较小图像的图像），并且希望有效地渲染它 - <code>SpriteBatch</code> 可以处理这项工作。</p><p>只需提供图像的文件名，然后添加描述该图像各个部分的矩形，以及变换（位置、缩放和旋转）和可选颜色。</p><p>你可以使用 <code>Canvas</code> 和可选的 <code>Paint</code>、<code>BlendMode</code> 和 <code>CullRect</code> 进行渲染。</p><p>还提供了方便的 <code>SpriteBatchComponent</code>。</p><p>有关如何使用的示例，请参见 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/sprites/sprite_batch_example.dart" target="_blank" rel="noopener noreferrer">SpriteBatch 示例</a></p><h2 id="imagecomposition" tabindex="-1"><a class="header-anchor" href="#imagecomposition"><span>ImageComposition</span></a></h2><p>在某些情况下，你可能希望将多个图像合并为一个单一图像；这称为 <a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%90%88%E6%88%90" target="_blank" rel="noopener noreferrer">合成</a>。例如，在使用 <a href="#spritebatch">SpriteBatch</a> API 时优化你的绘制调用时，这非常有用。</p><p>对于此类用例，Flame 提供了 <code>ImageComposition</code> 类。这允许你将多个图像添加到新的图像中，每个图像都有自己的位置：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> composition <span class="token operator">=</span> <span class="token class-name">ImageComposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image2<span class="token punctuation">,</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image3<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    source<span class="token punctuation">:</span> <span class="token class-name">Rect</span><span class="token punctuation">.</span><span class="token function">fromLTWH</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">await</span> composition<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Image</span> imageSync <span class="token operator">=</span> composition<span class="token punctuation">.</span><span class="token function">composeSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，有两个版本的图像合成可用。对于异步方法，请使用 <code>ImageComposition.compose()</code>。 或者使用新的 <code>ImageComposition.composeSync()</code> 函数利用 <code>Picture.toImageSync</code> 函数的好处将图像栅格化到 GPU 上下文中。</p><p><strong>注意：</strong> 合成图像是昂贵的操作，我们不建议你在每帧都运行此操作，因为它严重影响性能。相反，我们建议预先渲染组合，以便只需重用输出图像。</p><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画"><span>动画</span></a></h2><p>Animation 类帮助你创建一个循环的精灵动画。</p><p>你可以通过传递相同大小的精灵列表和 stepTime（即移动到下一帧所需的秒数）来创建它：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span><span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">spriteList</span><span class="token punctuation">(</span>sprites<span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建动画后，你需要调用其 <code>update</code> 方法，并在游戏实例上渲染当前帧的精灵。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">SpriteAnimationTicker</span> a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">MyGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span><span class="token class-name">SpriteAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">.</span><span class="token function">getSprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成精灵列表的一个更好的替代方案是使用 <code>fromFrameData</code> 构造函数：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">const</span> amountOfFrames <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">fromFrameData</span><span class="token punctuation">(</span></span>
<span class="line">    imageInstance<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">SpriteAnimationFrame</span><span class="token punctuation">.</span><span class="token function">sequenced</span><span class="token punctuation">(</span></span>
<span class="line">      amount<span class="token punctuation">:</span> amountOfFrames<span class="token punctuation">,</span></span>
<span class="line">      textureSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用精灵图集时，这个构造函数可以非常轻松地创建 <code>Animation</code>。</p><p>在构造函数中传递一个图像实例和帧数据，其中包含描述动画的一些参数。检查 <code>SpriteAnimationFrameData</code> 类上的可用构造函数以查看所有参数。</p><p>如果你使用 Aseprite 进行动画制作，Flame 也提供了对 Aseprite 动画 JSON 数据的支持。 要使用此功能，你需要导出精灵图集的 JSON 数据，并使用类似以下代码片段的内容：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;chopper.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> jsonData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Flame</span><span class="token punctuation">.</span>assets<span class="token punctuation">.</span><span class="token function">readJson</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;chopper.json&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">fromAsepriteData</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> Flame 不支持修剪过的精灵图集，因此如果你以这种方式导出你的精灵图集， 它将具有修剪后的尺寸而不是原始的精灵尺寸。</p><p>创建后，动画具有 <code>update</code> 和 <code>render</code> 方法；后者渲染当前帧，而前者更新内部时钟以更新帧。</p><p>通常在 <code>SpriteAnimationComponent</code> 中使用动画，但也可以创建带有多个动画的自定义组件。</p><p>要了解更多信息，请查看 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/widgets/sprite_animation_widget_example.dart" target="_blank" rel="noopener noreferrer">将动画用作 widget 的完整示例代码</a>。</p><h2 id="spritesheet" tabindex="-1"><a class="header-anchor" href="#spritesheet"><span>SpriteSheet</span></a></h2><p>精灵图集是一张包含同一精灵不同帧的大图像，是组织和存储你的动画非常有效的方法。Flame 提供了一个处理精灵图集的简单实用工具类。 使用它可以加载精灵图集图像并从中提取动画。以下是使用它的简单示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/sprite.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> spriteSheet <span class="token operator">=</span> <span class="token class-name">SpriteSheet</span><span class="token punctuation">(</span></span>
<span class="line">  image<span class="token punctuation">:</span> imageInstance<span class="token punctuation">,</span></span>
<span class="line">  srcSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> spriteSheet<span class="token punctuation">.</span><span class="token function">createAnimation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以直接使用动画或在动画组件中使用。</p><p>还可以通过 <code>SpriteSheet.createFrameData</code> 或 <code>SpriteSheet.createFrameDataFromId</code> 获取单独的 <code>SpriteAnimationFrameData</code> 来创建自定义动画：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">fromFrameData</span><span class="token punctuation">(</span></span>
<span class="line">  imageInstance<span class="token punctuation">,</span> </span>
<span class="line">  <span class="token class-name">SpriteAnimationData</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    spriteSheet<span class="token punctuation">.</span><span class="token function">createFrameDataFromId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 根据 ID</span></span>
<span class="line">    spriteSheet<span class="token punctuation">.</span><span class="token function">createFrameData</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 行，列</span></span>
<span class="line">    spriteSheet<span class="token punctuation">.</span><span class="token function">createFrameDataFromId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 根据 ID</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你不需要任何动画，只需要获取 <code>SpriteSheet</code> 上的 <code>Sprite</code> 实例， 可以使用 <code>getSprite</code> 或 <code>getSpriteById</code> 方法：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">spriteSheet<span class="token punctuation">.</span><span class="token function">getSpriteById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据 ID</span></span>
<span class="line">spriteSheet<span class="token punctuation">.</span><span class="token function">getSprite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 行，列</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>有关如何处理它的详细信息，请参见 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/sprites/sprite_sheet_example.dart" target="_blank" rel="noopener noreferrer"><code>SpriteSheet</code> 类</a> 的完整示例。</p>`,85)]))}const o=s(t,[["render",c],["__file","images.qwen.html.vue"]]),u=JSON.parse('{"path":"/guide/flame/rendering/images.qwen.html","title":"图像","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"加载图像","slug":"加载图像","link":"#加载图像","children":[{"level":3,"title":"独立使用","slug":"独立使用","link":"#独立使用","children":[]},{"level":3,"title":"Flame.images","slug":"flame-images","link":"#flame-images","children":[]},{"level":3,"title":"Game.images","slug":"game-images","link":"#game-images","children":[]}]},{"level":2,"title":"网络加载图像","slug":"网络加载图像","link":"#网络加载图像","children":[]},{"level":2,"title":"Sprite","slug":"sprite","link":"#sprite","children":[]},{"level":2,"title":"SpriteBatch","slug":"spritebatch","link":"#spritebatch","children":[]},{"level":2,"title":"ImageComposition","slug":"imagecomposition","link":"#imagecomposition","children":[]},{"level":2,"title":"动画","slug":"动画","link":"#动画","children":[]},{"level":2,"title":"SpriteSheet","slug":"spritesheet","link":"#spritesheet","children":[]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/rendering/images.qwen.md"}');export{o as comp,u as data};
