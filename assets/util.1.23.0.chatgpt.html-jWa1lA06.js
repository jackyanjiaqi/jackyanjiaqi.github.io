import{_ as n,c as s,f as a,o as c}from"./app-BZlJFCNj.js";const l={};function t(o,e){return c(),s("div",null,e[0]||(e[0]=[a(`<h1 id="工具类文档" tabindex="-1"><a class="header-anchor" href="#工具类文档"><span>工具类文档</span></a></h1><p>此页面记录了一些实用类和方法的用法。</p><hr><h2 id="设备类-device-class" tabindex="-1"><a class="header-anchor" href="#设备类-device-class"><span>设备类（Device Class）</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">此类中的许多方法仅适用于移动平台（Android 和 iOS）。</span>
<span class="line"></span>
<span class="line">在其他平台上使用这些方法不会产生效果，并且在调试模式下运行时会在控制台打印警告。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过 <code>Flame.device</code> 访问该类，使用它可以控制设备状态。例如，您可以更改屏幕方向或设置应用是否全屏显示。</p><h3 id="flame-device-fullscreen" tabindex="-1"><a class="header-anchor" href="#flame-device-fullscreen"><span><code>Flame.device.fullScreen()</code></span></a></h3><p>调用后会禁用所有 <code>SystemUiOverlay</code>，使应用进入全屏模式。<br> 在主方法中调用时，应用会变为全屏（无顶部或底部导航栏）。</p><p><strong>注意:</strong> 在 Web 平台上调用无效。</p><h3 id="flame-device-setlandscape" tabindex="-1"><a class="header-anchor" href="#flame-device-setlandscape"><span><code>Flame.device.setLandscape()</code></span></a></h3><p>将整个应用（包括游戏）设置为横屏模式。根据操作系统和设备设置，可支持左横屏和右横屏方向。如需指定方向，请使用 <code>Flame.device.setLandscapeLeftOnly</code> 或 <code>Flame.device.setLandscapeRightOnly</code>。</p><p><strong>注意:</strong> 在 Web 平台上调用无效。</p><h3 id="flame-device-setportrait" tabindex="-1"><a class="header-anchor" href="#flame-device-setportrait"><span><code>Flame.device.setPortrait()</code></span></a></h3><p>将整个应用（包括游戏）设置为竖屏模式。根据操作系统和设备设置，可支持向上和向下的竖屏方向。如需指定方向，请使用 <code>Flame.device.setPortraitUpOnly</code> 或 <code>Flame.device.setPortraitDownOnly</code>。</p><p><strong>注意:</strong> 在 Web 平台上调用无效。</p><h3 id="flame-device-setorientation-和-flame-device-setorientations" tabindex="-1"><a class="header-anchor" href="#flame-device-setorientation-和-flame-device-setorientations"><span><code>Flame.device.setOrientation()</code> 和 <code>Flame.device.setOrientations()</code></span></a></h3><p>如果需要更精确地控制方向，可使用 <code>setOrientation</code>（接受单个 <code>DeviceOrientation</code> 参数）或 <code>setOrientations</code>（接受一个 <code>List&lt;DeviceOrientation&gt;</code> 参数）。</p><p><strong>注意:</strong> 在 Web 平台上调用无效。</p><hr><h2 id="计时器-timer" tabindex="-1"><a class="header-anchor" href="#计时器-timer"><span>计时器（Timer）</span></a></h2><p>Flame 提供了一个简单的计时器类，帮助您处理倒计时和计时状态的变化，例如事件触发。</p><h3 id="倒计时示例" tabindex="-1"><a class="header-anchor" href="#倒计时示例"><span>倒计时示例：</span></a></h3><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/components.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/game.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> countdown <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    countdown<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>countdown<span class="token punctuation">.</span>finished<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 倒计时结束后的处理</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定时器间隔示例" tabindex="-1"><a class="header-anchor" href="#定时器间隔示例"><span>定时器间隔示例：</span></a></h3><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Timer</span> interval<span class="token punctuation">;</span></span>
<span class="line">  int elapsedSecs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">MyGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    interval <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      onTick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> elapsedSecs <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      repeat<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    interval<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Timer</code> 也可以与 <code>TimerComponent</code> 一起用于 <code>FlameGame</code>。</p><h3 id="timercomponent-示例" tabindex="-1"><a class="header-anchor" href="#timercomponent-示例"><span><code>TimerComponent</code> 示例：</span></a></h3><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/components.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/game.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyFlameGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyFlameGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token class-name">TimerComponent</span><span class="token punctuation">(</span></span>
<span class="line">        period<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">        repeat<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        onTick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;10秒已过去&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="时间缩放-time-scale" tabindex="-1"><a class="header-anchor" href="#时间缩放-time-scale"><span>时间缩放（Time Scale）</span></a></h2><p>在许多游戏中，常需要根据某些事件创建慢动作或快进效果。<br> 通过使用 <code>HasTimeScale</code> 混入，可以更轻松地操控游戏时间或帧率。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/components.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/game.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyFlameGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token keyword">with</span> <span class="token class-name">HasTimeScale</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">speedUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    timeScale <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">slowDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    timeScale <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="扩展方法" tabindex="-1"><a class="header-anchor" href="#扩展方法"><span>扩展方法</span></a></h2><p>Flame 提供了一系列实用的扩展方法，这些方法旨在为开发者提供快捷方式和转换方法。以下是这些扩展方法的完整总结。</p><p>这些扩展方法可以通过 <code>package:flame/extensions.dart</code> 导入。</p><hr><h3 id="canvas-扩展" tabindex="-1"><a class="header-anchor" href="#canvas-扩展"><span>Canvas 扩展</span></a></h3><ul><li><strong><code>scaleVector</code></strong>: 类似于 <code>Canvas</code> 的 <code>scale</code> 方法，但接受一个 <code>Vector2</code> 作为参数。</li><li><strong><code>translateVector</code></strong>: 类似于 <code>Canvas</code> 的 <code>translate</code> 方法，但接受一个 <code>Vector2</code> 作为参数。</li><li><strong><code>renderPoint</code></strong>: 在画布上渲染一个点（主要用于调试目的）。</li><li><strong><code>renderAt</code> 和 <code>renderRotated</code></strong>: 如果你直接在 <code>Canvas</code> 上渲染内容，可以使用这些函数方便地操作坐标，确保在正确的位置渲染内容。它们会临时更改 <code>Canvas</code> 的变换矩阵，但随后会重置。</li></ul><hr><h3 id="color-扩展" tabindex="-1"><a class="header-anchor" href="#color-扩展"><span>Color 扩展</span></a></h3><ul><li><strong>方法</strong>: <ul><li><code>darken</code>: 按 0 到 1 的值将颜色变暗。</li><li><code>brighten</code>: 按 0 到 1 的值将颜色变亮。</li></ul></li><li><strong>工厂方法</strong>: <ul><li><code>ColorExtension.fromRGBHexString</code>: 从有效的 RGB 十六进制字符串（如 <code>#1C1C1C</code>）解析颜色。</li><li><code>ColorExtension.fromARGBHexString</code>: 从有效的 ARGB 十六进制字符串（如 <code>#FF1C1C1C</code>）解析颜色。</li></ul></li></ul><hr><h3 id="image-扩展" tabindex="-1"><a class="header-anchor" href="#image-扩展"><span>Image 扩展</span></a></h3><ul><li><strong>方法</strong>: <ul><li><code>pixelsInUint8</code>: 获取图像的像素数据，格式为 <code>ImageByteFormat.rawRgba</code>，返回一个 <code>Uint8List</code>。</li><li><code>getBoundingRect</code>: 获取图像的边界矩形，返回 <code>Rect</code>。</li><li><code>size</code>: 返回图像的尺寸，以 <code>Vector2</code> 表示。</li><li><code>darken</code>: 按 0 到 1 的值将图像每个像素变暗。</li><li><code>brighten</code>: 按 0 到 1 的值将图像每个像素变亮。</li></ul></li></ul><hr><h3 id="offset-扩展" tabindex="-1"><a class="header-anchor" href="#offset-扩展"><span>Offset 扩展</span></a></h3><ul><li><strong>方法</strong>: <ul><li><code>toVector2</code>: 将 <code>Offset</code> 转换为 <code>Vector2</code>。</li><li><code>toSize</code>: 将 <code>Offset</code> 转换为 <code>Size</code>。</li><li><code>toPoint</code>: 将 <code>Offset</code> 转换为 <code>Point</code>。</li><li><code>toRect</code>: 创建一个以 (0,0) 为起点、以该 <code>Offset</code> 为右下角的 <code>Rect</code>。</li></ul></li></ul><hr><h3 id="rect-扩展" tabindex="-1"><a class="header-anchor" href="#rect-扩展"><span>Rect 扩展</span></a></h3><ul><li><strong>方法</strong>: <ul><li><code>toOffset</code>: 创建一个 <code>Offset</code>，等于矩形的左上角点。</li><li><code>toVector2</code>: 创建一个 <code>Vector2</code>，等于矩形的宽高。</li><li><code>containsPoint</code>: 检查 <code>Rect</code> 是否包含一个 <code>Vector2</code> 点。</li><li><code>intersectsSegment</code>: 检查由两个 <code>Vector2</code> 组成的线段是否与 <code>Rect</code> 相交。</li><li><code>intersectsLineSegment</code>: 检查 <code>LineSegment</code> 是否与 <code>Rect</code> 相交。</li><li><code>toVertices</code>: 将矩形的四个角转换为 <code>Vector2</code> 列表。</li><li><code>toFlameRectangle</code>: 将 <code>Rect</code> 转换为 Flame 的 <code>Rectangle</code>。</li><li><code>toMathRectangle</code>: 将 <code>Rect</code> 转换为 <code>math.Rectangle</code>。</li><li><code>toGeometryRectangle</code>: 将 <code>Rect</code> 转换为 <code>flame-geom</code> 中的 <code>Rectangle</code>。</li><li><code>transform</code>: 使用 <code>Matrix4</code> 转换 <code>Rect</code>。</li></ul></li><li><strong>工厂方法</strong>: <ul><li><code>RectExtension.getBounds</code>: 根据一组 <code>Vector2</code> 创建包含它们的最小边界矩形。</li><li><code>RectExtension.fromCenter</code>: 从中心点（以 <code>Vector2</code> 表示）创建矩形。</li></ul></li></ul><hr><h3 id="math-rectangle-扩展" tabindex="-1"><a class="header-anchor" href="#math-rectangle-扩展"><span>math.Rectangle 扩展</span></a></h3><ul><li><strong>方法</strong>: <ul><li><code>toRect</code>: 将 <code>math.Rectangle</code> 转换为 Flutter 的 <code>Rect</code>。</li></ul></li></ul><hr><h3 id="size-扩展" tabindex="-1"><a class="header-anchor" href="#size-扩展"><span>Size 扩展</span></a></h3><ul><li><strong>方法</strong>: <ul><li><code>toVector2</code>: 将 <code>Size</code> 转换为 <code>Vector2</code>。</li><li><code>toOffset</code>: 将 <code>Size</code> 转换为 <code>Offset</code>。</li><li><code>toPoint</code>: 将 <code>Size</code> 转换为 <code>Point</code>。</li><li><code>toRect</code>: 创建一个从 (0,0) 开始，以该 <code>Size</code> 的宽高定义的 <code>Rect</code>。</li></ul></li></ul><hr><h3 id="vector2-扩展" tabindex="-1"><a class="header-anchor" href="#vector2-扩展"><span>Vector2 扩展</span></a></h3><p><code>Vector2</code> 是 <code>vector_math</code> 包中的类，Flame 提供了以下扩展方法：</p><ul><li><strong>方法</strong>: <ul><li><code>toOffset</code>: 将 <code>Vector2</code> 转换为 <code>Offset</code>。</li><li><code>toPoint</code>: 将 <code>Vector2</code> 转换为 <code>Point</code>。</li><li><code>toRect</code>: 创建一个从 (0,0) 开始的矩形，其宽高等于 <code>Vector2</code>。</li><li><code>toPositionedRect</code>: 从 <code>Vector2</code> 的 (x, y) 位置开始，创建一个宽高等于另一个 <code>Vector2</code> 的矩形。</li><li><code>lerp</code>: 将当前 <code>Vector2</code> 按线性插值方式移动到另一个 <code>Vector2</code>。</li><li><code>rotate</code>: 按指定角度（以弧度为单位）围绕中心点旋转 <code>Vector2</code>。</li><li><code>scaleTo</code>: 调整 <code>Vector2</code> 的长度为指定值，同时保持方向不变。</li><li><code>moveToTarget</code>: 以给定距离平滑地移动到目标方向。</li></ul></li><li><strong>工厂方法</strong>: <ul><li><code>Vector2Extension.fromInts</code>: 使用整数值创建 <code>Vector2</code>。</li></ul></li><li><strong>运算符</strong>: <ul><li><code>&amp;</code>: 将两个 <code>Vector2</code> 组合成一个矩形，左操作数为起点，右操作数为尺寸。</li><li><code>%</code>: 对两个 <code>Vector2</code> 的 x 和 y 分别进行取模运算。</li></ul></li></ul><hr><h3 id="matrix4-扩展" tabindex="-1"><a class="header-anchor" href="#matrix4-扩展"><span>Matrix4 扩展</span></a></h3><p><code>Matrix4</code> 是来自 <code>vector_math</code> 包的类，Flame 提供了以下扩展方法：</p><ul><li><strong>方法</strong>: <ul><li><code>translate2</code>: 使用 <code>Vector2</code> 对 <code>Matrix4</code> 进行平移操作。</li><li><code>transform2</code>: 使用 <code>Matrix4</code> 转换 <code>Vector2</code>，并返回新的 <code>Vector2</code>。</li><li><code>transformed2</code>: 将输入 <code>Vector2</code> 使用 <code>Matrix4</code> 转换为输出 <code>Vector2</code>。</li></ul></li><li><strong>属性</strong>: <ul><li><code>m11</code>：矩阵的第一行第一列。</li><li><code>m12</code>：矩阵的第一行第二列。</li><li><code>m13</code>：矩阵的第一行第三列。</li><li><code>m14</code>：矩阵的第一行第四列。</li><li><code>m21</code>：矩阵的第二行第一列。</li><li><code>m22</code>：矩阵的第二行第二列。</li><li><code>m23</code>：矩阵的第二行第三列。</li><li><code>m24</code>：矩阵的第二行第四列。</li><li><code>m31</code>：矩阵的第三行第一列。</li><li><code>m32</code>：矩阵的第三行第二列。</li><li><code>m33</code>：矩阵的第三行第三列。</li><li><code>m34</code>：矩阵的第三行第四列。</li><li><code>m41</code>：矩阵的第四行第一列。</li><li><code>m42</code>：矩阵的第四行第二列。</li><li><code>m43</code>：矩阵的第四行第三列。</li><li><code>m44</code>：矩阵的第四行第四列。</li></ul></li><li><strong>工厂方法</strong>: <ul><li><code>Matrix4Extension.scale</code>: 创建一个缩放矩阵，可以接受 <code>Vector2</code> 或 x、y、z 值作为参数。</li></ul></li></ul><hr>`,66)]))}const d=n(l,[["render",t],["__file","util.1.23.0.chatgpt.html.vue"]]),p=JSON.parse('{"path":"/guide/flame/other/util.1.23.0.chatgpt.html","title":"工具类文档","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"设备类（Device Class）","slug":"设备类-device-class","link":"#设备类-device-class","children":[{"level":3,"title":"Flame.device.fullScreen()","slug":"flame-device-fullscreen","link":"#flame-device-fullscreen","children":[]},{"level":3,"title":"Flame.device.setLandscape()","slug":"flame-device-setlandscape","link":"#flame-device-setlandscape","children":[]},{"level":3,"title":"Flame.device.setPortrait()","slug":"flame-device-setportrait","link":"#flame-device-setportrait","children":[]},{"level":3,"title":"Flame.device.setOrientation() 和 Flame.device.setOrientations()","slug":"flame-device-setorientation-和-flame-device-setorientations","link":"#flame-device-setorientation-和-flame-device-setorientations","children":[]}]},{"level":2,"title":"计时器（Timer）","slug":"计时器-timer","link":"#计时器-timer","children":[{"level":3,"title":"倒计时示例：","slug":"倒计时示例","link":"#倒计时示例","children":[]},{"level":3,"title":"定时器间隔示例：","slug":"定时器间隔示例","link":"#定时器间隔示例","children":[]},{"level":3,"title":"TimerComponent 示例：","slug":"timercomponent-示例","link":"#timercomponent-示例","children":[]}]},{"level":2,"title":"时间缩放（Time Scale）","slug":"时间缩放-time-scale","link":"#时间缩放-time-scale","children":[]},{"level":2,"title":"扩展方法","slug":"扩展方法","link":"#扩展方法","children":[{"level":3,"title":"Canvas 扩展","slug":"canvas-扩展","link":"#canvas-扩展","children":[]},{"level":3,"title":"Color 扩展","slug":"color-扩展","link":"#color-扩展","children":[]},{"level":3,"title":"Image 扩展","slug":"image-扩展","link":"#image-扩展","children":[]},{"level":3,"title":"Offset 扩展","slug":"offset-扩展","link":"#offset-扩展","children":[]},{"level":3,"title":"Rect 扩展","slug":"rect-扩展","link":"#rect-扩展","children":[]},{"level":3,"title":"math.Rectangle 扩展","slug":"math-rectangle-扩展","link":"#math-rectangle-扩展","children":[]},{"level":3,"title":"Size 扩展","slug":"size-扩展","link":"#size-扩展","children":[]},{"level":3,"title":"Vector2 扩展","slug":"vector2-扩展","link":"#vector2-扩展","children":[]},{"level":3,"title":"Matrix4 扩展","slug":"matrix4-扩展","link":"#matrix4-扩展","children":[]}]}],"git":{},"filePathRelative":"guide/flame/other/util.1.23.0.chatgpt.md"}');export{d as comp,p as data};
