import{_ as c,a as l,b as i,c as u,d}from"./isometric-C4noXiBa.js";import{_ as r,c as k,f as e,a,b as s,d as t,e as o,r as m,o as v}from"./app-BZlJFCNj.js";const b={};function h(g,n){const p=m("RouteLink");return v(),k("div",null,[n[13]||(n[13]=e('<h1 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h1><p><img src="'+c+`" alt=""></p><p>这个图表可能看起来很复杂，但请不要担心，它并没有看起来的那么复杂。</p><h2 id="组件-1" tabindex="-1"><a class="header-anchor" href="#组件-1"><span>组件</span></a></h2><p>所有组件都继承自<code>Component</code>类，并且可以有其他<code>Component</code>作为子组件。 这就是我们所说的Flame组件系统（简称FCS）的基础。</p><p>子组件可以通过调用<code>add(Component c)</code>方法或直接在构造函数中添加。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> component1 <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">(</span>children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> component2 <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  component2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  component2<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>Component()</code>当然可以是任何<code>Component</code>的子类。</p><p>每个<code>Component</code>都有几个可选实现的方法，这些方法被<code>FlameGame</code>类使用。</p><h3 id="组件生命周期" tabindex="-1"><a class="header-anchor" href="#组件生命周期"><span>组件生命周期</span></a></h3><p><img src="`+l+`" alt=""></p><p>每当屏幕尺寸改变时，或者当此组件添加到组件树中时（在<code>onMount</code>之前），都会调用<code>onGameResize</code>方法。</p><p><code>onParentResize</code>方法也类似：它同样在组件挂载到组件树时被调用，并且每当当前组件的父组件更改其大小时也会被调用。</p><p>可以通过重写<code>onRemove</code>方法，在组件从游戏中移除之前运行代码，即使该组件通过父组件的移除方法和<code>Component</code>移除方法都被移除，该方法也只会运行一次。</p><p>可以通过重写<code>onLoad</code>方法来运行组件的异步初始化代码，例如加载一张图片。此方法在<code>onGameResize</code>和<code>onMount</code>之前执行。此方法在整个组件生命周期中保证只被执行一次，因此可以将其视为“异步构造函数”。</p><p>每当组件挂载到游戏树时就会调用<code>onMount</code>方法。这意味着你不应该在此处初始化 <code>late final</code> 变量，因为该方法在组件的整个生命周期中可能会被多次调用。此方法只会在其父组件已经挂载的情况下运行。如果父组件尚未挂载，则此方法会进入队列等待（这不会影响游戏引擎的其他部分）。</p><p>可以通过重写<code>onChildrenChanged</code>方法来检测父组件子组件的变化。每当有子组件被添加到或从父组件中移除时（包括子组件更改其父组件的情况），都会调用此方法。其参数包含目标子组件及其变化类型（“added” 或 “removed”）。</p><p>可以通过一系列的getter来检查组件生命周期状态：</p><ul><li><code>isLoaded</code>: 返回一个bool，表示当前加载状态。</li><li><code>loaded</code>: 返回一个future，在组件完成加载后会完成。</li><li><code>isMounted</code>: 返回一个bool，表示当前挂载状态。</li><li><code>mounted</code>: 返回一个future，在组件完成挂载后会完成。</li><li><code>isRemoved</code>: 返回一个bool，表示当前移除状态。</li><li><code>removed</code>: 返回一个future，在组件被移除后会完成。</li></ul><h3 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级"><span>优先级</span></a></h3><p>在Flame中，每个<code>Component</code>都有一个<code>int priority</code>属性，决定了它在其父组件的子组件中的排序顺序。有时这被称为其他语言和框架中的<code>z-index</code>。<code>priority</code>设置得越高，组件在屏幕上显示的位置就越靠前，因为它会渲染在其之前渲染的所有优先级较低的组件之上。</p><p>如果你添加了两个组件，并将其中一个组件的优先级设为1，那么该组件将在另一个组件之上渲染（如果它们重叠），因为默认优先级是0。</p><p>所有组件都将<code>priority</code>作为命名参数接收，因此如果你在编译时知道你的组件的优先级，则可以在构造函数中传入它。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> myComponent <span class="token operator">=</span> <span class="token class-name">PositionComponent</span><span class="token punctuation">(</span>priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>myComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要更新一个组件的优先级，需要将其设置为新值，例如 <code>component.priority = 2</code>，它将在渲染阶段之前的当前帧中被更新。</p><p>在以下示例中，我们首先将组件初始化为优先级1，然后当用户点击该组件时，我们将它的优先级更改为2：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">TapCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>priority<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onTapDown</span><span class="token punctuation">(</span><span class="token class-name">TapDownEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    priority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件的可组合性" tabindex="-1"><a class="header-anchor" href="#组件的可组合性"><span>组件的可组合性</span></a></h3><p>有时将其他组件包装在你的组件内部是有用的。例如，通过层次结构对视觉组件进行分组。你可以在任何组件中添加子组件，例如<code>PositionComponent</code>。</p><p>当你在一个组件中有子组件时，每当父组件被更新和渲染时，所有子组件都会在同一条件下被渲染和更新。</p><p>由包装器处理两个组件可见性的用法示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">GameOverPanel</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  bool visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">Image</span> spriteImage<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">GameOverPanel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>spriteImage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> gameOverText <span class="token operator">=</span> <span class="token class-name">GameOverText</span><span class="token punctuation">(</span>spriteImage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GameOverText是Component</span></span>
<span class="line">    <span class="token keyword">final</span> gameOverButton <span class="token operator">=</span> <span class="token class-name">GameOverButton</span><span class="token punctuation">(</span>spriteImage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GameOverRestart是SpriteComponent</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>gameOverText<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>gameOverButton<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>visible<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 如果不可见，则不会渲染任何子组件</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有两种方法可以在你的组件中添加子组件。首先，你有<code>add()</code>、<code>addAll()</code>和<code>addToParent()</code>方法，可以在游戏中的任何时候使用这些方法。传统上，子组件将在组件的<code>onLoad()</code>方法中创建并添加，但在游戏过程中添加新子组件也很常见。</p><p>第二种方法是使用组件构造函数中的<code>children:</code>参数。这种方法更接近于其他语言和框架的标准API：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token class-name">PositionComponent</span><span class="token punctuation">(</span></span>
<span class="line">        position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        children<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token class-name">HighScoreDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token class-name">HitPointsDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token class-name">FpsComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种方法可以自由组合：构造函数中的子组件将首先被添加，然后是任何其他子组件。</p><p>需要注意的是，通过上述任一方法添加的子组件只有在加载并挂载后才会保证可用。我们只能保证它们将以与添加顺序相同的顺序出现在子组件列表中。</p><h3 id="从组件访问world" tabindex="-1"><a class="header-anchor" href="#从组件访问world"><span>从组件访问World</span></a></h3><p>如果一个组件有一个<code>World</code>作为祖先，并且需要访问该<code>World</code>对象，则可以使用<code>HasWorldReference</code>混入。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token keyword">with</span> <span class="token class-name">HasWorldReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyWorld</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">TapCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onTapDown</span><span class="token punctuation">(</span><span class="token class-name">TapDownEvent</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// world类型为MyWorld</span></span>
<span class="line">    world<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">AnotherComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你尝试从没有正确类型的<code>World</code>祖先的组件访问<code>world</code>，将抛出断言错误。</p><h3 id="确保一个组件具有给定的父组件" tabindex="-1"><a class="header-anchor" href="#确保一个组件具有给定的父组件"><span>确保一个组件具有给定的父组件</span></a></h3><p>当组件需要添加到特定的父组件类型时，可以使用<code>ParentIsA</code>混入来强制执行强类型父组件。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token keyword">with</span> <span class="token class-name">ParentIsA</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyParentComponent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// parent是MyParentComponent类型</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>myValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你尝试将<code>MyComponent</code>添加到不是<code>MyParentComponent</code>的父组件，将抛出断言错误。</p><h3 id="确保一个组件具有给定的祖先" tabindex="-1"><a class="header-anchor" href="#确保一个组件具有给定的祖先"><span>确保一个组件具有给定的祖先</span></a></h3><p>当组件需要在其组件树中的某个位置具有特定类型的祖先时，可以使用<code>HasAncestor</code>混入来强制执行该关系。</p><p>该混入暴露了类型为给定类型的<code>ancestor</code>字段。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token keyword">with</span> <span class="token class-name">HasAncestor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyAncestorComponent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ancestor是MyAncestorComponent类型。</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">.</span>myValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你尝试将<code>MyComponent</code>添加到不包含<code>MyAncestorComponent</code>的树中，将抛出断言错误。</p><h3 id="组件键" tabindex="-1"><a class="header-anchor" href="#组件键"><span>组件键</span></a></h3><p>组件可以具有一个标识符键，该键允许它们从组件树中的任何位置检索到。</p><p>要使用密钥注册组件，只需在组件构造函数的<code>key</code>参数中传递一个密钥：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> myComponent <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">(</span></span>
<span class="line">  key<span class="token punctuation">:</span> <span class="token class-name">ComponentKey</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在组件树的不同位置检索它：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">flameGame<span class="token punctuation">.</span><span class="token function">findByKey</span><span class="token punctuation">(</span><span class="token class-name">ComponentKey</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>有两种类型的键，<code>unique</code>和<code>named</code>。唯一键基于密钥实例的相等性，这意味着：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> key <span class="token operator">=</span> <span class="token class-name">ComponentKey</span><span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> key2 <span class="token operator">=</span> key<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>key <span class="token operator">==</span> key2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token class-name">ComponentKey</span><span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命名键基于其接收的名称，因此：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> key1 <span class="token operator">=</span> <span class="token class-name">ComponentKey</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> key2 <span class="token operator">=</span> <span class="token class-name">ComponentKey</span><span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>key1 <span class="token operator">==</span> key2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用命名键时，还可以使用<code>findByKeyName</code>辅助函数来检索组件。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">flameGame<span class="token punctuation">.</span><span class="token function">findByKeyName</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查询子组件" tabindex="-1"><a class="header-anchor" href="#查询子组件"><span>查询子组件</span></a></h3><p>添加到组件的子组件位于一个名为<code>children</code>的<code>QueryableOrderedSet</code>中。要查询集合中的特定类型组件，可以使用<code>query&lt;T&gt;()</code>函数。默认情况下，<code>children</code>集合的<code>strictMode</code>为<code>false</code>，但如果将其设置为<code>true</code>，则必须使用<code>children.register</code>注册查询后才能使用。</p><p>如果在编译时知道将运行某种类型的查询，则建议注册该查询，无论<code>strictMode</code>是设置为<code>true</code>还是<code>false</code>，因为这样做可以获得一些性能优势。通常在<code>onLoad</code>中进行注册调用。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token metadata function">@override</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  children<span class="token punctuation">.</span>register<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PositionComponent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例中注册了一个针对<code>PositionComponent</code>类型的查询，下面是一个如何查询已注册组件类型的示例。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token metadata function">@override</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> allPositionComponents <span class="token operator">=</span> children<span class="token punctuation">.</span>query<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PositionComponent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询屏幕特定点的组件" tabindex="-1"><a class="header-anchor" href="#查询屏幕特定点的组件"><span>查询屏幕特定点的组件</span></a></h3><p>方法<code>componentsAtPoint()</code>允许检查哪个组件在屏幕上的某个点被渲染。返回值是一个组件迭代器，还可以通过提供一个可写的<code>List&lt;Vector2&gt;</code>作为第二个参数来获取每个组件本地坐标空间中的初始点坐标。</p><p>该迭代器按从前到后的顺序检索组件，即首先是最前面的组件，然后是后面的组件。</p><p>此方法只能返回实现<code>containsLocalPoint()</code>方法的组件。<code>PositionComponent</code>（这是许多Flame组件的基础类）提供了这样的实现。但是，如果你定义了一个从<code>Component</code>派生的自定义类，则需要自己实现<code>containsLocalPoint()</code>方法。</p><p>以下是<code>componentsAtPoint()</code>使用的示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">onDragUpdate</span><span class="token punctuation">(</span><span class="token class-name">DragUpdateInfo</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  game<span class="token punctuation">.</span><span class="token function">componentsAtPoint</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>widget<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">is</span> <span class="token class-name">DropTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      component<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件的可见性" tabindex="-1"><a class="header-anchor" href="#组件的可见性"><span>组件的可见性</span></a></h3><p>隐藏或显示组件的推荐方法通常是使用<code>add</code>和<code>remove</code>方法从树中添加或移除它。</p><p>然而，从树中添加和移除组件会触发该组件的生命周期步骤（例如调用<code>onRemove</code>和<code>onMount</code>）。这是一个异步过程，并且需要注意确保在快速连续地移除和添加组件之前组件已经完成移除。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">/// 隐藏或显示组件的一个示例</span></span>
<span class="line"><span class="token comment">/// 通过快速连续地添加和移除子组件来处理</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 先等待 [removed] future 完成，以防万一组件仍在被移除过程中。</span></span>
<span class="line">  <span class="token keyword">await</span> myChildComponent<span class="token punctuation">.</span>removed<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">add</span><span class="token punctuation">(</span>myChildComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token keyword">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">remove</span><span class="token punctuation">(</span>myChildComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些行为并不总是理想。</p><p>另一种显示和隐藏组件的方法是使用<code>HasVisibility</code> mixin，该mixin可以用于任何继承自<code>Component</code>的类。此mixin引入了<code>isVisible</code>属性。只需将<code>isVisible</code>设置为<code>false</code>即可隐藏组件，并将其重新设置为<code>true</code>以再次显示它而无需从树中移除它。这会影响组件及其所有后代（子组件）的可见性。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">/// 实现 HasVisibility 的示例</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">HasVisibility</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/// 使用 isVisible 属性的示例</span></span>
<span class="line"><span class="token keyword">final</span> myComponent <span class="token operator">=</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span>myComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">myComponent<span class="token punctuation">.</span>isVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mixin仅影响组件是否被渲染，而不会影响其他行为。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">重要！即使组件不可见，它仍然在树中并且将继续接收\`update\`和其他生命周期事件的调用。它仍然会响应输入事件，并且会与其他组件交互，例如碰撞检测等。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>mixin通过防止调用<code>renderTree</code>方法来实现这一点，因此如果重写了<code>renderTree</code>，应包含对<code>isVisible</code>的手动检查以保留此功能。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">HasVisibility</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">renderTree</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 检查可见性</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>isVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 自定义代码</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 继续渲染树</span></span>
<span class="line">      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">renderTree</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="positioncomponent" tabindex="-1"><a class="header-anchor" href="#positioncomponent"><span>PositionComponent</span></a></h2><p>此类代表屏幕上一个带有位置的对象，可以是浮动矩形、旋转精灵或具有位置和大小的任何其他内容。如果向其添加子组件，它还可以代表一组带有位置的组件。</p><p><code>PositionComponent</code>的基础是它有一个<code>position</code>（位置）、<code>size</code>（尺寸）、<code>scale</code>（缩放）、<code>angle</code>（角度）和<code>anchor</code>（锚点），这些属性决定了组件是如何渲染的。</p><h3 id="位置" tabindex="-1"><a class="header-anchor" href="#位置"><span>位置</span></a></h3><p><code>position</code>是一个<code>Vector2</code>，表示该组件的锚点相对于其父级的位置；如果父级是<code>FlameGame</code>，则相对于视口。</p><h3 id="尺寸" tabindex="-1"><a class="header-anchor" href="#尺寸"><span>尺寸</span></a></h3><p><code>size</code>是在相机缩放级别为1.0（无缩放，默认）时组件的尺寸。<code>size</code>与组件的父级无关。</p><h3 id="缩放" tabindex="-1"><a class="header-anchor" href="#缩放"><span>缩放</span></a></h3><p><code>scale</code>表示组件及其子组件应被缩放的比例。由于它是一个<code>Vector2</code>，可以通过改变<code>x</code>和<code>y</code>来实现统一缩放，也可以通过改变<code>x</code>或<code>y</code>不同的比例来实现非均匀缩放。</p><h3 id="角度" tabindex="-1"><a class="header-anchor" href="#角度"><span>角度</span></a></h3><p><code>angle</code>是相对于父级角度的旋转角度，用双精度浮点数表示弧度。</p><h3 id="本征角度-native-angle" tabindex="-1"><a class="header-anchor" href="#本征角度-native-angle"><span>本征角度（Native Angle）</span></a></h3><p><code>nativeAngle</code>是一个以弧度为单位的角度，顺时针方向测量，表示组件默认的方向。当<a href="#angle">angle</a>为零时，可以用来定义组件面向的方向。</p><p>这在让基于精灵的组件朝向特定目标时特别有用。如果精灵原始图像不是朝向正上方或北方，那么为了使组件正确地朝向目标，计算出的角度将需要一些偏移量。在这种情况下，<code>nativeAngle</code>可用于告知组件原始图像是朝向哪个方向。</p><p>例如，一个子弹图像朝向东方。在这种情况下，可以将<code>nativeAngle</code>设置为π/2弧度。下面是一些常见的方向及其对应的本征角度值。</p><table><thead><tr><th>方向</th><th>本征角度（Native Angle）</th><th>度数</th></tr></thead><tbody><tr><td>上/北</td><td>0</td><td>0</td></tr><tr><td>下/南</td><td>π 或 -π</td><td>180 或 -180</td></tr><tr><td>左/西</td><td>-π/2</td><td>-90</td></tr><tr><td>右/东</td><td>π/2</td><td>90</td></tr></tbody></table><h3 id="锚点-anchor" tabindex="-1"><a class="header-anchor" href="#锚点-anchor"><span>锚点（Anchor）</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">:sources: ../flame/examples</span>
<span class="line">:page: anchor</span>
<span class="line">:show: widget code infobox</span>
<span class="line">此示例显示更改父组件（红色）和子组件（蓝色）的 \`anchor\` 点的效果。点击它们可以循环切换锚点位置。请注意，子组件的局部位置始终为 (0, 0)。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>anchor</code> 表示从组件的何处定义其位置和旋转（默认是<code>Anchor.topLeft</code>）。因此，如果将锚点设置为 <code>Anchor.center</code>，那么组件在屏幕上的位置将在组件中心，并且如果应用了角度，则会绕该锚点旋转，即在这种情况下绕组件中心旋转。你可以将其视为Flame“抓住”组件的内部某一点。</p><p>当查询组件的 <code>position</code> 或 <code>absolutePosition</code> 时，返回的坐标是组件锚点的位置。如果你想找到一个不是实际 <code>anchor</code> 点的具体锚点位置，可以使用 <code>positionOfAnchor</code> 和 <code>absolutePositionOfAnchor</code> 方法。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> comp <span class="token operator">=</span> <span class="token class-name">PositionComponent</span><span class="token punctuation">(</span></span>
<span class="line">  size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 返回 (0,0)</span></span>
<span class="line"><span class="token keyword">final</span> p1 <span class="token operator">=</span> component<span class="token punctuation">.</span>position<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 返回 (10, 10)</span></span>
<span class="line"><span class="token keyword">final</span> p2 <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">positionOfAnchor</span><span class="token punctuation">(</span><span class="token class-name">Anchor</span><span class="token punctuation">.</span>bottomRight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>anchor</code> 时的一个常见误区是将其误认为子组件的附加点。例如，将父组件的 <code>anchor</code> 设置为 <code>Anchor.center</code> 并不意味着子组件会相对于父组件的中心进行定位。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">子组件的局部原点始终是其父组件的左上角，与它们的 \`anchor\` 值无关。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="positioncomponent-子组件" tabindex="-1"><a class="header-anchor" href="#positioncomponent-子组件"><span>PositionComponent 子组件</span></a></h3><p><code>PositionComponent</code> 的所有子组件都将相对于父组件进行变换，这意味着 <code>position</code>、<code>angle</code> 和 <code>scale</code> 将相对于父组件的状态。因此，如果你想将一个子组件定位在父组件的中心，可以这样做：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token metadata function">@override</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> parent <span class="token operator">=</span> <span class="token class-name">PositionComponent</span><span class="token punctuation">(</span></span>
<span class="line">    position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> child <span class="token operator">=</span> <span class="token class-name">PositionComponent</span><span class="token punctuation">(</span></span>
<span class="line">    position<span class="token punctuation">:</span> parent<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  parent<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请记住，大多数在屏幕上渲染的组件都是 <code>PositionComponent</code>，因此该模式也可以用于例如 <a href="#spritecomponent">SpriteComponent</a> 和 <a href="#spriteanimationcomponent">SpriteAnimationComponent</a>。</p><h3 id="渲染-positioncomponent" tabindex="-1"><a class="header-anchor" href="#渲染-positioncomponent"><span>渲染 PositionComponent</span></a></h3><p>当为继承自 <code>PositionComponent</code> 的组件实现 <code>render</code> 方法时，请从左上角 (0.0) 开始渲染。你的 <code>render</code> 方法不应处理组件在屏幕上的渲染位置。要处理渲染的位置和方式，请使用 <code>position</code>、<code>angle</code> 和 <code>anchor</code> 属性，Flame 将自动处理其余部分。</p><p>如果你想知道组件边界框在屏幕上的位置，可以使用 <code>toRect</code> 方法。</p><p>如果你想改变组件的渲染方向，也可以使用 <code>flipHorizontally()</code> 和 <code>flipVertically()</code> 来翻转在 <code>render(Canvas canvas)</code> 中绘制的所有内容，绕锚点进行。这些方法适用于所有 <code>PositionComponent</code> 对象，在 <code>SpriteComponent</code> 和 <code>SpriteAnimationComponent</code> 上特别有用。</p><p>如果你希望围绕中心翻转组件而不更改锚点为 <code>Anchor.center</code>，可以使用 <code>flipHorizontallyAroundCenter()</code> 和 <code>flipVerticallyAroundCenter()</code>。</p><h2 id="spritecomponent" tabindex="-1"><a class="header-anchor" href="#spritecomponent"><span>SpriteComponent</span></a></h2><p>最常见的 <code>PositionComponent</code> 实现是 <code>SpriteComponent</code>，可以通过 <code>Sprite</code> 创建：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/components/component.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SpriteComponent</span> player<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> sprite <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Sprite</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> size <span class="token operator">=</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">128.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> player <span class="token operator">=</span> <span class="token class-name">SpriteComponent</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> size<span class="token punctuation">,</span> sprite<span class="token punctuation">:</span> sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 默认为 Vector2(0.0, 0.0)，也可以在构造函数中设置</span></span>
<span class="line">    player<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 默认为 0，也可以在构造函数中设置</span></span>
<span class="line">    player<span class="token punctuation">.</span>angle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 添加组件</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spriteanimationcomponent" tabindex="-1"><a class="header-anchor" href="#spriteanimationcomponent"><span>SpriteAnimationComponent</span></a></h2><p><code>SpriteAnimationComponent</code> 类用于表示具有运行单个循环动画的精灵图的组件。</p><p>这将创建一个简单的三帧动画，使用三个不同的图像：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token metadata function">@override</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> sprites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Sprite</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player_</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">i</span></span><span class="token string">.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> animation <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">spriteList</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>sprites<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    stepTime<span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> <span class="token class-name">SpriteAnimationComponent</span><span class="token punctuation">(</span></span>
<span class="line">    animation<span class="token punctuation">:</span> animation<span class="token punctuation">,</span></span>
<span class="line">    size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">64.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,130)),a("p",null,[n[1]||(n[1]=s("如果你有精灵图集，可以使用 ")),n[2]||(n[2]=a("code",null,"SpriteAnimationData",-1)),n[3]||(n[3]=s(" 类的 ")),n[4]||(n[4]=a("code",null,"sequenced",-1)),n[5]||(n[5]=s(" 构造函数（详情请参阅 ")),t(p,{to:"/guide/flame/rendering/images.html#animation"},{default:o(()=>n[0]||(n[0]=[s("Images > Animation")])),_:1}),n[6]||(n[6]=s("）："))]),n[14]||(n[14]=e(`<div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token metadata function">@override</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> size <span class="token operator">=</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">64.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> data <span class="token operator">=</span> <span class="token class-name">SpriteAnimationData</span><span class="token punctuation">.</span><span class="token function">sequenced</span><span class="token punctuation">(</span></span>
<span class="line">    textureSize<span class="token punctuation">:</span> size<span class="token punctuation">,</span></span>
<span class="line">    amount<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> <span class="token class-name">SpriteAnimationComponent</span><span class="token punctuation">.</span><span class="token function">fromFrameData</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    data<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有动画组件内部维护一个 <code>SpriteAnimationTicker</code>，用于驱动 <code>SpriteAnimation</code>。这使得多个组件可以共享同一个动画对象。</p><p>例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> sprites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/*你的精灵列表*/</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">spriteList</span><span class="token punctuation">(</span>sprites<span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> animationTicker <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 或者你也可以让动画对象为你创建一个。</span></span>
<span class="line"><span class="token keyword">final</span> animationTicker <span class="token operator">=</span> animation<span class="token punctuation">.</span><span class="token function">createTicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新的 ticker</span></span>
<span class="line"></span>
<span class="line">animationTicker<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要监听动画完成（到达最后一帧且不循环）事件，可以使用 <code>animationTicker.completed</code>。</p><p>例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">await</span> animationTicker<span class="token punctuation">.</span>completed<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 或者替代地</span></span>
<span class="line"></span>
<span class="line">animationTicker<span class="token punctuation">.</span>completed<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<code>SpriteAnimationTicker</code> 还具有以下可选的回调事件：<code>onStart</code>、<code>onFrame</code> 和 <code>onComplete</code>。要监听这些事件，可以这样做：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> animationTicker <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span>onStart <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 启动时执行某些操作。</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> animationTicker <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span>onComplete <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 完成时执行某些操作。</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> animationTicker <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span>onFrame <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 对于第二帧执行某些操作。</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spriteanimationgroupcomponent" tabindex="-1"><a class="header-anchor" href="#spriteanimationgroupcomponent"><span>SpriteAnimationGroupComponent</span></a></h2><p><code>SpriteAnimationGroupComponent</code> 是 <code>SpriteAnimationComponent</code> 的一个简单包装器，使你的组件能够持有多个动画并在运行时更改当前播放的动画。由于这个组件只是一个包装器，事件监听器可以按照 <a href="#spriteanimationcomponent">SpriteAnimationComponent</a> 中所述的方式实现。</p><p>使用方式非常类似于 <code>SpriteAnimationComponent</code>，但不是用单个动画初始化，而是接收一个键为泛型类型 <code>T</code>、值为 <code>SpriteAnimation</code> 的 Map 和当前动画。</p><p>例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">RobotState</span> <span class="token punctuation">{</span></span>
<span class="line">  idle<span class="token punctuation">,</span></span>
<span class="line">  running<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> running <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadSpriteAnimation</span><span class="token punctuation">(</span><span class="token comment">/* 省略 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> idle <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadSpriteAnimation</span><span class="token punctuation">(</span><span class="token comment">/* 省略 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> robot <span class="token operator">=</span> <span class="token class-name">SpriteAnimationGroupComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RobotState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span></span>
<span class="line">  animations<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">RobotState</span><span class="token punctuation">.</span>running<span class="token punctuation">:</span> running<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">RobotState</span><span class="token punctuation">.</span>idle<span class="token punctuation">:</span> idle<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  current<span class="token punctuation">:</span> <span class="token class-name">RobotState</span><span class="token punctuation">.</span>idle<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 将当前动画更改为 &quot;running&quot;</span></span>
<span class="line">robot<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token class-name">RobotState</span><span class="token punctuation">.</span>running<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于这个组件处理多个 <code>SpriteAnimation</code>，自然需要相同数量的动画 ticker 来驱动所有这些动画。使用 <code>animationsTickers</code> getter 可以访问每个动画状态对应的 ticker 映射。这在你想要为 <code>onStart</code>、<code>onComplete</code> 和 <code>onFrame</code> 注册回调时非常有用。</p><p>例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">RobotState</span> <span class="token punctuation">{</span> idle<span class="token punctuation">,</span> running<span class="token punctuation">,</span> jump <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> running <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadSpriteAnimation</span><span class="token punctuation">(</span><span class="token comment">/* 省略 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> idle <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadSpriteAnimation</span><span class="token punctuation">(</span><span class="token comment">/* 省略 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> robot <span class="token operator">=</span> <span class="token class-name">SpriteAnimationGroupComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RobotState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span></span>
<span class="line">  animations<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">RobotState</span><span class="token punctuation">.</span>running<span class="token punctuation">:</span> running<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">RobotState</span><span class="token punctuation">.</span>idle<span class="token punctuation">:</span> idle<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  current<span class="token punctuation">:</span> <span class="token class-name">RobotState</span><span class="token punctuation">.</span>idle<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">robot<span class="token punctuation">.</span>animationTickers<span class="token operator">?</span><span class="token punctuation">[</span><span class="token class-name">RobotState</span><span class="token punctuation">.</span>running<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span>onStart <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 运动动画启动时执行某些操作。</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">robot<span class="token punctuation">.</span>animationTickers<span class="token operator">?</span><span class="token punctuation">[</span><span class="token class-name">RobotState</span><span class="token punctuation">.</span>jump<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span>onStart <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 跳跃动画启动时执行某些操作。</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">robot<span class="token punctuation">.</span>animationTickers<span class="token operator">?</span><span class="token punctuation">[</span><span class="token class-name">RobotState</span><span class="token punctuation">.</span>jump<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span>onComplete <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 跳跃动画完成时执行某些操作。</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">robot<span class="token punctuation">.</span>animationTickers<span class="token operator">?</span><span class="token punctuation">[</span><span class="token class-name">RobotState</span><span class="token punctuation">.</span>idle<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span>onFrame <span class="token operator">=</span> <span class="token punctuation">(</span>currentIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 基于空闲动画的当前帧索引执行某些操作。</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spritegroupcomponent" tabindex="-1"><a class="header-anchor" href="#spritegroupcomponent"><span>SpriteGroupComponent</span></a></h2><p><code>SpriteGroupComponent</code> 类似于其动画对应版本，但专门用于精灵。</p><p>例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">PlayerComponent</span> <span class="token keyword">extends</span> <span class="token class-name">SpriteGroupComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonState</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token keyword">with</span> <span class="token class-name">HasGameReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpriteGroupExample</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">TapCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span><span class="token operator">?</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> pressedSprite <span class="token operator">=</span> <span class="token keyword">await</span> gameRef<span class="token punctuation">.</span><span class="token function">loadSprite</span><span class="token punctuation">(</span><span class="token comment">/* 省略 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> unpressedSprite <span class="token operator">=</span> <span class="token keyword">await</span> gameRef<span class="token punctuation">.</span><span class="token function">loadSprite</span><span class="token punctuation">(</span><span class="token comment">/* 省略 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    sprites <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">ButtonState</span><span class="token punctuation">.</span>pressed<span class="token punctuation">:</span> pressedSprite<span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">ButtonState</span><span class="token punctuation">.</span>unpressed<span class="token punctuation">:</span> unpressedSprite<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    current <span class="token operator">=</span> <span class="token class-name">ButtonState</span><span class="token punctuation">.</span>unpressed<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// tap 方法处理程序省略...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spawncomponent" tabindex="-1"><a class="header-anchor" href="#spawncomponent"><span>SpawnComponent</span></a></h2><p>这是一个非视觉组件，用于在其父组件中生成其他组件。非常适合需要在某个区域内随机生成敌人或增益道具的情况。</p><p><code>SpawnComponent</code> 接收一个工厂函数用于创建新组件和一个生成这些组件的区域（或边界）。</p><p>对于区域，可以使用 <code>Circle</code>、<code>Rectangle</code> 或 <code>Polygon</code> 类，并且如果只想沿着形状的边缘生成组件，请将 <code>within</code> 参数设置为 false（默认为 true）。</p><p>例如，下面会在定义的圆内每 0.5 秒随机生成一个新的 <code>MyComponent</code>：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">SpawnComponent</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">factory</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  period<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line">  area<span class="token punctuation">:</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想让生成速率固定，可以使用 <code>SpawnComponent.periodRange</code> 构造函数，并指定 <code>minPeriod</code> 和 <code>maxPeriod</code> 参数。下面的例子会在圆内随机生成组件，并且每次新生成的组件之间的时间间隔在 0.5 到 10 秒之间：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">SpawnComponent</span><span class="token punctuation">.</span><span class="token function">periodRange</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">factory</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  minPeriod<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line">  maxPeriod<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">  area<span class="token punctuation">:</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想在 <code>factory</code> 函数中自行设置位置，可以在构造函数中将 <code>selfPositioning</code> 设置为 true，并忽略 <code>area</code> 参数：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">SpawnComponent</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">factory</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token class-name">MyComponent</span><span class="token punctuation">(</span>position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  selfPositioning<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  period<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="svgcomponent" tabindex="-1"><a class="header-anchor" href="#svgcomponent"><span>SvgComponent</span></a></h2><p><strong>注意</strong>：要使用 Flame 中的 SVG，请使用 <a href="https://github.com/flame-engine/flame_svg" target="_blank" rel="noopener noreferrer"><code>flame_svg</code></a> 包。</p><p>此组件使用 <code>Svg</code> 类的实例来表示一个在游戏中渲染 SVG 的组件：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token metadata function">@override</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> svg <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Svg</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;android.svg&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> android <span class="token operator">=</span> <span class="token class-name">SvgComponent</span><span class="token punctuation">.</span><span class="token function">fromSvg</span><span class="token punctuation">(</span></span>
<span class="line">    svg<span class="token punctuation">,</span></span>
<span class="line">    position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parallaxcomponent" tabindex="-1"><a class="header-anchor" href="#parallaxcomponent"><span>ParallaxComponent</span></a></h2><p>该组件用于通过在彼此上方绘制多个透明图像来渲染具有深度感的背景，其中每个图像或动画 (<code>ParallaxRenderer</code>) 都以不同的速度移动。</p><p>原理是当你看向地平线并移动时，较近的对象看起来比远处的对象移动得更快。</p><p>此组件模拟了这种效果，从而实现更逼真的背景效果。</p><p>最简单的 <code>ParallaxComponent</code> 创建方式如下：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token metadata function">@override</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> parallaxComponent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadParallaxComponent</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token class-name">ParallaxImageData</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bg.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ParallaxImageData</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;trees.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">add</span><span class="token punctuation">(</span>parallaxComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SpawnComponent</code> 可以通过实现 <code>onLoad</code> 方法自行加载：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyParallaxComponent</span> <span class="token keyword">extends</span> <span class="token class-name">ParallaxComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyGame</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    parallax <span class="token operator">=</span> <span class="token keyword">await</span> gameRef<span class="token punctuation">.</span><span class="token function">loadParallax</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">      <span class="token class-name">ParallaxImageData</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bg.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">ParallaxImageData</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;trees.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">MyParallaxComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将创建一个静态背景。若要创建移动的视差效果，可以通过设置每个层的速度来实现。</p><p>最简单的设置方式是在 <code>load</code> 辅助函数中指定命名可选参数 <code>baseVelocity</code> 和 <code>velocityMultiplierDelta</code>。例如，如果你想让背景图像沿 X 轴以更快的速度移动（越近的图像速度越快）：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token metadata function">@override</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> parallaxComponent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadParallaxComponent</span><span class="token punctuation">(</span></span>
<span class="line">    _dataList<span class="token punctuation">,</span></span>
<span class="line">    baseVelocity<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    velocityMultiplierDelta<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在任意时间设置 <code>baseSpeed</code> 和 <code>layerDelta</code>，例如角色跳跃或游戏加速时：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token metadata function">@override</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> parallax <span class="token operator">=</span> parallaxComponent<span class="token punctuation">.</span>parallax<span class="token punctuation">;</span></span>
<span class="line">  parallax<span class="token punctuation">.</span>baseSpeed <span class="token operator">=</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  parallax<span class="token punctuation">.</span>velocityMultiplierDelta <span class="token operator">=</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，图像沿底部左对齐，沿 X 轴重复，并按比例缩放以覆盖屏幕高度。如果想更改此行为，例如创建非横向滚动的游戏，则可以为每个 <code>ParallaxRenderer</code> 设置 <code>repeat</code>、<code>alignment</code> 和 <code>fill</code> 参数，并将它们添加到传递给 <code>ParallaxComponent</code> 构造函数的 <code>ParallaxLayer</code> 中。</p><p>高级示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> images <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token function">loadParallaxImage</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;stars.jpg&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">    repeat<span class="token punctuation">:</span> <span class="token class-name">ImageRepeat</span><span class="token punctuation">.</span>repeat<span class="token punctuation">,</span></span>
<span class="line">    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span></span>
<span class="line">    fill<span class="token punctuation">:</span> <span class="token class-name">LayerFill</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">loadParallaxImage</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;planets.jpg&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">    repeat<span class="token punctuation">:</span> <span class="token class-name">ImageRepeat</span><span class="token punctuation">.</span>repeatY<span class="token punctuation">,</span></span>
<span class="line">    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>bottomLeft<span class="token punctuation">,</span></span>
<span class="line">    fill<span class="token punctuation">:</span> <span class="token class-name">LayerFill</span><span class="token punctuation">.</span>none<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">loadParallaxImage</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;dust.jpg&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">    repeat<span class="token punctuation">:</span> <span class="token class-name">ImageRepeat</span><span class="token punctuation">.</span>repeatX<span class="token punctuation">,</span></span>
<span class="line">    alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>topRight<span class="token punctuation">,</span></span>
<span class="line">    fill<span class="token punctuation">:</span> <span class="token class-name">LayerFill</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> layers <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">(</span>image<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">ParallaxLayer</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">await</span> image<span class="token punctuation">,</span></span>
<span class="line">    velocityMultiplier<span class="token punctuation">:</span> images<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> parallaxComponent <span class="token operator">=</span> <span class="token class-name">ParallaxComponent</span><span class="token punctuation">.</span><span class="token function">fromParallax</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token class-name">Parallax</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>layers<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    baseVelocity<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例中星的图像将沿两个轴重复，居中对齐并缩放以覆盖屏幕宽度。</li><li>行星的图像将在 Y 轴上重复，并沿屏幕左下角对齐且不进行缩放。</li><li>灰尘的图像将在 X 轴上重复，右上角对齐并按高度缩放。</li></ul><p>设置完成后将 <code>ParallaxComponent</code> 添加到游戏中的其他组件一样 (<code>game.add(parallaxComponent)</code>)。不要忘记在 <code>pubspec.yaml</code> 中将图像作为资源添加，否则它们不会被找到。此外，Flame 提供了扩展功能来自动使用游戏的图像缓存而不是全局缓存。</p><p>如果需要全屏视差效果，只需省略大小参数，它将采用游戏尺寸，并且会在游戏改变大小或方向时自动调整为全屏。</p><p>Flame 提供两种类型的 <code>ParallaxRenderer</code>：<code>ParallaxImage</code> 和 <code>ParallaxAnimation</code>。其中前者是静态图像渲染器，后者则是基于帧的动画渲染器。还可以通过扩展 <code>ParallaxRenderer</code> 类来自定义渲染器。</p><p>更多示例实现可以在 <a href="https://github.com/flame-engine/flame/tree/main/examples/lib/stories/parallax" target="_blank" rel="noopener noreferrer">examples 目录</a> 中找到。</p><h2 id="形状组件" tabindex="-1"><a class="header-anchor" href="#形状组件"><span>形状组件</span></a></h2><p><code>ShapeComponent</code> 是用于表示可缩放几何形状的基本类。尽管不同的形状有不同的方式来定义外观，但它们都有可以修改的大小和角度，并根据这些属性进行缩放或旋转。</p>`,58)),a("p",null,[n[8]||(n[8]=s("这些形状通常用作工具，以更通用的方式使用几何图形（而不仅仅是与碰撞检测系统一起），例如 ")),t(p,{to:"/guide/flame/collision_detection.html#shapehitbox"},{default:o(()=>n[7]||(n[7]=[s("ShapeHitbox")])),_:1}),n[9]||(n[9]=s("。"))]),n[15]||(n[15]=e(`<h3 id="polygoncomponent" tabindex="-1"><a class="header-anchor" href="#polygoncomponent"><span>PolygonComponent</span></a></h3><p><code>PolygonComponent</code> 是通过在构造函数中给出顶点列表创建的。这个列表将被转换为具有大小的多边形，该大小仍然可以缩放和旋转。</p><p>例如，这将创建一个从 (50, 50) 到 (100, 100)，中心位于 (75, 75) 的正方形：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">PolygonComponent</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PolygonComponent</code> 还可以通过相对顶点列表创建，这些顶点定义为相对于给定大小（通常是预期父级的大小）。</p><p>例如，你可以这样创建一个菱形多边形：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">PolygonComponent</span><span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">      <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 中间顶部墙</span></span>
<span class="line">      <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 中间右侧墙</span></span>
<span class="line">      <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 中间底部墙</span></span>
<span class="line">      <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 中间左侧墙</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在示例中，顶点定义了相对于多边形中心的长度百分比，因此列表中的第一个项 <code>Vector2(0.0, -1.0)</code> 指向边界框的顶部中间。</p><p><img src="`+i+`" alt="如何定义多边形形状的示例"></p><p>在图像中可以看到由紫色箭头形成的多边形是如何被红色箭头定义的。</p><h3 id="rectanglecomponent" tabindex="-1"><a class="header-anchor" href="#rectanglecomponent"><span>RectangleComponent</span></a></h3><p><code>RectangleComponent</code> 的创建方式与 <code>PositionComponent</code> 类似，因为它也有一个边界矩形。</p><p>例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">RectangleComponent</span><span class="token punctuation">(</span></span>
<span class="line">    position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">15.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    angle<span class="token punctuation">:</span> pi<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dart 还有一种创建矩形的优秀方式，即 <code>Rect</code> 类。你可以通过使用 <code>Rectangle.fromRect</code> 工厂函数从 <code>Rect</code> 创建一个 Flame <code>RectangleComponent</code>。如果使用此构造函数，则根据 <code>Rect</code> 调整你的矩形大小。</p><p>以下将创建一个左上角位于 <code>(10, 10)</code>，大小为 <code>(100, 50)</code> 的 <code>RectangleComponent</code>：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">RectangleComponent</span><span class="token punctuation">.</span><span class="token function">fromRect</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Rect</span><span class="token punctuation">.</span><span class="token function">fromLTWH</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以通过定义相对于预期父级大小的关系来创建一个 <code>RectangleComponent</code>。可以使用默认构造函数从位置、大小和角度构建矩形。<code>relation</code> 是一个相对于父级大小的向量，例如 <code>relation</code> 为 <code>Vector2(0.5, 0.8)</code> 将创建一个宽度为父级大小50%，高度为父级大小80% 的矩形。</p><p>以下示例将创建一个大小为 <code>(25.0, 30.0)</code> 并位于 <code>(100, 100)</code> 的 <code>RectangleComponent</code>：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">RectangleComponent</span><span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于正方形是矩形的简化版本，因此还有一个用于创建正方形 <code>RectangleComponent</code> 的构造函数。唯一不同的是 <code>size</code> 参数为 <code>double</code> 而不是 <code>Vector2</code>。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">RectangleComponent</span><span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span></span>
<span class="line">    position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="circlecomponent" tabindex="-1"><a class="header-anchor" href="#circlecomponent"><span>CircleComponent</span></a></h3><p>如果你已知圆的位置和半径，可以使用可选参数 <code>radius</code> 和 <code>position</code> 来设置。</p><p>以下将创建一个中心位于 <code>(100, 100)</code> 半径为5的 <code>CircleComponent</code>，因此大小为 <code>Vector2(10, 10)</code>：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">CircleComponent</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>center<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>relative</code> 构造函数创建一个 <code>CircleComponent</code> 时，可以定义半径相对于由 <code>size</code> 定义的边界框最短边的比例。</p><p>以下示例将结果为一个半径为40（直径80）的 <code>CircleComponent</code>：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">CircleComponent</span><span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="isometrictilemapcomponent" tabindex="-1"><a class="header-anchor" href="#isometrictilemapcomponent"><span>IsometricTileMapComponent</span></a></h2><p>此组件允许你根据由方块构成的笛卡尔矩阵和等距瓦片集渲染一个等距地图。</p><p>使用方法示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// 创建一个瓦片集，块ID将从左到右、然后从上到下自动分配。</span></span>
<span class="line"><span class="token keyword">final</span> tilesetImage <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;tileset.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> tileset <span class="token operator">=</span> <span class="token class-name">SpriteSheet</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> tilesetImage<span class="token punctuation">,</span> srcSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 每个元素是一个块ID，-1表示无内容</span></span>
<span class="line"><span class="token keyword">final</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">IsometricTileMapComponent</span><span class="token punctuation">(</span>tileset<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它还提供了坐标转换的方法，因此你可以处理点击、悬停，在瓦片上方渲染实体，添加选择器等。</p><p>你还可以指定 <code>tileHeight</code>，它是每个方块底部和平面之间的垂直距离。基本上，这是你的方块最前面边缘的高度；通常是方块大小的一半（默认）或四分之一。在下图中可以看到高度以更深的色调标注：</p><p><img src="`+u+'" alt="如何确定 tileHeight 的示例"></p><p>这是一张使用四分之长瓦片地图的示例：</p><p><img src="'+d+`" alt="一个带有选择器的等距地图示例"></p><p>Flame 的示例应用中包含了一个更详细的示例，展示了如何解析坐标以创建选择器。代码可以在<a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/isometric_tile_map_example.dart" target="_blank" rel="noopener noreferrer">这里</a>找到，并且有一个在线版本可以查看<a href="https://examples.flame-engine.org/#/Rendering_Isometric_Tile_Map" target="_blank" rel="noopener noreferrer">这里</a>。</p><h2 id="ninetileboxcomponent" tabindex="-1"><a class="header-anchor" href="#ninetileboxcomponent"><span>NineTileBoxComponent</span></a></h2><p>Nine Tile Box 是使用网格精灵绘制的矩形。</p><p>网格精灵是一个3x3网格，包含9个块，代表四个角、四条边和中间部分。</p><p>四个角以相同大小绘制，四条边沿方向拉伸，中间部分向两个方向展开。</p><p>通过这种方式，你可以创建一个适应各种尺寸的框或矩形。这对于制作面板、对话框、边框等非常有用。</p><p>有关如何使用的详细信息，请参阅示例应用 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/nine_tile_box_example.dart" target="_blank" rel="noopener noreferrer">nine_tile_box</a>。</p><h2 id="custompaintercomponent" tabindex="-1"><a class="header-anchor" href="#custompaintercomponent"><span>CustomPainterComponent</span></a></h2><p><code>CustomPainter</code> 是 Flutter 中用于在应用程序中渲染自定义形状的类，通常与 <code>CustomPaint</code> 小部件一起使用。</p><p>Flame 提供了一个名为 <code>CustomPainterComponent</code> 的组件，可以渲染一个 <code>CustomPainter</code>。它接收一个自定义绘制器并在游戏画布上渲染它。</p><p>这有助于在 Flame 游戏和 Flutter 小部件之间共享自定义渲染逻辑。</p><p>有关如何使用的详细信息，请参阅示例应用 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/widgets/custom_painter_example.dart" target="_blank" rel="noopener noreferrer">custom_painter_component</a>。</p><h2 id="componentsnotifier" tabindex="-1"><a class="header-anchor" href="#componentsnotifier"><span>ComponentsNotifier</span></a></h2><p>大多数情况下，只需访问子组件及其属性即可构建游戏逻辑。</p><p>但有时，响应性可以帮助开发者简化代码并提高质量。为此，Flame 提供了 <code>ComponentsNotifier</code>，它是 <code>ChangeNotifier</code> 的实现，在添加、移除或手动更改组件时通知监听者。</p><p>例如，假设当玩家的生命值为零时要显示“游戏结束”文本。</p><p>为了使组件自动报告新实例的添加或移除，可以将 <code>Notifier</code> 混合到组件类中：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">SpriteComponent</span> <span class="token keyword">with</span> <span class="token class-name">Notifier</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后使用 <code>FlameGame</code> 的 <code>componentsNotifier</code> 方法来监听该组件的变化：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  int lives <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> playerNotifier <span class="token operator">=</span> componentsNotifier<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">final</span> player <span class="token operator">=</span> playerNotifier<span class="token punctuation">.</span>single<span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            lives<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>lives <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">GameOverComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Notifier</code> 组件也可以手动通知其监听者发生了变化。扩展上面的示例，制作一个当玩家生命值低于一半时闪烁的HUD组件。为此，需要让 <code>Player</code> 组件手动通知更改：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">SpriteComponent</span> <span class="token keyword">with</span> <span class="token class-name">Notifier</span> <span class="token punctuation">{</span></span>
<span class="line">  double health <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">takeHit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    health <span class="token operator">-=</span> <span class="token number">.1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>health <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>health <span class="token operator">&lt;=</span> <span class="token number">.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后HUD组件可能如下所示：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Hud</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">HasGameRef</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> playerNotifier <span class="token operator">=</span> gameRef<span class="token punctuation">.</span>componentsNotifier<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">final</span> player <span class="token operator">=</span> playerNotifier<span class="token punctuation">.</span>single<span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>player <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>player<span class="token punctuation">.</span>health <span class="token operator">&lt;=</span> <span class="token number">.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BlinkEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ComponentsNotifier</code> 还可以用于在 <code>FlameGame</code> 中状态更改时重建小部件。为此，Flame 提供了 <code>ComponentsNotifierBuilder</code> 小部件。</p><p>有关其使用的示例，请参阅运行中的示例 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/components/components_notifier_example.dart" target="_blank" rel="noopener noreferrer">here</a>。</p><h2 id="clipcomponent" tabindex="-1"><a class="header-anchor" href="#clipcomponent"><span>ClipComponent</span></a></h2><p><code>ClipComponent</code> 是一个组件，它会将画布裁剪到其大小和形状。这意味着如果该组件本身或 <code>ClipComponent</code> 的任何子组件在其边界之外渲染，则不会显示超出部分。</p><p><code>ClipComponent</code> 接收一个构建函数，该函数应返回根据其大小定义裁剪区域的 <code>Shape</code>。</p><p>为了方便使用此组件，提供了三个工厂方法以提供常见的形状：</p><ul><li><code>ClipComponent.rectangle</code>: 根据其大小将区域裁剪成矩形。</li><li><code>ClipComponent.circle</code>: 根据其大小将区域裁剪成圆形。</li><li><code>ClipComponent.polygon</code>: 根据构造函数接收到的点将区域裁剪成多边形。</li></ul><p>有关如何使用的详细信息，请参阅示例应用 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/components/clip_component_example.dart" target="_blank" rel="noopener noreferrer">clip_component</a>。</p><h2 id="effects" tabindex="-1"><a class="header-anchor" href="#effects"><span>Effects</span></a></h2>`,71)),a("p",null,[n[11]||(n[11]=s("Flame 提供了一组可以应用于某些类型组件的效果，这些效果可用于动画组件的某些属性，如位置或尺寸。 有关这些效果的列表，请参阅")),t(p,{to:"/guide/flame/effects.html"},{default:o(()=>n[10]||(n[10]=[s("此处")])),_:1}),n[12]||(n[12]=s("。"))]),n[16]||(n[16]=e('<p>运行中的效果示例可以在<a href="https://github.com/flame-engine/flame/tree/main/examples/lib/stories/effects" target="_blank" rel="noopener noreferrer">这里</a>找到。</p><h2 id="不使用-flamegame-时" tabindex="-1"><a class="header-anchor" href="#不使用-flamegame-时"><span>不使用 <code>FlameGame</code> 时</span></a></h2><p>如果不使用 <code>FlameGame</code>，请记住所有组件都需要在每次游戏更新时进行更新。这使组件能够执行内部处理并更新其状态。</p><p>例如，在所有基于 <code>SpriteAnimation</code> 的组件中的 <code>SpriteAnimationTicker</code> 需要对动画对象进行计时以决定下一个要显示的动画帧。不使用 <code>FlameGame</code> 时，可以通过手动调用 <code>component.update()</code> 来实现。这也意味着，如果正在实现自己的基于精灵动画的组件，可以直接使用 <code>SpriteAnimationTicker</code> 来更新 <code>SpriteAnimation</code>。</p>',4))])}const w=r(b,[["render",h],["__file","components.qwen.html.vue"]]),C=JSON.parse('{"path":"/guide/flame/components.qwen.html","title":"组件","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"组件","slug":"组件-1","link":"#组件-1","children":[{"level":3,"title":"组件生命周期","slug":"组件生命周期","link":"#组件生命周期","children":[]},{"level":3,"title":"优先级","slug":"优先级","link":"#优先级","children":[]},{"level":3,"title":"组件的可组合性","slug":"组件的可组合性","link":"#组件的可组合性","children":[]},{"level":3,"title":"从组件访问World","slug":"从组件访问world","link":"#从组件访问world","children":[]},{"level":3,"title":"确保一个组件具有给定的父组件","slug":"确保一个组件具有给定的父组件","link":"#确保一个组件具有给定的父组件","children":[]},{"level":3,"title":"确保一个组件具有给定的祖先","slug":"确保一个组件具有给定的祖先","link":"#确保一个组件具有给定的祖先","children":[]},{"level":3,"title":"组件键","slug":"组件键","link":"#组件键","children":[]},{"level":3,"title":"查询子组件","slug":"查询子组件","link":"#查询子组件","children":[]},{"level":3,"title":"查询屏幕特定点的组件","slug":"查询屏幕特定点的组件","link":"#查询屏幕特定点的组件","children":[]},{"level":3,"title":"组件的可见性","slug":"组件的可见性","link":"#组件的可见性","children":[]}]},{"level":2,"title":"PositionComponent","slug":"positioncomponent","link":"#positioncomponent","children":[{"level":3,"title":"位置","slug":"位置","link":"#位置","children":[]},{"level":3,"title":"尺寸","slug":"尺寸","link":"#尺寸","children":[]},{"level":3,"title":"缩放","slug":"缩放","link":"#缩放","children":[]},{"level":3,"title":"角度","slug":"角度","link":"#角度","children":[]},{"level":3,"title":"本征角度（Native Angle）","slug":"本征角度-native-angle","link":"#本征角度-native-angle","children":[]},{"level":3,"title":"锚点（Anchor）","slug":"锚点-anchor","link":"#锚点-anchor","children":[]},{"level":3,"title":"PositionComponent 子组件","slug":"positioncomponent-子组件","link":"#positioncomponent-子组件","children":[]},{"level":3,"title":"渲染 PositionComponent","slug":"渲染-positioncomponent","link":"#渲染-positioncomponent","children":[]}]},{"level":2,"title":"SpriteComponent","slug":"spritecomponent","link":"#spritecomponent","children":[]},{"level":2,"title":"SpriteAnimationComponent","slug":"spriteanimationcomponent","link":"#spriteanimationcomponent","children":[]},{"level":2,"title":"SpriteAnimationGroupComponent","slug":"spriteanimationgroupcomponent","link":"#spriteanimationgroupcomponent","children":[]},{"level":2,"title":"SpriteGroupComponent","slug":"spritegroupcomponent","link":"#spritegroupcomponent","children":[]},{"level":2,"title":"SpawnComponent","slug":"spawncomponent","link":"#spawncomponent","children":[]},{"level":2,"title":"SvgComponent","slug":"svgcomponent","link":"#svgcomponent","children":[]},{"level":2,"title":"ParallaxComponent","slug":"parallaxcomponent","link":"#parallaxcomponent","children":[]},{"level":2,"title":"形状组件","slug":"形状组件","link":"#形状组件","children":[{"level":3,"title":"PolygonComponent","slug":"polygoncomponent","link":"#polygoncomponent","children":[]},{"level":3,"title":"RectangleComponent","slug":"rectanglecomponent","link":"#rectanglecomponent","children":[]},{"level":3,"title":"CircleComponent","slug":"circlecomponent","link":"#circlecomponent","children":[]}]},{"level":2,"title":"IsometricTileMapComponent","slug":"isometrictilemapcomponent","link":"#isometrictilemapcomponent","children":[]},{"level":2,"title":"NineTileBoxComponent","slug":"ninetileboxcomponent","link":"#ninetileboxcomponent","children":[]},{"level":2,"title":"CustomPainterComponent","slug":"custompaintercomponent","link":"#custompaintercomponent","children":[]},{"level":2,"title":"ComponentsNotifier","slug":"componentsnotifier","link":"#componentsnotifier","children":[]},{"level":2,"title":"ClipComponent","slug":"clipcomponent","link":"#clipcomponent","children":[]},{"level":2,"title":"Effects","slug":"effects","link":"#effects","children":[]},{"level":2,"title":"不使用 FlameGame 时","slug":"不使用-flamegame-时","link":"#不使用-flamegame-时","children":[]}],"git":{"updatedTime":1735588798000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/components.qwen.md"}');export{w as comp,C as data};
