import{_ as s,c as n,f as e,o as t}from"./app-B8TszOv9.js";const o={};function c(l,a){return t(),n("div",null,a[0]||(a[0]=[e(`<h1 id="palette" tabindex="-1"><a class="header-anchor" href="#palette"><span>Palette</span></a></h1><p>Throughout your game you are going to need to use colors in lots of places. There are two classes on <code>dart:ui</code> that can be used, <code>Color</code> and <code>Paint</code>.</p><p>The <code>Color</code> class represents a ARGB color in a hexadecimal integer format. So to create a <code>Color</code> instance, you just need to pass the color as an integer in the ARGB format.</p><p>You can use Dart&#39;s hexadecimal notation to make it really easy; for instance: <code>0xFF00FF00</code> is fully opaque green (the &quot;mask&quot; would be <code>0xAARRGGBB</code>).</p><p><strong>Note</strong>: The first two hexadecimal digits are for the alpha channel (transparency), unlike on regular (non-A) RGB. The max(FF = 255) for the two first digits means fully opaque, and the min (00 = 0) means fully transparent.</p><p>In the Material Flutter package there is a <code>Colors</code> class that provides common colors as constants:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span> <span class="token keyword">show</span> <span class="token class-name">Colors</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> black <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Some more complex methods might also take a <code>Paint</code> object, which is a more complete structure that allows you to configure aspects related to stroke, colors, filters and blends. However, normally when using even the more complex APIs, you just want an instance of a <code>Paint</code> object representing just a single simple plain solid color.</p><p><strong>Note:</strong> we don&#39;t recommend that you create a new <code>Paint</code> object every time you need a specific <code>Paint</code>, since it could potentially lead to a lot of unnecessary objects being created. A better way is to either define the <code>Paint</code> object somewhere and re-use it (however, do note that the <code>Paint</code> class is mutable, unlike <code>Color</code>), or to use the <code>Palette</code> class to define all the colors that you want to use in your game.</p><p>You can create such an object like this:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">Paint</span> green <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF00FF00</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To help you with this and also keep your game&#39;s color palette consistent, Flame adds the <code>Palette</code> class. You can use it to easily access both <code>Color</code>s and <code>Paint</code>s where needed and also define the colors your game use as constants, so that you don&#39;t get those mixed up.</p><p>The <code>BasicPalette</code> class is an example of what a palette can look like, and adds black and white as colors. So you can access black or white directly from the <code>BasicPalette</code>; for example, using <code>color</code>:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">TextConfig</span> regular <span class="token operator">=</span> <span class="token class-name">TextConfig</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">BasicPalette</span><span class="token punctuation">.</span>white<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Or using <code>paint</code>:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> <span class="token class-name">BasicPalette</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>However, the idea is that you can create your own palette, following the <code>BasicPalette</code> example, and add the color palette/scheme of your game. Then you will be able to statically access any color in your components and classes. Below is an example of a <code>Palette</code> implementation, from the <a href="https://github.com/bluefireteam/bgug/blob/master/lib/palette.dart" target="_blank" rel="noopener noreferrer">example game BGUG</a>:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:ui&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/palette.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Palette</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token class-name">PaletteEntry</span> white <span class="token operator">=</span> <span class="token class-name">BasicPalette</span><span class="token punctuation">.</span>white<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token class-name">PaletteEntry</span> toastBackground <span class="token operator">=</span> <span class="token class-name">PaletteEntry</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFFAC3232</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token class-name">PaletteEntry</span> toastText <span class="token operator">=</span> <span class="token class-name">PaletteEntry</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFFDA9A00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token class-name">PaletteEntry</span> grey <span class="token operator">=</span> <span class="token class-name">PaletteEntry</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF404040</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token class-name">PaletteEntry</span> green <span class="token operator">=</span> <span class="token class-name">PaletteEntry</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF54a286</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>PaletteEntry</code> is a <code>const</code> class that holds information of a color and it has the following members:</p><ul><li><code>color</code>: returns the <code>Color</code> specified</li><li><code>paint</code>: creates a new <code>Paint</code> with the color specified. <code>Paint</code> is a non-<code>const</code> class, so this method actually creates a brand new instance every time it&#39;s called. It&#39;s safe to cascade mutations to this.</li></ul>`,20)]))}const i=s(o,[["render",c],["__file","palette.html.vue"]]),r=JSON.parse('{"path":"/guide/flame/rendering/palette.html","title":"Palette","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/rendering/palette.md"}');export{i as comp,r as data};
