import{_ as a,c as s,f as e,o as t}from"./app-B8TszOv9.js";const p={};function i(o,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h1 id="images" tabindex="-1"><a class="header-anchor" href="#images"><span>Images</span></a></h1><p>To start off you must have an appropriate folder structure and add the files to the <code>pubspec.yaml</code> file, like this:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">flutter</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">assets</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> assets/images/player.png</span>
<span class="line">    <span class="token punctuation">-</span> assets/images/enemy.png</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Images can be in any format supported by Flutter, which include: JPEG, WebP, PNG, GIF, animated GIF, animated WebP, BMP, and WBMP. Other formats would require additional libraries. For example, SVG images can be loaded via the <code>flame_svg</code> library.</p><h2 id="loading-images" tabindex="-1"><a class="header-anchor" href="#loading-images"><span>Loading images</span></a></h2><p>Flame bundles an utility class called <code>Images</code> that allows you to easily load and cache images from the assets directory into memory.</p><p>Flutter has a handful of types related to images, and converting everything properly from a local asset to an <code>Image</code> that can be drawn on Canvas is a bit convoluted. This class allows you to obtain an <code>Image</code> that can be drawn on the <code>Canvas</code> using the <code>drawImageRect</code> method.</p><p>It automatically caches any image loaded by filename, so you can safely call it many times.</p><p>The methods for loading and clearing the cache are: <code>load</code>, <code>loadAll</code>, <code>clear</code> and <code>clearCache</code>. They return <code>Future</code>s for loading the images. These futures must be awaited for before the images can be used in any way. If you do not want to await these futures right away, you can initiate multiple <code>load()</code> operations and then await for all of them at once using <code>Images.ready()</code> method.</p><p>To synchronously retrieve a previously cached image, the <code>fromCache</code> method can be used. If an image with that key was not previously loaded, it will throw an exception.</p><p>To add an already loaded image to the cache, the <code>add</code> method can be used and you can set the key that the image should have in the cache. You can retrieve all the keys in the cache using the <code>keys</code> getter.</p><p>You can also use <code>ImageExtension.fromPixels()</code> to dynamically create an image during the game.</p><p>For <code>clear</code> and <code>clearCache</code>, do note that <code>dispose</code> is called for each removed image from the cache, so make sure that you don&#39;t use the image afterwards.</p><h3 id="standalone-usage" tabindex="-1"><a class="header-anchor" href="#standalone-usage"><span>Standalone usage</span></a></h3><p>It can manually be used by instantiating it:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/cache.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> imagesLoader <span class="token operator">=</span> <span class="token class-name">Images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">await</span> imagesLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;yourImage.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But Flame also offers two ways of using this class without instantiating it yourself.</p><h3 id="flame-images" tabindex="-1"><a class="header-anchor" href="#flame-images"><span>Flame.images</span></a></h3><p>There is a singleton, provided by the <code>Flame</code> class, that can be used as a global image cache.</p><p>Example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/flame.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/sprite.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// inside an async context</span></span>
<span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Flame</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> playerSprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="game-images" tabindex="-1"><a class="header-anchor" href="#game-images"><span>Game.images</span></a></h3><p>The <code>Game</code> class offers some utility methods for handling images loading too. It bundles an instance of the <code>Images</code> class, that can be used to load image assets to be used during the game. The game will automatically free the cache when the game widget is removed from the widget tree.</p><p>The <code>onLoad</code> method from the <code>Game</code> class is a great place for the initial assets to be loaded.</p><p>Example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Sprite</span> player<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Note that you could also use Sprite.load for this.</span></span>
<span class="line">    <span class="token keyword">final</span> playerImage <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    player <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>playerImage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Loaded assets can also be retrieved while the game is running by <code>images.fromCache</code>, for example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// attributes omitted</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// other loads omitted</span></span>
<span class="line">    <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bullet.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// This is just an example, in your game you probably don&#39;t want to</span></span>
<span class="line">    <span class="token comment">// instantiate new [Sprite] objects every time you shoot.</span></span>
<span class="line">    <span class="token keyword">final</span> bulletSprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">fromCache</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bullet.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _bullets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bulletSprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loading-images-over-the-network" tabindex="-1"><a class="header-anchor" href="#loading-images-over-the-network"><span>Loading images over the network</span></a></h2><p>The Flame core package doesn&#39;t offer a built in method to loading images from the network.</p><p>The reason for that is that Flutter/Dart does not have a built in http client, which requires a package to be used and since there are a couple of packages available out there, we refrain from forcing the user to use a specific package.</p><p>With that said, it is quite simple to load images from the network once a http client package is chosen by the user. The following snippet shows how an <code>Image</code> can be fetched from the web using the <a href="https://pub.dev/packages/http" target="_blank" rel="noopener noreferrer">http</a> package.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:http/http.dart&#39;</span></span> <span class="token operator">as</span> http<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/painting.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;https://url.com/image.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">decodeImageFromList</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Check [\`flame_network_assets\`](https://pub.dev/packages/flame_network_assets)</span>
<span class="line">for a ready to use network assets solution that provides a built in cache.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sprite" tabindex="-1"><a class="header-anchor" href="#sprite"><span>Sprite</span></a></h2><p>Flame offers a <code>Sprite</code> class that represents an image, or a region of an image.</p><p>You can create a <code>Sprite</code> by providing it an <code>Image</code> and coordinates that defines the piece of the image that that sprite represents.</p><p>For example, this will create a sprite representing the whole image of the file passed:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Sprite</span> player <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also specify the coordinates in the original image where the sprite is located. This allows you to use sprite sheets and reduce the number of images in memory, for example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> playerFrame <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span></span>
<span class="line">  image<span class="token punctuation">,</span></span>
<span class="line">  srcPosition<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">32.0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  srcSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The default values are <code>(0.0, 0.0)</code> for <code>srcPosition</code> and <code>null</code> for <code>srcSize</code> (meaning it will use the full width/height of the source image).</p><p>The <code>Sprite</code> class has a render method, that allows you to render the sprite onto a <code>Canvas</code>:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;block.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Sprite</span> block <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// in your render method</span></span>
<span class="line">block<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//canvas, width, height</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You must pass the size to the render method, and the image will be resized accordingly.</p><p>All render methods from the <code>Sprite</code> class can receive a <code>Paint</code> instance as the optional named parameter <code>overridePaint</code> that parameter will override the current <code>Sprite</code> paint instance for that render call.</p><p><code>Sprite</code>s can also be used as widgets, to do so just use <code>SpriteWidget</code> class. Here is a complete <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/widgets/sprite_widget_example.dart" target="_blank" rel="noopener noreferrer">example using sprite as widgets</a>.</p><h2 id="spritebatch" tabindex="-1"><a class="header-anchor" href="#spritebatch"><span>SpriteBatch</span></a></h2><p>If you have a sprite sheet (also called an image atlas, which is an image with smaller images inside), and would like to render it effectively - <code>SpriteBatch</code> handles that job for you.</p><p>Give it the filename of the image, and then add rectangles which describes various part of the image, in addition to transforms (position, scale and rotation) and optional colors.</p><p>You render it with a <code>Canvas</code> and an optional <code>Paint</code>, <code>BlendMode</code> and <code>CullRect</code>.</p><p>A <code>SpriteBatchComponent</code> is also available for your convenience.</p><p>See how to use it in the <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/sprites/sprite_batch_example.dart" target="_blank" rel="noopener noreferrer">SpriteBatch examples</a></p><h2 id="imagecomposition" tabindex="-1"><a class="header-anchor" href="#imagecomposition"><span>ImageComposition</span></a></h2><p>In some cases you may want to merge multiple images into a single image; this is called <a href="https://en.wikipedia.org/wiki/Compositing" target="_blank" rel="noopener noreferrer">Compositing</a>. This can be useful for example when working with the <a href="#spritebatch">SpriteBatch</a> API to optimize your drawing calls.</p><p>For such use cases Flame comes with the <code>ImageComposition</code> class. This allows you to add multiple images, each at their own position, onto a new image:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> composition <span class="token operator">=</span> <span class="token class-name">ImageComposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image2<span class="token punctuation">,</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image3<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    source<span class="token punctuation">:</span> <span class="token class-name">Rect</span><span class="token punctuation">.</span><span class="token function">fromLTWH</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">await</span> composition<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Image</span> imageSync <span class="token operator">=</span> composition<span class="token punctuation">.</span><span class="token function">composeSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, two versions of composing image are available. Use <code>ImageComposition.compose()</code> for the async approach. Or use the new <code>ImageComposition.composeSync()</code> function to rasterize the image into GPU context using the benefits of the <code>Picture.toImageSync</code> function.</p><p><strong>Note:</strong> Composing images is expensive, we do not recommend you run this every tick as it affect the performance badly. Instead we recommend to have your compositions pre-rendered so you can just reuse the output image.</p><h2 id="animation" tabindex="-1"><a class="header-anchor" href="#animation"><span>Animation</span></a></h2><p>The Animation class helps you create a cyclic animation of sprites.</p><p>You can create it by passing a list of equally sized sprites and the stepTime (that is, how many seconds it takes to move to the next frame):</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span><span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">spriteList</span><span class="token punctuation">(</span>sprites<span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After the animation is created, you need to call its <code>update</code> method and render the current frame&#39;s sprite on your game instance.</p><p>Example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">SpriteAnimationTicker</span> a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">MyGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span><span class="token class-name">SpriteAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">.</span><span class="token function">getSprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A better alternative to generate a list of sprites is to use the <code>fromFrameData</code> constructor:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">const</span> amountOfFrames <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">fromFrameData</span><span class="token punctuation">(</span></span>
<span class="line">    imageInstance<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">SpriteAnimationFrame</span><span class="token punctuation">.</span><span class="token function">sequenced</span><span class="token punctuation">(</span></span>
<span class="line">      amount<span class="token punctuation">:</span> amountOfFrames<span class="token punctuation">,</span></span>
<span class="line">      textureSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This constructor makes creating an <code>Animation</code> very easy when using sprite sheets.</p><p>In the constructor you pass an image instance and the frame data, which contains some parameters that can be used to describe the animation. Check the documentation on the constructors available on the <code>SpriteAnimationFrameData</code> class to see all the parameters.</p><p>If you use Aseprite for your animations, Flame does provide some support for Aseprite animation&#39;s JSON data. To use this feature you will need to export the Sprite Sheet&#39;s JSON data, and use something like the following snippet:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;chopper.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> jsonData <span class="token operator">=</span> <span class="token keyword">await</span> assets<span class="token punctuation">.</span><span class="token function">readJson</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;chopper.json&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">fromAsepriteData</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note:</strong> trimmed sprite sheets are not supported by flame, so if you export your sprite sheet this way, it will have the trimmed size, not the sprite original size.</p><p>Animations, after created, have an update and render method; the latter renders the current frame, and the former ticks the internal clock to update the frames.</p><p>Animations are normally used inside <code>SpriteAnimationComponent</code>s, but custom components with several Animations can be created as well.</p><p>To learn more, check out the full example code of <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/widgets/sprite_animation_widget_example.dart" target="_blank" rel="noopener noreferrer">using animations as widgets</a>.</p><h2 id="spritesheet" tabindex="-1"><a class="header-anchor" href="#spritesheet"><span>SpriteSheet</span></a></h2><p>Sprite sheets are big images with several frames of the same sprite on it and is a very good way to organize and store your animations. Flame provides a very simple utility class to deal with SpriteSheets, using which you can load your sprite sheet image and extract animations from it as well. Following is a simple example of how to use it:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/sprite.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> spriteSheet <span class="token operator">=</span> <span class="token class-name">SpriteSheet</span><span class="token punctuation">(</span></span>
<span class="line">  image<span class="token punctuation">:</span> imageInstance<span class="token punctuation">,</span></span>
<span class="line">  srcSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> spriteSheet<span class="token punctuation">.</span><span class="token function">createAnimation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can use the animation directly or use it in an animation component.</p><p>You can also create a custom animation by retrieving individual <code>SpriteAnimationFrameData</code> using either <code>SpriteSheet.createFrameData</code> or <code>SpriteSheet.createFrameDataFromId</code>:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">fromFrameData</span><span class="token punctuation">(</span></span>
<span class="line">  imageInstance<span class="token punctuation">,</span> </span>
<span class="line">  <span class="token class-name">SpriteAnimationData</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    spriteSheet<span class="token punctuation">.</span><span class="token function">createFrameDataFromId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// by id</span></span>
<span class="line">    spriteSheet<span class="token punctuation">.</span><span class="token function">createFrameData</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// row, column</span></span>
<span class="line">    spriteSheet<span class="token punctuation">.</span><span class="token function">createFrameDataFromId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// by id</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you don&#39;t need any kind of animation and instead only want an instance of a <code>Sprite</code> on the <code>SpriteSheet</code> you can use the <code>getSprite</code> or <code>getSpriteById</code> methods:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">spriteSheet<span class="token punctuation">.</span><span class="token function">getSpriteById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// by id</span></span>
<span class="line">spriteSheet<span class="token punctuation">.</span><span class="token function">getSprite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// row, column</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>See a full example of the <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/sprites/sprite_sheet_example.dart" target="_blank" rel="noopener noreferrer"><code>SpriteSheet</code> class</a> for more details on how to work with it.</p>`,85)]))}const c=a(p,[["render",i],["__file","images.html.vue"]]),r=JSON.parse('{"path":"/guide/flame/rendering/images.html","title":"Images","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Loading images","slug":"loading-images","link":"#loading-images","children":[{"level":3,"title":"Standalone usage","slug":"standalone-usage","link":"#standalone-usage","children":[]},{"level":3,"title":"Flame.images","slug":"flame-images","link":"#flame-images","children":[]},{"level":3,"title":"Game.images","slug":"game-images","link":"#game-images","children":[]}]},{"level":2,"title":"Loading images over the network","slug":"loading-images-over-the-network","link":"#loading-images-over-the-network","children":[]},{"level":2,"title":"Sprite","slug":"sprite","link":"#sprite","children":[]},{"level":2,"title":"SpriteBatch","slug":"spritebatch","link":"#spritebatch","children":[]},{"level":2,"title":"ImageComposition","slug":"imagecomposition","link":"#imagecomposition","children":[]},{"level":2,"title":"Animation","slug":"animation","link":"#animation","children":[]},{"level":2,"title":"SpriteSheet","slug":"spritesheet","link":"#spritesheet","children":[]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/rendering/images.md"}');export{c as comp,r as data};
