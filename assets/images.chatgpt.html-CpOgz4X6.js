import{_ as s,c as a,f as e,o as p}from"./app-BZlJFCNj.js";const t={};function c(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="图像" tabindex="-1"><a class="header-anchor" href="#图像"><span>图像</span></a></h1><p>首先，您需要有一个合适的文件夹结构，并将文件添加到 <code>pubspec.yaml</code> 文件中，如下所示：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">flutter</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">assets</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> assets/images/player.png</span>
<span class="line">    <span class="token punctuation">-</span> assets/images/enemy.png</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图像可以是 Flutter 支持的任何格式，包括：JPEG、WebP、PNG、GIF、动画 GIF、动画 WebP、BMP 和 WBMP。其他格式需要额外的库。例如，SVG 图像可以通过 <code>flame_svg</code> 库加载。</p><hr><h2 id="加载图像" tabindex="-1"><a class="header-anchor" href="#加载图像"><span>加载图像</span></a></h2><p>Flame 提供了一个名为 <code>Images</code> 的实用类，可以轻松地从资源目录加载和缓存图像到内存中。</p><p>Flutter 有许多与图像相关的类型，从本地资源转换为可以在 Canvas 上绘制的 <code>Image</code> 稍显复杂。这个类允许您获得可以通过 <code>drawImageRect</code> 方法在 <code>Canvas</code> 上绘制的 <code>Image</code>。</p><p><code>Images</code> 类会自动缓存通过文件名加载的任何图像，因此可以安全地多次调用。</p><p>用于加载和清除缓存的方法包括：<code>load</code>、<code>loadAll</code>、<code>clear</code> 和 <code>clearCache</code>。这些方法返回加载图像的 <code>Future</code>，在使用图像之前必须等待这些 <code>Future</code> 完成。如果您不想立即等待这些 <code>Future</code>，可以启动多个 <code>load()</code> 操作，然后使用 <code>Images.ready()</code> 方法一次性等待所有操作完成。</p><p>如果需要同步检索之前缓存的图像，可以使用 <code>fromCache</code> 方法。如果缓存中不存在对应键的图像，会抛出异常。</p><p>要将已经加载的图像添加到缓存中，可以使用 <code>add</code> 方法，并指定缓存中图像的键。通过 <code>keys</code> 属性，可以获取缓存中的所有键。</p><p>您还可以使用 <code>ImageExtension.fromPixels()</code> 在游戏中动态创建图像。</p><p>对于 <code>clear</code> 和 <code>clearCache</code>，请注意，这些操作会为每个从缓存中移除的图像调用 <code>dispose</code>，因此请确保之后不再使用这些图像。</p><hr><h3 id="独立使用" tabindex="-1"><a class="header-anchor" href="#独立使用"><span>独立使用</span></a></h3><p>可以通过实例化来手动使用 <code>Images</code> 类：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/cache.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> imagesLoader <span class="token operator">=</span> <span class="token class-name">Images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">await</span> imagesLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;yourImage.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但 Flame 提供了两种无需自己实例化的使用方式。</p><hr><h3 id="flame-images" tabindex="-1"><a class="header-anchor" href="#flame-images"><span>Flame.images</span></a></h3><p><code>Flame</code> 类提供了一个单例，作为全局图像缓存使用。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/flame.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/sprite.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在异步上下文中</span></span>
<span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Flame</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> playerSprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="game-images" tabindex="-1"><a class="header-anchor" href="#game-images"><span>Game.images</span></a></h3><p><code>Game</code> 类也提供了加载图像的实用方法。它包含一个 <code>Images</code> 类的实例，用于加载游戏中需要的图像资源。当游戏组件从组件树中移除时，缓存会自动释放。</p><p>可以在 <code>Game</code> 类的 <code>onLoad</code> 方法中加载初始资源。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">Sprite</span> player<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 也可以使用 Sprite.load</span></span>
<span class="line">    <span class="token keyword">final</span> playerImage <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    player <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>playerImage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在游戏运行时，也可以通过 <code>images.fromCache</code> 检索已加载的资源。例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 省略属性</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 省略其他加载</span></span>
<span class="line">    <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bullet.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 示例中，每次射击都实例化一个新的 [Sprite]，实际游戏中可能并不推荐这样做。</span></span>
<span class="line">    <span class="token keyword">final</span> bulletSprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">fromCache</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bullet.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _bullets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bulletSprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="从网络加载图像" tabindex="-1"><a class="header-anchor" href="#从网络加载图像"><span>从网络加载图像</span></a></h2><p>Flame 核心包不提供内置的方法来从网络加载图像。</p><p>原因是 Flutter/Dart 没有内置的 HTTP 客户端，这需要使用外部包。由于有多个可用的 HTTP 包，Flame 避免强制用户使用特定的包。</p><p>不过，一旦选择了 HTTP 客户端包，从网络加载图像相当简单。以下是使用 <a href="https://pub.dev/packages/http" target="_blank" rel="noopener noreferrer">http</a> 包从网络获取 <code>Image</code> 的示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:http/http.dart&#39;</span></span> <span class="token operator">as</span> http<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/painting.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;https://url.com/image.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">decodeImageFromList</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">可以查看 [\`flame_network_assets\`](https://pub.dev/packages/flame_network_assets)，该包提供了一个内置缓存的网络资源解决方案。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="sprite" tabindex="-1"><a class="header-anchor" href="#sprite"><span>Sprite</span></a></h2><p>Flame 提供了一个 <code>Sprite</code> 类，表示一个图像或图像的某一部分。</p><p>您可以通过提供一个 <code>Image</code> 和定义图像片段的坐标来创建一个 <code>Sprite</code>。</p><p>例如，这将创建一个表示图像完整内容的精灵：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Sprite</span> player <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以指定原始图像中精灵所在的坐标。这使得您能够使用精灵图，并减少内存中图像的数量。例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> playerFrame <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span></span>
<span class="line">  image<span class="token punctuation">,</span></span>
<span class="line">  srcPosition<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">32.0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  srcSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认值为 <code>(0.0, 0.0)</code> 的 <code>srcPosition</code> 和 <code>null</code> 的 <code>srcSize</code>（意味着它将使用源图像的完整宽度和高度）。</p><p><code>Sprite</code> 类有一个 <code>render</code> 方法，允许您将精灵渲染到 <code>Canvas</code> 上：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;block.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Sprite</span> block <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在渲染方法中</span></span>
<span class="line">block<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// canvas, width, height</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您必须将大小传递给渲染方法，图像会相应调整大小。</p><p><code>Sprite</code> 类的所有渲染方法都可以接收一个名为 <code>overridePaint</code> 的可选参数 <code>Paint</code> 实例，该参数会覆盖该渲染调用的当前 <code>Sprite</code> paint 实例。</p><p><code>Sprite</code> 也可以作为小部件使用，可以使用 <code>SpriteWidget</code> 类来实现。以下是一个使用精灵作为小部件的完整示例：<a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/widgets/sprite_widget_example.dart" target="_blank" rel="noopener noreferrer">SpriteWidget 示例</a>。</p><hr><h2 id="spritebatch" tabindex="-1"><a class="header-anchor" href="#spritebatch"><span>SpriteBatch</span></a></h2><p>如果您有一个精灵图（也称为图像图集，它是包含多个小图像的大图），并希望高效地渲染它，<code>SpriteBatch</code> 可以帮您完成这项工作。</p><p>将图像的文件名传入 <code>SpriteBatch</code>，然后添加描述图像各部分的矩形，此外，还可以添加变换（位置、缩放和旋转）以及可选的颜色。</p><p>您可以通过 <code>Canvas</code> 和可选的 <code>Paint</code>、<code>BlendMode</code> 和 <code>CullRect</code> 渲染它。</p><p><code>SpriteBatchComponent</code> 也是为了方便您使用而提供的。</p><p>请查看 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/sprites/sprite_batch_example.dart" target="_blank" rel="noopener noreferrer">SpriteBatch 示例</a> 来了解如何使用它。</p><hr><h2 id="图像合成" tabindex="-1"><a class="header-anchor" href="#图像合成"><span>图像合成</span></a></h2><p>在某些情况下，您可能希望将多个图像合成成一个图像，这称为 <a href="https://en.wikipedia.org/wiki/Compositing" target="_blank" rel="noopener noreferrer">合成</a>。例如，在使用 <a href="#spritebatch">SpriteBatch</a> API 来优化绘制调用时，这非常有用。</p><p>Flame 提供了 <code>ImageComposition</code> 类来处理这种情况。您可以将多个图像添加到新图像中，每个图像都有自己的位置：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> composition <span class="token operator">=</span> <span class="token class-name">ImageComposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image2<span class="token punctuation">,</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image3<span class="token punctuation">,</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">:</span> <span class="token class-name">Rect</span><span class="token punctuation">.</span><span class="token function">fromLTWH</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line"><span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">await</span> composition<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Image</span> imageSync <span class="token operator">=</span> composition<span class="token punctuation">.</span><span class="token function">composeSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如您所见，提供了两种合成图像的方式。使用 <code>ImageComposition.compose()</code> 进行异步操作，或者使用 <code>ImageComposition.composeSync()</code> 函数，在 GPU 上以同步方式栅格化图像，利用 <code>Picture.toImageSync</code> 函数的优势。</p><p><strong>注意：</strong> 图像合成是一个资源消耗较大的操作，我们不建议每个帧都执行此操作，因为这会严重影响性能。相反，我们建议您预先渲染合成图像，以便重复使用。</p><hr><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画"><span>动画</span></a></h2><p><code>Animation</code> 类帮助您创建一个精灵的循环动画。</p><p>您可以通过传入一个大小相等的精灵列表和 <code>stepTime</code>（即移动到下一帧所需的秒数）来创建动画：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span><span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">spriteList</span><span class="token punctuation">(</span>sprites<span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>动画创建后，您需要调用其 <code>update</code> 方法，并渲染当前帧的精灵到您的游戏实例中。</p><p>示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">SpriteAnimationTicker</span> a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">MyGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">=</span> <span class="token class-name">SpriteAnimationTicker</span><span class="token punctuation">(</span><span class="token class-name">SpriteAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">.</span><span class="token function">getSprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个更好的创建精灵列表的方式是使用 <code>fromFrameData</code> 构造函数：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">const</span> amountOfFrames <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">fromFrameData</span><span class="token punctuation">(</span></span>
<span class="line">    imageInstance<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">SpriteAnimationFrame</span><span class="token punctuation">.</span><span class="token function">sequenced</span><span class="token punctuation">(</span></span>
<span class="line">      amount<span class="token punctuation">:</span> amountOfFrames<span class="token punctuation">,</span></span>
<span class="line">      textureSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">,</span> <span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此构造函数使得使用精灵图创建 <code>Animation</code> 变得非常简单。</p><p>在构造函数中，您传入一个图像实例和帧数据，帧数据包含了一些参数，可以用来描述动画。请查看 <code>SpriteAnimationFrameData</code> 类中的构造函数文档，以了解所有可用的参数。</p><p>如果您使用 Aseprite 创建动画，Flame 支持 Aseprite 动画的 JSON 数据。要使用此功能，您需要导出精灵图的 JSON 数据，并使用如下代码：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;chopper.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> jsonData <span class="token operator">=</span> <span class="token keyword">await</span> assets<span class="token punctuation">.</span><span class="token function">readJson</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;chopper.json&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">fromAsepriteData</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> Flame 不支持修剪过的精灵图，因此，如果您导出精灵图，它将具有修剪后的大小，而不是精灵的原始大小。</p><p>创建动画后，它们会有 <code>update</code> 和 <code>render</code> 方法；后者用于渲染当前帧，前者则更新帧的时间。</p><p>动画通常在 <code>SpriteAnimationComponent</code> 中使用，但也可以创建包含多个动画的自定义组件。</p><p>要了解更多，请查看完整的示例代码：<a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/widgets/sprite_animation_widget_example.dart" target="_blank" rel="noopener noreferrer">使用动画作为小部件的示例</a>。</p><hr><h2 id="spritesheet" tabindex="-1"><a class="header-anchor" href="#spritesheet"><span>SpriteSheet</span></a></h2><p>精灵图是包含多个同一精灵帧的大图，是组织和存储动画的一个非常好的方式。Flame 提供了一个非常简单的实用类来处理精灵图，您可以使用它加载精灵图像并从中提取动画。以下是如何使用它的简单示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/sprite.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> spriteSheet <span class="token operator">=</span> <span class="token class-name">SpriteSheet</span><span class="token punctuation">(</span></span>
<span class="line">  image<span class="token punctuation">:</span> imageInstance<span class="token punctuation">,</span></span>
<span class="line">  srcSize<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> spriteSheet<span class="token punctuation">.</span><span class="token function">createAnimation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，您可以直接使用该动画，或将其用于动画组件。</p><p>您还可以通过 <code>SpriteSheet.createFrameData</code> 或 <code>SpriteSheet.createFrameDataFromId</code> 获取单独的 <code>SpriteAnimationFrameData</code> 来创建自定义动画：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> animation <span class="token operator">=</span> <span class="token class-name">SpriteAnimation</span><span class="token punctuation">.</span><span class="token function">fromFrameData</span><span class="token punctuation">(</span></span>
<span class="line">  imageInstance<span class="token punctuation">,</span> </span>
<span class="line">  <span class="token class-name">SpriteAnimationData</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    spriteSheet<span class="token punctuation">.</span><span class="token function">createFrameDataFromId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 根据 id</span></span>
<span class="line">    spriteSheet<span class="token punctuation">.</span><span class="token function">createFrameData</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 行和列</span></span>
<span class="line">    spriteSheet<span class="token punctuation">.</span><span class="token function">createFrameDataFromId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> stepTime<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 根据 id</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您不需要任何动画，只是想从 <code>SpriteSheet</code> 获取一个 <code>Sprite</code> 实例，可以使用 <code>getSprite</code> 或 <code>getSpriteById</code> 方法：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">spriteSheet<span class="token punctuation">.</span><span class="token function">getSpriteById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据 id</span></span>
<span class="line">spriteSheet<span class="token punctuation">.</span><span class="token function">getSprite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 行和列</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看完整的 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/sprites/sprite_sheet_example.dart" target="_blank" rel="noopener noreferrer"><code>SpriteSheet</code> 类示例</a> 以获取更多关于如何使用它的详细信息。</p><hr>`,96)]))}const o=s(t,[["render",c],["__file","images.chatgpt.html.vue"]]),u=JSON.parse('{"path":"/guide/flame/rendering/images.chatgpt.html","title":"图像","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"加载图像","slug":"加载图像","link":"#加载图像","children":[{"level":3,"title":"独立使用","slug":"独立使用","link":"#独立使用","children":[]},{"level":3,"title":"Flame.images","slug":"flame-images","link":"#flame-images","children":[]},{"level":3,"title":"Game.images","slug":"game-images","link":"#game-images","children":[]}]},{"level":2,"title":"从网络加载图像","slug":"从网络加载图像","link":"#从网络加载图像","children":[]},{"level":2,"title":"Sprite","slug":"sprite","link":"#sprite","children":[]},{"level":2,"title":"SpriteBatch","slug":"spritebatch","link":"#spritebatch","children":[]},{"level":2,"title":"图像合成","slug":"图像合成","link":"#图像合成","children":[]},{"level":2,"title":"动画","slug":"动画","link":"#动画","children":[]},{"level":2,"title":"SpriteSheet","slug":"spritesheet","link":"#spritesheet","children":[]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/rendering/images.chatgpt.md"}');export{o as comp,u as data};
