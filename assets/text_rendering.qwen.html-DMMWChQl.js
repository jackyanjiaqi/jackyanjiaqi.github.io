import{_ as t,a as p,b as l}from"./text_rendering_big3-BPDHAm5q.js";import{_ as c,c as o,f as a,a as i,b as s,d as u,e as d,r,o as k}from"./app-BZlJFCNj.js";const m={};function v(b,n){const e=r("RouteLink");return k(),o("div",null,[n[3]||(n[3]=a(`<h1 id="文本渲染" tabindex="-1"><a class="header-anchor" href="#文本渲染"><span>文本渲染</span></a></h1><p>Flame 提供了一些专用类来帮助你渲染文本。</p><h2 id="文本组件" tabindex="-1"><a class="header-anchor" href="#文本组件"><span>文本组件</span></a></h2><p>使用 Flame 渲染文本的最简单方法是利用提供的文本渲染组件：</p><ul><li><code>TextComponent</code> 用于渲染单行文本。</li><li><code>TextBoxComponent</code> 用于在一个带尺寸边框内包含多行文本，包括打字效果的可能性。你可以使用 <code>newLineNotifier</code> 在添加新行时获得通知，并使用 <code>onComplete</code> 回调在文本完全打印时执行函数。</li><li><code>ScrollTextBoxComponent</code> 增强了 <code>TextBoxComponent</code> 的功能，在文本超出包围框边界时添加垂直滚动能力。</li></ul><p>所有组件都在<a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/text_example.dart" target="_blank" rel="noopener noreferrer">这个示例</a>中展示。</p><h3 id="textcomponent" tabindex="-1"><a class="header-anchor" href="#textcomponent"><span>TextComponent</span></a></h3><p><code>TextComponent</code> 是一个简单的组件，用于渲染单行文本。</p><p>简单用法：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token class-name">TextComponent</span><span class="token punctuation">(</span></span>
<span class="line">        text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Hello, Flame&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">        position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了配置字体系列、大小、颜色等渲染方面的内容，你需要提供（或修改）一个包含这些信息的 <code>TextRenderer</code>；虽然你可以在下面阅读更多关于此接口的详细信息，但你可以使用的最简单实现是 <code>TextPaint</code>，它接受 Flutter 的 <code>TextStyle</code>：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> regular <span class="token operator">=</span> <span class="token class-name">TextPaint</span><span class="token punctuation">(</span></span>
<span class="line">  style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span></span>
<span class="line">    fontSize<span class="token punctuation">:</span> <span class="token number">48.0</span><span class="token punctuation">,</span></span>
<span class="line">    color<span class="token punctuation">:</span> <span class="token class-name">BasicPalette</span><span class="token punctuation">.</span>white<span class="token punctuation">.</span>color<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token class-name">TextComponent</span><span class="token punctuation">(</span></span>
<span class="line">        text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Hello, Flame&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">        textRenderer<span class="token punctuation">:</span> regular<span class="token punctuation">,</span></span>
<span class="line">        anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>topCenter<span class="token punctuation">,</span></span>
<span class="line">        position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在 <a href="https://pub.dev/documentation/flame/latest/components/TextComponent-class.html" target="_blank" rel="noopener noreferrer">TextComponent 的 API</a> 下找到所有选项。</p><h3 id="textboxcomponent" tabindex="-1"><a class="header-anchor" href="#textboxcomponent"><span>TextBoxComponent</span></a></h3><p><code>TextBoxComponent</code> 和 <code>TextComponent</code> 非常相似，但正如其名称所示，它用于在边界框内渲染文本，并根据提供的框大小创建换行符。</p><p>你可以通过 <code>TextBoxConfig</code> 中的 <code>growingBox</code> 变量决定框是否随着文本输入而增长或保持静态。一个静态框要么具有固定大小（设置 <code>TextBoxComponent</code> 的 <code>size</code> 属性），要么自动缩小以适应文本内容。</p><p>此外，<code>align</code> 属性允许你控制文本内容的水平和垂直对齐方式。例如，将 <code>align</code> 设置为 <code>Anchor.center</code> 将使文本在边界框内垂直和水平居中。</p><p>如果你想更改框的边距，请使用 <code>TextBoxConfig</code> 中的 <code>margins</code> 变量。</p><p>最后，如果你想模拟“打字”效果，通过逐个显示字符串中的每个字符来模拟实时输入的效果，可以提供 <code>boxConfig.timePerChar</code> 参数。</p><p>示例用法：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyTextBox</span> <span class="token keyword">extends</span> <span class="token class-name">TextBoxComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyTextBox</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span></span>
<span class="line">    text<span class="token punctuation">:</span> text<span class="token punctuation">,</span></span>
<span class="line">    textRenderer<span class="token punctuation">:</span> tiny<span class="token punctuation">,</span></span>
<span class="line">    boxConfig<span class="token punctuation">:</span> <span class="token class-name">TextBoxConfig</span><span class="token punctuation">(</span>timePerChar<span class="token punctuation">:</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">final</span> bgPaint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFFFF00FF</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> borderPaint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token class-name">PaintingStyle</span><span class="token punctuation">.</span>stroke<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Rect</span> rect <span class="token operator">=</span> <span class="token class-name">Rect</span><span class="token punctuation">.</span><span class="token function">fromLTWH</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> bgPaint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">deflate</span><span class="token punctuation">(</span>boxConfig<span class="token punctuation">.</span>margin<span class="token punctuation">)</span><span class="token punctuation">,</span> borderPaint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在 <a href="https://pub.dev/documentation/flame/latest/components/TextBoxComponent-class.html" target="_blank" rel="noopener noreferrer">TextBoxComponent 的 API</a> 下找到所有选项。</p><h3 id="scrolltextboxcomponent" tabindex="-1"><a class="header-anchor" href="#scrolltextboxcomponent"><span>ScrollTextBoxComponent</span></a></h3><p><code>ScrollTextBoxComponent</code> 是 <code>TextBoxComponent</code> 的高级版本，设计用于在定义区域内显示可滚动文本。此组件特别适用于需要在一个受限空间中展示大量文本的界面，例如对话框或信息面板。</p><p>请注意，<code>TextBoxComponent</code> 的 <code>align</code> 属性不可用。</p><p>示例用法：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyScrollableText</span> <span class="token keyword">extends</span> <span class="token class-name">ScrollTextBoxComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyScrollableText</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> frameSize<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span></span>
<span class="line">    size<span class="token punctuation">:</span> frameSize<span class="token punctuation">,</span></span>
<span class="line">    text<span class="token punctuation">:</span> text<span class="token punctuation">,</span></span>
<span class="line">    textRenderer<span class="token punctuation">:</span> regular<span class="token punctuation">,</span> </span>
<span class="line">    boxConfig<span class="token punctuation">:</span> <span class="token class-name">TextBoxConfig</span><span class="token punctuation">(</span>timePerChar<span class="token punctuation">:</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="textelementcomponent" tabindex="-1"><a class="header-anchor" href="#textelementcomponent"><span>TextElementComponent</span></a></h3><p>如果你想渲染任意的 <code>TextElement</code>，从单个 <code>InlineTextElement</code> 到格式化的 <code>DocumentRoot</code>，可以使用 <code>TextElementComponent</code>。</p><p>一个简单的示例是创建一个 <code>DocumentRoot</code> 来渲染一系列块元素（想象成 HTML 的“div”），其中包含丰富的文本：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> document <span class="token operator">=</span> <span class="token class-name">DocumentRoot</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token class-name">HeaderNode</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1984&#39;</span></span><span class="token punctuation">,</span> level<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token class-name">ParagraphNode</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;Anything could be true. The so-called laws of nature were nonsense.&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> element <span class="token operator">=</span> <span class="token class-name">TextElementComponent</span><span class="token punctuation">.</span><span class="token function">fromDocument</span><span class="token punctuation">(</span></span>
<span class="line">  document<span class="token punctuation">:</span> document<span class="token punctuation">,</span></span>
<span class="line">  position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，大小可以通过两种方式指定；通过：</p><ul><li>所有 <code>PositionComponents</code> 的通用 <code>size</code> 属性；或</li><li>包含在应用的 <code>DocumentStyle</code> 中的 <code>width/height</code>。</li></ul><p>一个应用样式到文档的示例（这可以包括大小以及其他参数）：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> style <span class="token operator">=</span> <span class="token class-name">DocumentStyle</span><span class="token punctuation">(</span></span>
<span class="line">  width<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line">  height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">  padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> horizontal<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  background<span class="token punctuation">:</span> <span class="token class-name">BackgroundStyle</span><span class="token punctuation">(</span></span>
<span class="line">    color<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF4E322E</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    borderColor<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    borderWidth<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> document <span class="token operator">=</span> <span class="token class-name">DocumentRoot</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">final</span> element <span class="token operator">=</span> <span class="token class-name">TextElementComponent</span><span class="token punctuation">.</span><span class="token function">fromDocument</span><span class="token punctuation">(</span></span>
<span class="line">  document<span class="token punctuation">:</span> document<span class="token punctuation">,</span></span>
<span class="line">  style<span class="token punctuation">:</span> style<span class="token punctuation">,</span></span>
<span class="line">  position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看一个更详细的 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/rich_text_example.dart" target="_blank" rel="noopener noreferrer">富文本、格式化文本块渲染示例</a>。</p><p>关于文本渲染管道的基础机制的更多细节，请参见下面的“文本元素、文本节点和文本样式”。</p><h3 id="flame-markdown" tabindex="-1"><a class="header-anchor" href="#flame-markdown"><span>Flame Markdown</span></a></h3><p>为了更轻松地创建基于富文本的 <code>DocumentRoot</code>，从简单的带有粗体/斜体的字符串到完整的结构化文档，Flame 提供了 <code>flame_markdown</code> 桥接包，它将 <code>markdown</code> 库与 Flame 的文本渲染基础设施连接起来。</p><p>只需使用 <code>FlameMarkdown</code> 辅助类和 <code>toDocument</code> 方法将 markdown 字符串转换为 <code>DocumentRoot</code>（然后可以用来创建 <code>TextElementComponent</code>）：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/text.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame_markdown/flame_markdown.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">final</span> component <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">TextElementComponent</span><span class="token punctuation">.</span><span class="token function">fromDocument</span><span class="token punctuation">(</span></span>
<span class="line">  document<span class="token punctuation">:</span> <span class="token class-name">FlameMarkdown</span><span class="token punctuation">.</span><span class="token function">toDocument</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;# Header\\n&#39;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;\\n&#39;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;This is a **bold** text, and this is *italic*.\\n&#39;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;\\n&#39;</span></span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;This is a second paragraph.\\n&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span></span>
<span class="line">  position<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span></span>
<span class="line">  size<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基础设施" tabindex="-1"><a class="header-anchor" href="#基础设施"><span>基础设施</span></a></h2><p>如果你不使用 Flame 组件系统，希望理解文本渲染的基础架构，希望自定义使用的字体和样式，或创建自己的自定义渲染器，本节适用于你。</p><ul><li><code>TextRenderer</code>：渲染器知道“如何”来渲染文本；本质上它们包含任何字符串的样式信息。</li><li><code>TextElement</code>：元素是格式化、布局过的文本块，包括字符串（“什么”）和样式（“如何”）。</li></ul><p>以下图表展示了文本渲染管道的类和继承结构：</p><p><img src="`+t+`" alt=""></p><h3 id="textrenderer" tabindex="-1"><a class="header-anchor" href="#textrenderer"><span>TextRenderer</span></a></h3><p><code>TextRenderer</code> 是 Flame 用来渲染文本的抽象类。<code>TextRenderer</code> 的实现必须包含关于“如何”渲染文本的信息。字体样式、大小、颜色等。它应该能够通过 <code>format</code> 方法将这些信息与给定的文本字符串结合起来，以生成一个 <code>TextElement</code>。</p><p>Flame 提供了两个具体实现：</p><ul><li><code>TextPaint</code>：最常用，使用 Flutter 的 <code>TextPainter</code> 来渲染常规文本。</li><li><code>SpriteFontRenderer</code>：使用 <code>SpriteFont</code>（基于精灵图的字体）来渲染位图文本。</li><li><code>DebugTextRenderer</code>：仅用于金丝雀测试。</li></ul><p>但你也可以提供自己的实现以扩展到其他自定义形式的文本渲染。</p><p><code>TextRenderer</code> 的主要工作是将文本字符串格式化为一个 <code>TextElement</code>，然后可以将其渲染到屏幕上：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> textElement <span class="token operator">=</span> textRenderer<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Flame is awesome&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">textElement<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，渲染器提供了直接创建元素并渲染它的辅助方法：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">textRenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">  canvas<span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-literal"><span class="token string">&#39;Flame is awesome&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>topCenter<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="textpaint" tabindex="-1"><a class="header-anchor" href="#textpaint"><span>TextPaint</span></a></h4><p><code>TextPaint</code> 是 Flame 中内置的文本渲染实现。它基于 Flutter 的 <code>TextPainter</code> 类（因此得名），可以通过样式类 <code>TextStyle</code> 进行配置，后者包含所有用于渲染文本的排版信息；即字体大小和颜色、字体系列等。</p><p>除了样式之外，你还可以选择性地提供一个额外参数 <code>textDirection</code>（但通常已经设置为 <code>ltr</code> 或从左到右）。</p><p>示例用法：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token class-name">TextPaint</span> textPaint <span class="token operator">=</span> <span class="token class-name">TextPaint</span><span class="token punctuation">(</span></span>
<span class="line">  style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span></span>
<span class="line">    fontSize<span class="token punctuation">:</span> <span class="token number">48.0</span><span class="token punctuation">,</span></span>
<span class="line">    fontFamily<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Awesome Font&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：有几个包包含名为 <code>TextStyle</code> 的类。我们通过 <code>text</code> 模块导出了正确的版本（来自 Flutter）：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flame/text.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但如果你想显式导入它，请确保从 <code>package:flutter/painting.dart</code> 导入（或 material 或 widgets）。如果你还需要导入 <code>dart:ui</code>，你可能需要隐藏它的 <code>TextStyle</code> 版本，因为该模块包含一个同名的不同类：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/painting.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:ui&#39;</span></span> <span class="token keyword">hide</span> <span class="token class-name">TextStyle</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是 <code>TextStyle</code> 的一些常见属性（查看 <a href="https://api.flutter.dev/flutter/painting/TextStyle-class.html" target="_blank" rel="noopener noreferrer">完整的 <code>TextStyle</code> 属性列表</a>）：</p><ul><li><code>fontFamily</code>: 常用字体，如 Arial（默认），或你添加在 pubspec 中的自定义字体（参见 <a href="https://docs.flutter.dev/cookbook/design/fonts" target="_blank" rel="noopener noreferrer">如何添加自定义字体</a>)。</li><li><code>fontSize</code>: 字体大小，以 pts 为单位（默认 <code>24.0</code>）。</li><li><code>height</code>: 文本行高，是字体大小的倍数（默认 <code>null</code>）。</li><li><code>color</code>: 颜色，作为 <code>ui.Color</code>（默认白色）。</li></ul>`,66)),i("p",null,[n[1]||(n[1]=s("有关颜色以及如何创建它们的更多信息，请参见 ")),u(e,{to:"/guide/flame/rendering/palette.html"},{default:d(()=>n[0]||(n[0]=[s("颜色和调色板")])),_:1}),n[2]||(n[2]=s(" 指南。"))]),n[4]||(n[4]=a(`<h4 id="spritefontrenderer" tabindex="-1"><a class="header-anchor" href="#spritefontrenderer"><span>SpriteFontRenderer</span></a></h4><p>提供的另一种渲染器选项是 <code>SpriteFontRenderer</code>，它允许你提供基于精灵图的 <code>SpriteFont</code>。待补充...</p><h4 id="debugtextrenderer" tabindex="-1"><a class="header-anchor" href="#debugtextrenderer"><span>DebugTextRenderer</span></a></h4><p>此渲染器专用于金丝雀测试。在不同平台上的字体定义差异和抗锯齿算法的不同使得在金丝雀测试中渲染普通字体文本不可靠。此渲染器将文本呈现为每个单词都是实心矩形，从而使你可以测试元素的布局、定位和尺寸，而无需依赖字体渲染。</p><h2 id="内联文本元素" tabindex="-1"><a class="header-anchor" href="#内联文本元素"><span>内联文本元素</span></a></h2><p><code>TextElement</code> 是一个“预编译”、格式化并已布局的带有特定样式的文本块，准备好在给定位置进行渲染。</p><p><code>InlineTextElement</code> 实现 <code>TextElement</code> 接口，并且必须实现它们的两个方法，一个是教它如何移动，另一个是如何绘制到画布上：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">translate</span><span class="token punctuation">(</span>double dx<span class="token punctuation">,</span> double dy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法旨在由 <code>InlineTextElement</code> 的实现进行重写，并且用户通常不会直接调用；因为提供了一个方便的 <code>render</code> 方法：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span></span>
<span class="line">  <span class="token class-name">Vector2</span> position<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Anchor</span> anchor <span class="token operator">=</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>topLeft<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这允许元素在特定位置使用给定锚点进行渲染。</p><p>接口还强制要求（并提供了）与该 <code>InlineTextElement</code> 关联的 <code>LineMetrics</code> 对象的 getter，使你（以及 <code>render</code> 实现）能够访问与元素相关的尺寸信息（宽度、高度、上升等）：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">LineMetrics</span> <span class="token keyword">get</span> metrics<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="文本元素、文本节点和文本样式" tabindex="-1"><a class="header-anchor" href="#文本元素、文本节点和文本样式"><span>文本元素、文本节点和文本样式</span></a></h2><p>虽然常规渲染器总是直接使用 <code>InlineTextElement</code>，但有一个更大的底层基础设施可以用来渲染更丰富或格式化的文本。</p><p>文本元素是内联文本元素的超集，表示富文本文档中的一个任意渲染块。本质上，它们是具体且“物理”的：它们是在画布上准备好进行渲染的对象。</p><p>这一特性使它们与文本节点区分开来，后者是有结构的文本片段，并且与文本样式（代码中称为 <code>FlameTextStyle</code> 以便更好地与 Flutter 的 <code>TextStyle</code> 工作）一起使用，后者是描述任意文本段落应如何渲染的描述符。</p><p>因此，在最一般的情况下，用户会使用一个 <code>TextNode</code> 来描述所需的富文本部分；定义一个要应用的 <code>FlameTextStyle</code>；并使用这些来生成一个 <code>TextElement</code>。根据渲染类型，生成的 <code>TextElement</code> 将是一个 <code>InlineTextElement</code>，这使我们回到了正常的渲染流程。内联-文本类型的元素的独特属性是它暴露了一个可以用于高级渲染的 <code>LineMetrics</code>；而其他元素仅暴露一个简单的 <code>draw</code> 方法，该方法不知道尺寸和定位。</p><p>然而，如果目标是创建整个文档（多个块或段落），并用格式化文本增强，则必须使用其他类型的文本元素、文本节点和文本样式。为了渲染任意的 <code>TextElement</code>，你也可以选择使用 <code>TextElementComponent</code>（参见上面）。</p><p>查看<a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/rich_text_example.dart" target="_blank" rel="noopener noreferrer">此类使用的示例</a>。</p><h3 id="文本节点和文档根" tabindex="-1"><a class="header-anchor" href="#文本节点和文档根"><span>文本节点和文档根</span></a></h3><p>一个 <code>DocumentRoot</code> 本身并不是一个 <code>TextNode</code>（从继承关系上看），但它代表一个 <code>BlockNodes</code> 的分组，这些块布局了一个“页面”或“文档”的富文本，并分为多个块或段落。它代表整个文档并可以接收全局样式。</p><p>定义富文本文档的第一步是创建一个节点，这很可能是 <code>DocumentRoot</code>。</p><p>它首先包含顶级的 Block Nodes 列表，这些节点可以定义标题、段落或列。</p><p>然后每个块都可以包含其他块或内联文本节点，无论是纯文本节点还是具有特定格式的某些富文本。</p><p>请注意，由节点结构定义的层次结构也用于样式化目的，正如 <code>FlameTextStyle</code> 类中所定义的那样。</p><p>实际的节点都继承自 <code>TextNode</code>，并按以下图表分解：</p><p><img src="`+p+'" alt=""></p><h3 id="flame-文本样式" tabindex="-1"><a class="header-anchor" href="#flame-文本样式"><span>(Flame) 文本样式</span></a></h3><p>文本样式可以应用于节点以生成元素。它们全部继承自抽象类 <code>FlameTextStyle</code>（命名为此以避免与 Flutter 的 <code>TextStyle</code> 混淆）。</p><p>它们遵循树状结构，始终具有根部的 <code>DocumentStyle</code>；这种结构用于将级联样式应用到类似节点结构。实际上，它们非常类似于 CSS 定义。</p><p>完整的继承链可以在以下图表中看到：</p><p><img src="'+l+'" alt=""></p><h3 id="文本元素" tabindex="-1"><a class="header-anchor" href="#文本元素"><span>文本元素</span></a></h3><p>最后，我们有元素，它代表了一个节点（“什么”）与一个样式（“如何”的组合），因此表示一个预编译、已布局的富文本块以渲染到画布上。</p><p>内联文本元素也可以被看作是 <code>TextRenderer</code>（简化后的“如何”）和字符串（单行“什么”）的组合。</p><p>这是因为可以通过 <code>asTextRenderer</code> 方法将 <code>InlineTextStyle</code> 转换为特定的 <code>TextRenderer</code>，然后用于将每一行文本布局到唯一的 <code>InlineTextElement</code> 中。</p><p>当直接使用渲染器时，整个布局过程被跳过，并返回一个 <code>TextPainterTextElement</code> 或 <code>SpriteFontTextElement</code>。</p><p>正如你所看到的，两种定义元素的方式本质上是等效的。但仍然留下了两条路径用于文本渲染。选择哪一条？如何解决这个困境？</p><p>在有疑问的情况下，以下指导方针可以帮助你选择最适合你的路径：</p><ul><li>对于最简单的文本渲染方式，请使用 <code>TextPaint</code>（基本的渲染器实现）。 <ul><li>你可以使用 FCS 提供的组件 <code>TextComponent</code> 来完成此任务。</li></ul></li><li>渲染 Sprite 字体，必须使用 <code>SpriteFontRenderer</code>（接受 <code>SpriteFont</code> 的渲染器实现）。</li><li>对于多行文本的渲染，带有自动换行，有两个选项： <ul><li>使用 FCS <code>TextBoxComponent</code>，它使用任何文本渲染器来绘制每一行文本作为元素，并进行自己的布局和换行；</li><li>使用 Text Node &amp; Style 系统创建你的预布局元素。注意：目前没有相应的 FCS 组件。</li></ul></li><li>最后，为了获得格式化（或富）文本，必须使用文本节点和样式。</li></ul>',41))])}const g=c(m,[["render",v],["__file","text_rendering.qwen.html.vue"]]),f=JSON.parse('{"path":"/guide/flame/rendering/text_rendering.qwen.html","title":"文本渲染","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"文本组件","slug":"文本组件","link":"#文本组件","children":[{"level":3,"title":"TextComponent","slug":"textcomponent","link":"#textcomponent","children":[]},{"level":3,"title":"TextBoxComponent","slug":"textboxcomponent","link":"#textboxcomponent","children":[]},{"level":3,"title":"ScrollTextBoxComponent","slug":"scrolltextboxcomponent","link":"#scrolltextboxcomponent","children":[]},{"level":3,"title":"TextElementComponent","slug":"textelementcomponent","link":"#textelementcomponent","children":[]},{"level":3,"title":"Flame Markdown","slug":"flame-markdown","link":"#flame-markdown","children":[]}]},{"level":2,"title":"基础设施","slug":"基础设施","link":"#基础设施","children":[{"level":3,"title":"TextRenderer","slug":"textrenderer","link":"#textrenderer","children":[]}]},{"level":2,"title":"内联文本元素","slug":"内联文本元素","link":"#内联文本元素","children":[]},{"level":2,"title":"文本元素、文本节点和文本样式","slug":"文本元素、文本节点和文本样式","link":"#文本元素、文本节点和文本样式","children":[{"level":3,"title":"文本节点和文档根","slug":"文本节点和文档根","link":"#文本节点和文档根","children":[]},{"level":3,"title":"(Flame) 文本样式","slug":"flame-文本样式","link":"#flame-文本样式","children":[]},{"level":3,"title":"文本元素","slug":"文本元素","link":"#文本元素","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/rendering/text_rendering.qwen.md"}');export{g as comp,f as data};
