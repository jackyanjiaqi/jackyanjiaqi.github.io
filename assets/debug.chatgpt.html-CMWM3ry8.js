import{_ as o,c as p,f as s,a,b as e,d as l,e as i,r as c,o as d}from"./app-B8TszOv9.js";const r={};function u(m,n){const t=c("RouteLink");return d(),p("div",null,[n[8]||(n[8]=s('<h1 id="调试功能" tabindex="-1"><a class="header-anchor" href="#调试功能"><span>调试功能</span></a></h1><h2 id="flamegame-特性" tabindex="-1"><a class="header-anchor" href="#flamegame-特性"><span>FlameGame 特性</span></a></h2><p>Flame 为 <code>FlameGame</code> 类提供了一些调试功能。这些功能在将 <code>debugMode</code> 属性设置为 <code>true</code> 时启用（或将其重写为 <code>true</code>）。<br> 当启用 <code>debugMode</code> 时，每个 <code>PositionComponent</code> 将显示其边界尺寸，并且其位置会被显示在屏幕上。这样，你可以直观地验证组件的边界和位置。</p><p>查看<a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/components/debug_example.dart" target="_blank" rel="noopener noreferrer">FlameGame 调试功能的工作示例</a>。</p><h2 id="开发工具扩展" tabindex="-1"><a class="header-anchor" href="#开发工具扩展"><span>开发工具扩展</span></a></h2><p>如果你打开 <a href="https://docs.flutter.dev/tools/devtools/overview" target="_blank" rel="noopener noreferrer">Flutter DevTools</a>，你会看到一个新的标签页叫做 &quot;Flame&quot;。<br> 该标签页将展示关于当前游戏的信息，例如组件树的可视化、控制游戏播放、暂停和步进的功能、选定组件的信息等。</p><h2 id="fps" tabindex="-1"><a class="header-anchor" href="#fps"><span>FPS</span></a></h2><p>Flame 报告的 FPS 可能会比 Flutter DevTools 中报告的 FPS 稍低，具体取决于你所针对的平台。<br> 关于游戏运行 FPS 的真实来源应该是我们报告的 FPS，因为它是由我们的游戏循环所限制的。</p><h3 id="fpscomponent" tabindex="-1"><a class="header-anchor" href="#fpscomponent"><span>FpsComponent</span></a></h3><p><code>FpsComponent</code> 可以添加到组件树中的任何位置，它将跟踪游戏当前渲染的 FPS。如果你想在游戏中显示 FPS，可以使用 <code>FpsTextComponent</code>。</p><h3 id="fpstextcomponent" tabindex="-1"><a class="header-anchor" href="#fpstextcomponent"><span>FpsTextComponent</span></a></h3>',11)),a("p",null,[n[1]||(n[1]=a("code",null,"FpsTextComponent",-1)),n[2]||(n[2]=e(" 只是一个 ")),l(t,{to:"/guide/flame/rendering/text_rendering.html#textcomponent"},{default:i(()=>n[0]||(n[0]=[e("TextComponent")])),_:1}),n[3]||(n[3]=e("，它包装了 ")),n[4]||(n[4]=a("code",null,"FpsComponent",-1)),n[5]||(n[5]=e("，因为你通常希望在使用 ")),n[6]||(n[6]=a("code",null,"FpsComponent",-1)),n[7]||(n[7]=e(" 时显示当前的 FPS。"))]),n[9]||(n[9]=s(`<h3 id="childcountercomponent" tabindex="-1"><a class="header-anchor" href="#childcountercomponent"><span>ChildCounterComponent</span></a></h3><p><code>ChildCounterComponent</code> 是一个组件，每秒渲染一个组件（<code>target</code>）中类型为 <code>T</code> 的子组件数量。例如，以下代码将渲染游戏 <code>world</code> 中的 <code>SpriteAnimationComponent</code> 子组件数量：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token class-name">ChildCounterComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpriteAnimationComponent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span></span>
<span class="line">    target<span class="token punctuation">:</span> world<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timetrackcomponent" tabindex="-1"><a class="header-anchor" href="#timetrackcomponent"><span>TimeTrackComponent</span></a></h3><p>该组件允许开发者跟踪代码中所花费的时间。对于性能调试，跟踪代码中的某些部分所消耗的时间非常有用。</p><p>使用方法：将其添加到游戏中的某个位置（由于这是调试功能，建议仅在调试版本或调试构建中添加该组件）：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">TimeTrackComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，在你想要跟踪时间的代码部分，进行如下操作：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">TimeTrackComponent</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;MyComponent.update&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token class-name">TimeTrackComponent</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;MyComponent.update&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述调用，添加的 <code>TimeTrackComponent</code> 将以微秒为单位渲染经过的时间。</p>`,10))])}const h=o(r,[["render",u],["__file","debug.chatgpt.html.vue"]]),g=JSON.parse('{"path":"/guide/flame/other/debug.chatgpt.html","title":"调试功能","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"FlameGame 特性","slug":"flamegame-特性","link":"#flamegame-特性","children":[]},{"level":2,"title":"开发工具扩展","slug":"开发工具扩展","link":"#开发工具扩展","children":[]},{"level":2,"title":"FPS","slug":"fps","link":"#fps","children":[{"level":3,"title":"FpsComponent","slug":"fpscomponent","link":"#fpscomponent","children":[]},{"level":3,"title":"FpsTextComponent","slug":"fpstextcomponent","link":"#fpstextcomponent","children":[]},{"level":3,"title":"ChildCounterComponent","slug":"childcountercomponent","link":"#childcountercomponent","children":[]},{"level":3,"title":"TimeTrackComponent","slug":"timetrackcomponent","link":"#timetrackcomponent","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/other/debug.chatgpt.md"}');export{h as comp,g as data};
