import{_ as p,c as t,f as a,a as l,b as s,d as o,e as c,r as i,o as u}from"./app-B8TszOv9.js";const d={};function r(k,n){const e=i("RouteLink");return u(),t("div",null,[n[3]||(n[3]=a('<h1 id="routercomponent" tabindex="-1"><a class="header-anchor" href="#routercomponent"><span>RouterComponent</span></a></h1><p><strong>RouterComponent</strong> 的作用是管理游戏中多个屏幕之间的导航。它的功能类似于 Flutter 的 <a href="https://api.flutter.dev/flutter/widgets/Navigator-class.html" target="_blank" rel="noopener noreferrer">Navigator</a> 类，区别在于它是与 Flame 组件而非 Flutter 小部件一起使用的。</p><p>一个典型的游戏通常包含多个页面：启动画面、开始菜单页面、设置页面、致谢页面、主游戏页面、多个弹窗等。路由器将组织所有这些目的地并允许你在它们之间进行切换。</p><p>内部，<code>RouterComponent</code> 包含一个路由栈。当你请求显示某个路由时，它将被放置在栈中的顶部。稍后你可以使用 <code>pop()</code> 方法从栈中移除最上面的页面。路由器中的页面通过它们独特的名称进行访问。</p>',4)),l("p",null,[n[1]||(n[1]=s("每个页面可以是透明的或不透明的。如果一个页面是不透明的，那么栈中它下方的页面不会被渲染并且不会接收指针事件（如点击或拖动）。相反，如果一个页面是透明的，那么它下方的页面将会被渲染并正常接收事件。这种透明页面对于实现模态对话框、物品栏或对话 UI 等非常有用。如果你希望你的路由在视觉上是透明的，但下方的路由不接收事件，请确保在你的路由中添加一个背景组件，使用 ")),o(e,{to:"/guide/flame/inputs/inputs.html"},{default:c(()=>n[0]||(n[0]=[s("事件捕捉混合类")])),_:1}),n[2]||(n[2]=s(" 来捕捉事件。"))]),n[4]||(n[4]=a(`<p>使用示例：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">RouterComponent</span> router<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="line">      router <span class="token operator">=</span> <span class="token class-name">RouterComponent</span><span class="token punctuation">(</span></span>
<span class="line">        routes<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">&#39;home&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">Route</span><span class="token punctuation">(</span><span class="token class-name">HomePage</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">&#39;level-selector&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">Route</span><span class="token punctuation">(</span><span class="token class-name">LevelSelectorPage</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">&#39;settings&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">Route</span><span class="token punctuation">(</span><span class="token class-name">SettingsPage</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">,</span> transparent<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">&#39;pause&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">PauseRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token string-literal"><span class="token string">&#39;confirm-dialog&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">OverlayRoute</span><span class="token punctuation">.</span><span class="token function">existing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        initialRoute<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;home&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">PauseRoute</span> <span class="token keyword">extends</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">如果你导入的某些包中也有名为 \`Route\` 的类，请使用 \`hide Route\` 隐藏它</span>
<span class="line"></span>
<span class="line">例如：\`import &#39;package:flutter/material.dart&#39; hide Route;\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="route" tabindex="-1"><a class="header-anchor" href="#route"><span>Route</span></a></h2><p><strong>Route</strong> 组件保存有关特定页面内容的信息。<code>Route</code> 被作为子组件挂载到 <code>RouterComponent</code> 上。</p><p><code>Route</code> 的主要属性是它的 <code>builder</code> —— 这个函数用来创建包含页面内容的组件。</p><p>此外，路由可以是透明的或不透明的（默认）。不透明的路由会阻止下方路由的渲染或接收指针事件，透明路由则不会。作为经验法则，如果路由是全屏的，应该声明为不透明的；如果只是覆盖屏幕的一部分，则应该是透明的。</p><p>默认情况下，路由在从栈中弹出后会保持页面组件的状态，<code>builder</code> 函数只会在路由第一次激活时被调用。将 <code>maintainState</code> 设置为 <code>false</code> 会在路由从栈中弹出后丢弃页面组件，每次激活路由时都调用 <code>builder</code> 函数。</p><p>当前路由可以使用 <code>pushReplacementNamed</code> 或 <code>pushReplacement</code> 进行替换。这两个方法的作用是，先对当前路由执行 <code>pop</code> 操作，然后执行 <code>pushNamed</code> 或 <code>pushRoute</code>。</p><h2 id="worldroute" tabindex="-1"><a class="header-anchor" href="#worldroute"><span>WorldRoute</span></a></h2><p><strong>WorldRoute</strong> 是一个特殊的路由，允许通过路由设置活动的游戏世界。这些路由可以用于游戏中实现不同关卡之间的切换，关卡通常实现为独立的世界。</p><p>默认情况下，<code>WorldRoute</code> 会用新的世界替换当前世界，且默认情况下它会保持世界的状态，即使世界被从栈中弹出。如果你希望每次激活路由时重新创建世界，可以将 <code>maintainState</code> 设置为 <code>false</code>。</p><p>如果你没有使用内置的 <code>CameraComponent</code>，可以在构造函数中显式传入你想要使用的相机。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> router <span class="token operator">=</span> <span class="token class-name">RouterComponent</span><span class="token punctuation">(</span></span>
<span class="line">  routes<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;level1&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">WorldRoute</span><span class="token punctuation">(</span><span class="token class-name">MyWorld1</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;level2&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">WorldRoute</span><span class="token punctuation">(</span><span class="token class-name">MyWorld2</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">,</span> maintainState<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyWorld1</span> <span class="token keyword">extends</span> <span class="token class-name">World</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BackgroundComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">PlayerComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyWorld2</span> <span class="token keyword">extends</span> <span class="token class-name">World</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token metadata function">@override</span></span>
<span class="line">   <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BackgroundComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">PlayerComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">EnemyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="overlayroute" tabindex="-1"><a class="header-anchor" href="#overlayroute"><span>OverlayRoute</span></a></h2><p><strong>OverlayRoute</strong> 是一个特殊的路由，允许通过路由添加游戏覆盖层。这些路由默认是透明的。</p><p><code>OverlayRoute</code> 有两个构造函数。第一个构造函数需要一个 builder 函数来描述如何构建覆盖层的组件。第二个构造函数可以在 <code>GameWidget</code> 中已指定 builder 函数时使用：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> router <span class="token operator">=</span> <span class="token class-name">RouterComponent</span><span class="token punctuation">(</span></span>
<span class="line">  routes<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;ok-dialog&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">OverlayRoute</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span>context<span class="token punctuation">,</span> game<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span></span>
<span class="line">          child<span class="token punctuation">:</span> <span class="token class-name">DecoratedContainer</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// OverlayRoute</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&#39;confirm-dialog&#39;</span></span><span class="token punctuation">:</span> <span class="token class-name">OverlayRoute</span><span class="token punctuation">.</span><span class="token function">existing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>GameWidget</code> 中定义的覆盖层，不需要在路由映射中声明；你可以通过 <code>RouterComponent.pushOverlay()</code> 来添加它们。一旦覆盖层路由被注册，它可以通过常规的 <code>.pushNamed()</code> 方法或 <code>.pushOverlay()</code> 方法激活——这两种方法的作用完全相同，尽管你可以使用后者来使代码更加明确，表示正在添加的是一个覆盖层而不是常规路由。</p><p>当前覆盖层可以使用 <code>pushReplacementOverlay</code> 进行替换。该方法根据覆盖层的状态，执行 <code>pushReplacementNamed</code> 或 <code>pushReplacement</code>。</p><h2 id="valueroute" tabindex="-1"><a class="header-anchor" href="#valueroute"><span>ValueRoute</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">:sources: ../flame/examples</span>
<span class="line">:page: value_route</span>
<span class="line">:show: widget code infobox</span>
<span class="line">:width: 280</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ValueRoute</strong> 是一种路由，当它从栈中弹出时，会返回一个值。这类路由可以用于要求用户提供反馈的对话框。</p><p>使用 <code>ValueRoute</code> 需要两个步骤：</p><ol><li><p>创建一个继承自 <code>ValueRoute&lt;T&gt;</code> 的路由类，其中 <code>T</code> 是路由将返回的值的类型。在该类中重写 <code>build()</code> 方法来构建将显示的组件。组件应该使用 <code>completeWith(value)</code> 方法来弹出路由并返回指定的值。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">YesNoDialog</span> <span class="token keyword">extends</span> <span class="token class-name">ValueRoute</span><span class="token generics"><span class="token punctuation">&lt;</span>bool<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">YesNoDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Component</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">PositionComponent</span><span class="token punctuation">(</span></span>
<span class="line">      children<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token class-name">RectangleComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">TextComponent</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> text<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span></span>
<span class="line">          text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Yes&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">          action<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">completeWith</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span></span>
<span class="line">          text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;No&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">          action<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">completeWith</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>Router.pushAndWait()</code> 来显示该路由，该方法返回一个 future，最终会解析为从路由返回的值。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> game<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">pushAndWait</span><span class="token punctuation">(</span><span class="token class-name">YesNoDialog</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Are you sure?&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ... 用户确认</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ... 用户未确认</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,25))])}const v=p(d,[["render",r],["__file","router.chatgpt.html.vue"]]),b=JSON.parse('{"path":"/guide/flame/router.chatgpt.html","title":"RouterComponent","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Route","slug":"route","link":"#route","children":[]},{"level":2,"title":"WorldRoute","slug":"worldroute","link":"#worldroute","children":[]},{"level":2,"title":"OverlayRoute","slug":"overlayroute","link":"#overlayroute","children":[]},{"level":2,"title":"ValueRoute","slug":"valueroute","link":"#valueroute","children":[]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/router.chatgpt.md"}');export{v as comp,b as data};
