import{_ as a,c as e,f as s,o as t}from"./app-B8TszOv9.js";const o={};function i(c,n){return t(),e("div",null,n[0]||(n[0]=[s(`<h1 id="drag-events" tabindex="-1"><a class="header-anchor" href="#drag-events"><span>Drag Events</span></a></h1><p><strong>Drag events</strong> occur when the user moves their finger across the screen of the device, or when they move the mouse while holding its button down.</p><p>Multiple drag events can occur at the same time, if the user is using multiple fingers. Such cases will be handled correctly by Flame, and you can even keep track of the events by using their <code>pointerId</code> property.</p><p>For those components that you want to respond to drags, add the <code>DragCallbacks</code> mixin.</p><ul><li>This mixin adds four overridable methods to your component: <code>onDragStart</code>, <code>onDragUpdate</code>, <code>onDragEnd</code>, and <code>onDragCancel</code>. By default, these methods do nothing -- they need to be overridden in order to perform any function.</li><li>In addition, the component must implement the <code>containsLocalPoint()</code> method (already implemented in <code>PositionComponent</code>, so most of the time you don&#39;t need to do anything here) -- this method allows Flame to know whether the event occurred within the component or not.</li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">DragCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token metadata function">@override</span></span>
<span class="line">   <span class="token keyword">void</span> <span class="token function">onDragStart</span><span class="token punctuation">(</span><span class="token class-name">DragStartEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// Do something in response to a drag event</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h2><p>In this example you can use drag gestures to either drag star-like shapes across the screen, or to draw curves inside the magenta rectangle.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">:sources: ../flame/examples</span>
<span class="line">:page: drag_events</span>
<span class="line">:show: widget code</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="drag-anatomy" tabindex="-1"><a class="header-anchor" href="#drag-anatomy"><span>Drag anatomy</span></a></h2><h3 id="ondragstart" tabindex="-1"><a class="header-anchor" href="#ondragstart"><span>onDragStart</span></a></h3><p>This is the first event that occurs in a drag sequence. Usually, the event will be delivered to the topmost component at the point of touch with the <code>DragCallbacks</code> mixin. However, by setting the flag <code>event.continuePropagation</code> to true, you can allow the event to propagate to the components below.</p><p>The <code>DragStartEvent</code> object associated with this event will contain the coordinate of the point where the event has originated. This point is available in multiple coordinate system: <code>devicePosition</code> is given in the coordinate system of the entire device, <code>canvasPosition</code> is in the coordinate system of the game widget, and <code>localPosition</code> provides the position in the component&#39;s local coordinate system.</p><p>Any component that receives <code>onDragStart</code> will later be receiving <code>onDragUpdate</code> and <code>onDragEnd</code> events as well.</p><h3 id="ondragupdate" tabindex="-1"><a class="header-anchor" href="#ondragupdate"><span>onDragUpdate</span></a></h3><p>This event is fired continuously as user drags their finger across the screen. It will not fire if the user is holding their finger still.</p><p>The default implementation delivers this event to all the components that received the previous <code>onDragStart</code> with the same pointer id. If the point of touch is still within the component, then <code>event.localPosition</code> will give the position of that point in the local coordinate system. However, if the user moves their finger away from the component, the property <code>event.localPosition</code> will return a point whose coordinates are NaNs. Likewise, the <code>event.renderingTrace</code> in this case will be empty. However, the <code>canvasPosition</code> and <code>devicePosition</code> properties of the event will be valid.</p><p>In addition, the <code>DragUpdateEvent</code> will contain <code>delta</code> -- the amount the finger has moved since the previous <code>onDragUpdate</code>, or since the <code>onDragStart</code> if this is the first drag-update after a drag- start.</p><p>The <code>event.timestamp</code> property measures the time elapsed since the beginning of the drag. It can be used, for example, to compute the speed of the movement.</p><h3 id="ondragend" tabindex="-1"><a class="header-anchor" href="#ondragend"><span>onDragEnd</span></a></h3><p>This event is fired when the user lifts their finger and thus stops the drag gesture. There is no position associated with this event.</p><h3 id="ondragcancel" tabindex="-1"><a class="header-anchor" href="#ondragcancel"><span>onDragCancel</span></a></h3><p>The precise semantics when this event occurs is not clear, so we provide a default implementation which simply converts this event into an <code>onDragEnd</code>.</p><h2 id="mixins" tabindex="-1"><a class="header-anchor" href="#mixins"><span>Mixins</span></a></h2><h3 id="dragcallbacks" tabindex="-1"><a class="header-anchor" href="#dragcallbacks"><span>DragCallbacks</span></a></h3><p>The <code>DragCallbacks</code> mixin can be added to any <code>Component</code> in order for that component to start receiving drag events.</p><p>This mixin adds methods <code>onDragStart</code>, <code>onDragUpdate</code>, <code>onDragEnd</code>, and <code>onDragCancel</code> to the component, which by default don&#39;t do anything, but can be overridden to implement any real functionality.</p><p>Another crucial detail is that a component will only receive drag events that originate <em>within</em> that component, as judged by the <code>containsLocalPoint()</code> function. The commonly-used <code>PositionComponent</code> class provides such an implementation based on its <code>size</code> property. Thus, if your component derives from a <code>PositionComponent</code>, then make sure that you set its size correctly. If, however, your component derives from the bare <code>Component</code>, then the <code>containsLocalPoint()</code> method must be implemented manually.</p><p>If your component is a part of a larger hierarchy, then it will only receive drag events if its ancestors have all implemented the <code>containsLocalPoint</code> correctly.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">DragCallbacks</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span>size<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">final</span> _paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  bool _isDragged <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onDragStart</span><span class="token punctuation">(</span><span class="token class-name">DragStartEvent</span> event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _isDragged <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onDragUpdate</span><span class="token punctuation">(</span><span class="token class-name">DragUpdateEvent</span> event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> position <span class="token operator">+=</span> event<span class="token punctuation">.</span>delta<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onDragEnd</span><span class="token punctuation">(</span><span class="token class-name">DragEndEvent</span> event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _isDragged <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    _paint<span class="token punctuation">.</span>color <span class="token operator">=</span> _isDragged<span class="token operator">?</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red <span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">;</span></span>
<span class="line">    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">toRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paint<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30)]))}const l=a(o,[["render",i],["__file","drag_events.html.vue"]]),r=JSON.parse('{"path":"/guide/flame/inputs/drag_events.html","title":"Drag Events","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Demo","slug":"demo","link":"#demo","children":[]},{"level":2,"title":"Drag anatomy","slug":"drag-anatomy","link":"#drag-anatomy","children":[{"level":3,"title":"onDragStart","slug":"ondragstart","link":"#ondragstart","children":[]},{"level":3,"title":"onDragUpdate","slug":"ondragupdate","link":"#ondragupdate","children":[]},{"level":3,"title":"onDragEnd","slug":"ondragend","link":"#ondragend","children":[]},{"level":3,"title":"onDragCancel","slug":"ondragcancel","link":"#ondragcancel","children":[]}]},{"level":2,"title":"Mixins","slug":"mixins","link":"#mixins","children":[{"level":3,"title":"DragCallbacks","slug":"dragcallbacks","link":"#dragcallbacks","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/inputs/drag_events.md"}');export{l as comp,r as data};
