import{_ as s,c as a,f as e,o as t}from"./app-B8TszOv9.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="layers-and-snapshots" tabindex="-1"><a class="header-anchor" href="#layers-and-snapshots"><span>Layers and Snapshots</span></a></h1><p>Layers and snapshots share some common features, including the ability to pre-render and cache objects for improved performance. However, they also have unique features which make them better suited for different use-cases.</p><p><code>Snapshot</code> is a mixin that can be added to any <code>PositionComponent</code>. Use this for:</p><ul><li>Mixing in to existing game objects (that are <code>PositionComponents</code>).</li><li>Caching game objects, such as sprites, that are complex to render.</li><li>Drawing the same object many times without rendering it each time.</li><li>Capturing an image snapshot to save as a screenshot (for example).</li></ul><p><code>Layer</code> is a class. Use or extend this class for:</p><ul><li>Structuring your game with logical layers (e.g. UI, foreground, main, background).</li><li>Grouping objects to form a complex scene, and then caching it (e.g. a background layer).</li><li>Processor support. Layers allow user-defined processors to run pre- and post- render.</li></ul><h2 id="layers" tabindex="-1"><a class="header-anchor" href="#layers"><span>Layers</span></a></h2><p>Layers allow you to group rendering by context, as well as allow you to pre-render things. This enables, for example, rendering parts of your game that don&#39;t change much in memory, like a background. By doing this, you&#39;ll free processing power for more dynamic content that needs to be rendered every game tick.</p><p>There are two types of layers on Flame:</p><ul><li><code>DynamicLayer</code>: For things that are moving or changing.</li><li><code>PreRenderedLayer</code>: For things that are static.</li></ul><h3 id="dynamiclayer" tabindex="-1"><a class="header-anchor" href="#dynamiclayer"><span>DynamicLayer</span></a></h3><p>Dynamic layers are layers that are rendered every time that they are drawn on the canvas. As the name suggests, it is meant for dynamic content and is most useful for grouping rendering of objects that have the same context.</p><p>Usage example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">GameLayer</span> <span class="token keyword">extends</span> <span class="token class-name">DynamicLayer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">MyGame</span> game<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">GameLayer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">drawLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    game<span class="token punctuation">.</span>playerSprite<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">      canvas<span class="token punctuation">,</span></span>
<span class="line">      position<span class="token punctuation">:</span> game<span class="token punctuation">.</span>playerPosition<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    game<span class="token punctuation">.</span>enemySprite<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">      canvas<span class="token punctuation">,</span></span>
<span class="line">      position<span class="token punctuation">:</span> game<span class="token punctuation">.</span>enemyPosition<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Other methods omitted...</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    gameLayer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x and y can be provided as optional position arguments</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prerenderedlayer" tabindex="-1"><a class="header-anchor" href="#prerenderedlayer"><span>PreRenderedLayer</span></a></h3><p>Pre-rendered layers are rendered only once, cached in memory and then just replicated on the game canvas afterwards. They are useful for caching content that doesn&#39;t change during the game, like a background for example.</p><p>Usage example:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">BackgroundLayer</span> <span class="token keyword">extends</span> <span class="token class-name">PreRenderedLayer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">Sprite</span> sprite<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">BackgroundLayer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">drawLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sprite<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">      canvas<span class="token punctuation">,</span></span>
<span class="line">      position<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Other methods omitted...</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// x and y can be provided as optional position arguments.</span></span>
<span class="line">    backgroundLayer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="layer-processors" tabindex="-1"><a class="header-anchor" href="#layer-processors"><span>Layer Processors</span></a></h3><p>Flame also provides a way to add processors on your layer, which are ways to add effects on the entire layer. At the moment, out of the box, only the <code>ShadowProcessor</code> is available, this processor renders a back drop shadow on your layer.</p><p>To add processors to your layer, just add them to the layer <code>preProcessors</code> or <code>postProcessors</code> list, like so:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// Works the same for both DynamicLayer and PreRenderedLayer</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BackgroundLayer</span> <span class="token keyword">extends</span> <span class="token class-name">PreRenderedLayer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">Sprite</span> sprite<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">BackgroundLayer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sprite<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    preProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ShadowProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">drawLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* omitted */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Custom processors can be created by extending the <code>LayerProcessor</code> class.</p><p>See <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/rendering/layers_example.dart" target="_blank" rel="noopener noreferrer">a working example of layers</a>.</p><h2 id="snapshots" tabindex="-1"><a class="header-anchor" href="#snapshots"><span>Snapshots</span></a></h2><p>Snapshots are an alternative to layers. The <code>Snapshot</code> mixin can be applied to any <code>PositionComponent</code>.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SnapshotComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">Snapshot</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SnapshotComponent</span> root<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Add a snapshot component.</span></span>
<span class="line">    root <span class="token operator">=</span> <span class="token class-name">SnapshotComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="render-as-a-snapshot" tabindex="-1"><a class="header-anchor" href="#render-as-a-snapshot"><span>Render as a snapshot</span></a></h3><p>Setting <code>renderSnapshot</code> to <code>true</code> (the default) on a snapshot-enabled component behaves similarly to a <code>PreRenderedLayer</code>. The component is rendered only once, cached in memory and then just replicated on the game canvas afterwards. This is useful for caching content that doesn&#39;t change during the game, like a background.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SnapshotComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">Snapshot</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SnapshotComponent</span> root<span class="token punctuation">;</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SpriteComponent</span> background1<span class="token punctuation">;</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SpriteComponent</span> background2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Add a snapshot component.</span></span>
<span class="line">    root <span class="token operator">=</span> <span class="token class-name">SnapshotComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Add some children.</span></span>
<span class="line">    <span class="token keyword">final</span> background1Sprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;background1.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    background1 <span class="token operator">=</span> <span class="token class-name">SpriteComponent</span><span class="token punctuation">(</span>sprite<span class="token punctuation">:</span> background1Sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>background1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">final</span> background2Sprite <span class="token operator">=</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;background2.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    background2 <span class="token operator">=</span> <span class="token class-name">SpriteComponent</span><span class="token punctuation">(</span>sprite<span class="token punctuation">:</span> background2Sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>background2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// root will now render once (itself and all its children) and then cache</span></span>
<span class="line">    <span class="token comment">// the result. On subsequent render calls, root itself, nor any of its</span></span>
<span class="line">    <span class="token comment">// children, will be rendered. The snapshot will be used instead for</span></span>
<span class="line">    <span class="token comment">// improved performance.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="regenerating-a-snapshot" tabindex="-1"><a class="header-anchor" href="#regenerating-a-snapshot"><span>Regenerating a snapshot</span></a></h4><p>A snapshot-enabled component will generate a snapshot of its entire tree, including its children. If any of the children change (for example, their position changes, or they are animated), call <code>takeSnapshot</code> to update the cached snapshot. If they are changing very frequently, it&#39;s best not to use a <code>Snapshot</code> because there will be no performance benefit.</p><p>A component rendering a snapshot can still be transformed without incurring any performance cost. Once a snapshot has been taken, the component may still be scaled, moved and rotated. However, if the content of the component changes (what it is rendering) then the snapshot must be regenerated by calling <code>takeSnapshot</code>.</p><h3 id="taking-a-snapshot" tabindex="-1"><a class="header-anchor" href="#taking-a-snapshot"><span>Taking a snapshot</span></a></h3><p>A snapshot-enabled component can be used to generate a snapshot at any time, even if <code>renderSnapshot</code> is set to false. This is useful for taking screen-grabs or any other purpose when it may be useful to have a static snapshot of all or part of your game.</p><p>A snapshot is always generated with no transform applied - i.e. as if the snapshot-enabled component is at position (0,0) and has no scale or rotation applied.</p><p>A snapshot is saved as a <code>Picture</code>, but it can be converted to an <code>Image</code> using <code>snapshotToImage</code>.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SnapshotComponent</span> <span class="token keyword">extends</span> <span class="token class-name">PositionComponent</span> <span class="token keyword">with</span> <span class="token class-name">Snapshot</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line">  late <span class="token keyword">final</span> <span class="token class-name">SnapshotComponent</span> root<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Add a snapshot component, but don&#39;t use its render mode.</span></span>
<span class="line">    root <span class="token operator">=</span> <span class="token class-name">SnapshotComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>renderSnapshot <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Other code omitted.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Call something like this to take an image snapshot at any time.</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    root<span class="token punctuation">.</span><span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> image <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">snapshotToImage</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="snapshots-that-are-cropped-or-off-center" tabindex="-1"><a class="header-anchor" href="#snapshots-that-are-cropped-or-off-center"><span>Snapshots that are cropped or off-center</span></a></h3><p>Sometimes your snapshot <code>Image</code> may appear cropped, or not in the position you expected.</p><p>This is because the contents of a <code>Picture</code> can be positioned anywhere with respect to the origin, but when it is converted to an <code>Image</code>, the image always starts from <code>0,0</code>. This means that anything with a -ve position will be cropped.</p><p>The best way to deal with this is to ensure that your <code>Snapshot</code> component is always at position <code>0,0</code> with respect to your game and you never move it. This means that the image will usually contain what you expect it to.</p><p>However, this is not always possible. To move (or rotate, or scale etc) the snapshot before converting it to an image, pass a transformation matrix to <code>snapshotToImage</code> like so:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token comment">// Call something like this to take an image snapshot at any time.</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Prepare a matrix to move the snapshot by 200,50.</span></span>
<span class="line">  <span class="token keyword">final</span> matrix <span class="token operator">=</span> <span class="token class-name">Matrix4</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">200.0</span><span class="token punctuation">,</span><span class="token number">50.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  root<span class="token punctuation">.</span><span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">final</span> image <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">snapshotToImage</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> transform<span class="token punctuation">:</span> matrix<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44)]))}const i=s(p,[["render",o],["__file","layers.html.vue"]]),r=JSON.parse('{"path":"/guide/flame/rendering/layers.html","title":"Layers and Snapshots","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Layers","slug":"layers","link":"#layers","children":[{"level":3,"title":"DynamicLayer","slug":"dynamiclayer","link":"#dynamiclayer","children":[]},{"level":3,"title":"PreRenderedLayer","slug":"prerenderedlayer","link":"#prerenderedlayer","children":[]},{"level":3,"title":"Layer Processors","slug":"layer-processors","link":"#layer-processors","children":[]}]},{"level":2,"title":"Snapshots","slug":"snapshots","link":"#snapshots","children":[{"level":3,"title":"Render as a snapshot","slug":"render-as-a-snapshot","link":"#render-as-a-snapshot","children":[]},{"level":3,"title":"Taking a snapshot","slug":"taking-a-snapshot","link":"#taking-a-snapshot","children":[]},{"level":3,"title":"Snapshots that are cropped or off-center","slug":"snapshots-that-are-cropped-or-off-center","link":"#snapshots-that-are-cropped-or-off-center","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/rendering/layers.md"}');export{i as comp,r as data};
