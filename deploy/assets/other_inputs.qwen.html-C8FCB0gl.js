import{_ as o,c as l,a as s,d as t,e as p,b as a,f as c,r as i,o as u}from"./app-B8TszOv9.js";const d={};function r(k,n){const e=i("RouteLink");return u(),l("div",null,[n[4]||(n[4]=s("h1",{id:"其他输入和辅助工具",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#其他输入和辅助工具"},[s("span",null,"其他输入和辅助工具")])],-1)),n[5]||(n[5]=s("p",null,"这包括除了键盘和鼠标之外的输入方法文档。",-1)),n[6]||(n[6]=s("p",null,"对于其他输入文档，请参见：",-1)),s("ul",null,[s("li",null,[t(e,{to:"/guide/flame/inputs/gesture_input.html"},{default:p(()=>n[0]||(n[0]=[a("手势输入")])),_:1}),n[1]||(n[1]=a("：用于鼠标和触摸指针的手势"))]),s("li",null,[t(e,{to:"/guide/flame/inputs/keyboard_input.html"},{default:p(()=>n[2]||(n[2]=[a("键盘输入")])),_:1}),n[3]||(n[3]=a("：用于按键操作"))])]),n[7]||(n[7]=c(`<h2 id="摇杆" tabindex="-1"><a class="header-anchor" href="#摇杆"><span>摇杆</span></a></h2><p>Flame 提供了一个组件，可以创建一个虚拟摇杆来获取游戏的输入。 要使用此功能，您需要创建一个 <code>JoystickComponent</code>，根据您的需求进行配置，并将其添加到游戏中。</p><p>查看以下示例以获得更好的理解：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> images<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;joystick.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> sheet <span class="token operator">=</span> <span class="token class-name">SpriteSheet</span><span class="token punctuation">.</span><span class="token function">fromColumnsAndRows</span><span class="token punctuation">(</span></span>
<span class="line">      image<span class="token punctuation">:</span> image<span class="token punctuation">,</span></span>
<span class="line">      columns<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span></span>
<span class="line">      rows<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> joystick <span class="token operator">=</span> <span class="token class-name">JoystickComponent</span><span class="token punctuation">(</span></span>
<span class="line">      knob<span class="token punctuation">:</span> <span class="token class-name">SpriteComponent</span><span class="token punctuation">(</span></span>
<span class="line">        sprite<span class="token punctuation">:</span> sheet<span class="token punctuation">.</span><span class="token function">getSpriteById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      background<span class="token punctuation">:</span> <span class="token class-name">SpriteComponent</span><span class="token punctuation">(</span></span>
<span class="line">        sprite<span class="token punctuation">:</span> sheet<span class="token punctuation">.</span><span class="token function">getSpriteById</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      margin<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">final</span> player <span class="token operator">=</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>joystick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>joystick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">SpriteComponent</span> <span class="token keyword">with</span> <span class="token class-name">HasGameRef</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>joystick<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span></span>
<span class="line">        anchor<span class="token punctuation">:</span> <span class="token class-name">Anchor</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span></span>
<span class="line">        size<span class="token punctuation">:</span> <span class="token class-name">Vector2</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/// 像素/秒</span></span>
<span class="line">  double maxSpeed <span class="token operator">=</span> <span class="token number">300.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">JoystickComponent</span> joystick<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    sprite <span class="token operator">=</span> <span class="token keyword">await</span> gameRef<span class="token punctuation">.</span><span class="token function">loadSprite</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;layers/player.png&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    position <span class="token operator">=</span> gameRef<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>double dt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>joystick<span class="token punctuation">.</span>direction <span class="token operator">!=</span> <span class="token class-name">JoystickDirection</span><span class="token punctuation">.</span>idle<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      position<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>joystick<span class="token punctuation">.</span>relativeDelta <span class="token operator">*</span> maxSpeed <span class="token operator">*</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      angle <span class="token operator">=</span> joystick<span class="token punctuation">.</span>delta<span class="token punctuation">.</span><span class="token function">screenAngle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们创建了 <code>MyGame</code> 和 <code>Player</code> 类。 <code>MyGame</code> 创建了一个摇杆，并在创建 <code>Player</code> 时将其传递给 <code>Player</code>。 在 <code>Player</code> 类中，我们会根据摇杆的当前状态进行操作。</p><p>摇杆有几项属性会随着其状态的变化而变化。</p><p>以下属性用于了解摇杆的状态：</p><ul><li><code>intensity</code>: 摇杆中心到边缘（或 <code>knobRadius</code> 如果已设置）之间的拖动百分比 [0.0, 1.0]。</li><li><code>delta</code>: 摇杆中心点的绝对拖动量，定义为 <code>Vector2</code>。</li><li><code>relativeDelta</code>: 摇杆当前从其基准位置到边缘的拉拽方向和百分比（表示为 <code>Vector2</code>）。</li></ul><p>如果您想与摇杆一起创建按钮，请查看 <a href="#hudbuttoncomponent"><code>HudButtonComponent</code></a>。</p><p>有关实现摇杆的完整代码，请参见 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/input/joystick_example.dart" target="_blank" rel="noopener noreferrer">摇杆示例</a>。 您也可以查看 <a href="https://examples.flame-engine.org/#/Input_Joystick" target="_blank" rel="noopener noreferrer">摇杆组件的实际演示</a>，以了解游戏集成中的实际摇杆输入功能。</p><p>为了增加挑战性，探索 <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/input/joystick_advanced_example.dart" target="_blank" rel="noopener noreferrer">高级摇杆示例</a>。 在 <a href="https://examples.flame-engine.org/#/Input_Joystick_Advanced" target="_blank" rel="noopener noreferrer">实时演示</a> 中查看高级功能的其他用途。</p><h2 id="hudbuttoncomponent" tabindex="-1"><a class="header-anchor" href="#hudbuttoncomponent"><span>HudButtonComponent</span></a></h2><p><code>HudButtonComponent</code> 是一个按钮，可以通过与 <code>Viewport</code> 边缘的距离而不是位置来定义。它接受两个 <code>PositionComponent</code> 参数：<code>button</code> 和 <code>buttonDown</code>。前者用于按钮空闲状态时显示，后者用于按钮被按下时显示。如果不想在按下时更改按钮外观或通过 <code>button</code> 组件处理，则第二个参数是可选的。</p><p>正如名称所示，默认情况下此按钮是一个 HUD（头戴式显示器），这意味着即使游戏中的相机移动，它也会在屏幕上保持静态位置。您还可以通过设置 <code>hudButtonComponent.respectCamera = true;</code> 将其用作非 HUD 组件。</p><p>如果您想在按钮被按下和释放时执行操作（这是常见做法），可以通过传入回调函数作为 <code>onPressed</code> 和 <code>onReleased</code> 参数来实现，或者扩展该组件并重写 <code>onTapDown</code>, <code>onTapUp</code> 和/或 <code>onTapCancel</code> 并在此处实现逻辑。</p><h2 id="spritebuttoncomponent" tabindex="-1"><a class="header-anchor" href="#spritebuttoncomponent"><span>SpriteButtonComponent</span></a></h2><p><code>SpriteButtonComponent</code> 是一个由两个 <code>Sprite</code> 定义的按钮，其中一个表示按钮按下时的状态，另一个表示按钮释放时的状态。</p><h2 id="buttoncomponent" tabindex="-1"><a class="header-anchor" href="#buttoncomponent"><span>ButtonComponent</span></a></h2><p><code>ButtonComponent</code> 是一个由两个 <code>PositionComponent</code> 定义的按钮，其中一个表示按钮按下时的状态，另一个表示按钮释放时的状态。如果只想使用精灵作为按钮，请改用 [SpriteButtonComponent]；但是此组件在您希望具有 <code>SpriteAnimationComponent</code> 作为按钮或其他非纯精灵内容的情况下可能更好。</p><h2 id="游戏手柄" tabindex="-1"><a class="header-anchor" href="#游戏手柄"><span>游戏手柄</span></a></h2><p>Flame 拥有一个专门的插件来支持外部游戏控制器（游戏手柄）。 更多信息请参见 <a href="https://github.com/flame-engine/gamepad" target="_blank" rel="noopener noreferrer">Gamepads 存储库</a>。</p><h2 id="advancedbuttoncomponent" tabindex="-1"><a class="header-anchor" href="#advancedbuttoncomponent"><span>AdvancedButtonComponent</span></a></h2><p><code>AdvancedButtonComponent</code> 为每个不同的指针阶段提供了单独的状态。 皮肤可以为每个状态自定义，并且每个皮肤由一个 <code>PositionComponent</code> 表示。</p><p>这些字段可用于自定义 <code>AdvancedButtonComponent</code> 的外观：</p><ul><li><code>defaultSkin</code>: 默认显示在按钮上的组件。</li><li><code>downSkin</code>: 按钮被点击或触按时显示的组件。</li><li><code>hoverSkin</code>: 按钮悬停时显示的组件（桌面和网络）。</li><li><code>defaultLabel</code>: 显示在皮肤顶部的组件。会自动居中对齐。</li><li><code>disabledSkin</code>: 按钮处于禁用状态时显示的组件。</li><li><code>disabledLabel</code>: 按钮处于禁用状态时显示在皮肤顶部的组件。</li></ul><h2 id="togglebuttoncomponent" tabindex="-1"><a class="header-anchor" href="#togglebuttoncomponent"><span>ToggleButtonComponent</span></a></h2><p>[ToggleButtonComponent] 是一个 [AdvancedButtonComponent]，可以在选中和未选中之间切换。</p><p>除了已存在的皮肤外，[ToggleButtonComponent] 包含以下皮肤：</p><ul><li><code>defaultSelectedSkin</code>: 按钮处于选中状态时显示的组件。</li><li><code>downAndSelectedSkin</code>: 当可选择按钮被选中并按下时显示的组件。</li><li><code>hoverAndSelectedSkin</code>: 可选择且已选中的按钮悬停（桌面和网络）。</li><li><code>disabledAndSelectedSkin</code>: 按钮处于选中和禁用状态时使用的组件。</li><li><code>defaultSelectedLabel</code>: 按钮被选中时显示在皮肤顶部的组件。</li></ul><h2 id="ignoreevents-混合器" tabindex="-1"><a class="header-anchor" href="#ignoreevents-混合器"><span>IgnoreEvents 混合器</span></a></h2><p>如果您不希望某个组件子树接收事件，可以使用 <code>IgnoreEvents</code> 混合器。 一旦添加了此混合器，可以通过将 <code>ignoreEvents = true</code>（添加混合器时的默认值）来关闭到达该组件及其后代的所有事件，当您想重新接收事件时将其设置为 <code>false</code>。</p><p>这可以用于优化目的，因为当前所有事件都会通过整个组件树。</p>`,32))])}const v=o(d,[["render",r],["__file","other_inputs.qwen.html.vue"]]),b=JSON.parse('{"path":"/guide/flame/inputs/other_inputs.qwen.html","title":"其他输入和辅助工具","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"摇杆","slug":"摇杆","link":"#摇杆","children":[]},{"level":2,"title":"HudButtonComponent","slug":"hudbuttoncomponent","link":"#hudbuttoncomponent","children":[]},{"level":2,"title":"SpriteButtonComponent","slug":"spritebuttoncomponent","link":"#spritebuttoncomponent","children":[]},{"level":2,"title":"ButtonComponent","slug":"buttoncomponent","link":"#buttoncomponent","children":[]},{"level":2,"title":"游戏手柄","slug":"游戏手柄","link":"#游戏手柄","children":[]},{"level":2,"title":"AdvancedButtonComponent","slug":"advancedbuttoncomponent","link":"#advancedbuttoncomponent","children":[]},{"level":2,"title":"ToggleButtonComponent","slug":"togglebuttoncomponent","link":"#togglebuttoncomponent","children":[]},{"level":2,"title":"IgnoreEvents 混合器","slug":"ignoreevents-混合器","link":"#ignoreevents-混合器","children":[]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":1,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/inputs/other_inputs.qwen.md"}');export{v as comp,b as data};
