import{_ as i,c as o,a as e,b as s,d as t,e as l,f as p,r as c,o as r}from"./app-B8TszOv9.js";const d={};function u(m,n){const a=c("RouteLink");return r(),o("div",null,[n[12]||(n[12]=e("h1",{id:"gesture-input",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#gesture-input"},[e("span",null,"Gesture Input")])],-1)),e("p",null,[n[2]||(n[2]=s("This is documentation for gesture inputs attached directly on the game class, most of the time you want to detect input on your components instead, see for example the ")),t(a,{to:"/guide/flame/inputs/tap_events.html"},{default:l(()=>n[0]||(n[0]=[s("TapCallbacks")])),_:1}),n[3]||(n[3]=s(" and ")),t(a,{to:"/guide/flame/inputs/drag_events.html"},{default:l(()=>n[1]||(n[1]=[s("DragCallbacks")])),_:1}),n[4]||(n[4]=s(" for that."))]),n[13]||(n[13]=e("p",null,"For other input documents, see also:",-1)),e("ul",null,[e("li",null,[t(a,{to:"/guide/flame/inputs/keyboard_input.html"},{default:l(()=>n[5]||(n[5]=[s("Keyboard Input")])),_:1}),n[6]||(n[6]=s(": for keystrokes"))]),e("li",null,[t(a,{to:"/guide/flame/inputs/other_inputs.html"},{default:l(()=>n[7]||(n[7]=[s("Other Inputs")])),_:1}),n[8]||(n[8]=s(": For joysticks, game pads, etc."))])]),n[14]||(n[14]=p(`<h2 id="intro" tabindex="-1"><a class="header-anchor" href="#intro"><span>Intro</span></a></h2><p>Inside <code>package:flame/gestures.dart</code> you can find a whole set of <code>mixin</code>s which can be included on your game class instance to be able to receive touch input events. Below you can see the full list of these <code>mixin</code>s and its methods:</p><h2 id="touch-and-mouse-detectors" tabindex="-1"><a class="header-anchor" href="#touch-and-mouse-detectors"><span>Touch and mouse detectors</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">- TapDetector</span>
<span class="line">  - onTap</span>
<span class="line">  - onTapCancel</span>
<span class="line">  - onTapDown</span>
<span class="line">  - onLongTapDown</span>
<span class="line">  - onTapUp</span>
<span class="line"></span>
<span class="line">- SecondaryTapDetector</span>
<span class="line">  - onSecondaryTapDown</span>
<span class="line">  - onSecondaryTapUp</span>
<span class="line">  - onSecondaryTapCancel</span>
<span class="line"></span>
<span class="line">- TertiaryTapDetector</span>
<span class="line">  - onTertiaryTapDown</span>
<span class="line">  - onTertiaryTapUp</span>
<span class="line">  - onTertiaryTapCancel</span>
<span class="line"></span>
<span class="line">- DoubleTapDetector</span>
<span class="line">  - onDoubleTap</span>
<span class="line"></span>
<span class="line">- LongPressDetector</span>
<span class="line">  - onLongPress</span>
<span class="line">  - onLongPressStart</span>
<span class="line">  - onLongPressMoveUpdate</span>
<span class="line">  - onLongPressUp</span>
<span class="line">  - onLongPressEnd</span>
<span class="line"></span>
<span class="line">- VerticalDragDetector</span>
<span class="line">  - onVerticalDragDown</span>
<span class="line">  - onVerticalDragStart</span>
<span class="line">  - onVerticalDragUpdate</span>
<span class="line">  - onVerticalDragEnd</span>
<span class="line">  - onVerticalDragCancel</span>
<span class="line"></span>
<span class="line">- HorizontalDragDetector</span>
<span class="line">  - onHorizontalDragDown</span>
<span class="line">  - onHorizontalDragStart</span>
<span class="line">  - onHorizontalDragUpdate</span>
<span class="line">  - onHorizontalDragEnd</span>
<span class="line">  - onHorizontalDragCancel</span>
<span class="line"></span>
<span class="line">- ForcePressDetector</span>
<span class="line">  - onForcePressStart</span>
<span class="line">  - onForcePressPeak</span>
<span class="line">  - onForcePressUpdate</span>
<span class="line">  - onForcePressEnd</span>
<span class="line"></span>
<span class="line">- PanDetector</span>
<span class="line">  - onPanDown</span>
<span class="line">  - onPanStart</span>
<span class="line">  - onPanUpdate</span>
<span class="line">  - onPanEnd</span>
<span class="line">  - onPanCancel</span>
<span class="line"></span>
<span class="line">- ScaleDetector</span>
<span class="line">  - onScaleStart</span>
<span class="line">  - onScaleUpdate</span>
<span class="line">  - onScaleEnd</span>
<span class="line"></span>
<span class="line">- MultiTouchTapDetector</span>
<span class="line">  - onTap</span>
<span class="line">  - onTapCancel</span>
<span class="line">  - onTapDown</span>
<span class="line">  - onTapUp</span>
<span class="line"></span>
<span class="line">- MultiTouchDragDetector</span>
<span class="line">  - onReceiveDrag</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mouse only events</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> - MouseMovementDetector</span>
<span class="line">  - onMouseMove</span>
<span class="line"> - ScrollDetector</span>
<span class="line">  - onScroll</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is not possible to mix advanced detectors (<code>MultiTouch*</code>) with basic detectors of the same kind, since the advanced detectors will <em>always win the gesture arena</em> and the basic detectors will never be triggered. So for example, you can&#39;t use both <code>MultiTouchTapDetector</code> and <code>PanDetector</code> together, since no events will be triggered for the latter (there is also an assertion for this).</p><p>Flame&#39;s GestureApi is provided by Flutter&#39;s Gesture Widgets, including <a href="https://api.flutter.dev/flutter/widgets/GestureDetector-class.html" target="_blank" rel="noopener noreferrer">GestureDetector widget</a>, <a href="https://api.flutter.dev/flutter/widgets/RawGestureDetector-class.html" target="_blank" rel="noopener noreferrer">RawGestureDetector widget</a> and <a href="https://api.flutter.dev/flutter/widgets/MouseRegion-class.html" target="_blank" rel="noopener noreferrer">MouseRegion widget</a>, you can also read more about Flutter&#39;s gestures <a href="https://api.flutter.dev/flutter/gestures/gestures-library.html" target="_blank" rel="noopener noreferrer">here</a>.</p><h2 id="pandetector-and-scaledetector" tabindex="-1"><a class="header-anchor" href="#pandetector-and-scaledetector"><span>PanDetector and ScaleDetector</span></a></h2><p>If you add a <code>PanDetector</code> together with a <code>ScaleDetector</code> you will be prompted with a quite cryptic assertion from Flutter that says:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Having both a pan gesture recognizer and a scale gesture recognizer is</span>
<span class="line">redundant; scale is a superset of pan.</span>
<span class="line"></span>
<span class="line">Just use the scale gesture recognizer.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This might seem strange, but <code>onScaleUpdate</code> is not only triggered when the scale should be changed, but for all pan/drag events too. So if you need to use both of those detectors you&#39;ll have to handle both of their logic inside <code>onScaleUpdate</code> (+<code>onScaleStart</code> and <code>onScaleEnd</code>).</p><p>For example you could do something like this if you want to move the camera on pan events and zoom on scale events:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">  late double startZoom<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onScaleStart</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    startZoom <span class="token operator">=</span> camera<span class="token punctuation">.</span>zoom<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">onScaleUpdate</span><span class="token punctuation">(</span><span class="token class-name">ScaleUpdateInfo</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">final</span> currentScale <span class="token operator">=</span> info<span class="token punctuation">.</span>scale<span class="token punctuation">.</span>global<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentScale<span class="token punctuation">.</span><span class="token function">isIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      camera<span class="token punctuation">.</span>zoom <span class="token operator">=</span> startZoom <span class="token operator">*</span> currentScale<span class="token punctuation">.</span>y<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      camera<span class="token punctuation">.</span><span class="token function">translateBy</span><span class="token punctuation">(</span><span class="token operator">-</span>info<span class="token punctuation">.</span>delta<span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      camera<span class="token punctuation">.</span><span class="token function">snap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above the pan events are handled with <code>info.delta</code> and the scale events with <code>info.scale</code>, although they are theoretically both from underlying scale events.</p><p>This can also be seen in the <a href="https://github.com/flame-engine/flame/blob/main/examples/lib/stories/camera_and_viewport/zoom_example.dart" target="_blank" rel="noopener noreferrer">zoom example</a>.</p><h2 id="mouse-cursor" tabindex="-1"><a class="header-anchor" href="#mouse-cursor"><span>Mouse cursor</span></a></h2><p>It is also possible to change the current mouse cursor displayed on the <code>GameWidget</code> region. To do so the following code can be used inside the <code>Game</code> class</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">mouseCursor<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">SystemMouseCursors</span><span class="token punctuation">.</span>move<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To already initialize the <code>GameWidget</code> with a custom cursor, the <code>mouseCursor</code> property can be used</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token class-name">GameWidget</span><span class="token punctuation">(</span></span>
<span class="line">  game<span class="token punctuation">:</span> <span class="token class-name">MouseCursorGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  mouseCursor<span class="token punctuation">:</span> <span class="token class-name">SystemMouseCursors</span><span class="token punctuation">.</span>move<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-coordinate-system" tabindex="-1"><a class="header-anchor" href="#event-coordinate-system"><span>Event coordinate system</span></a></h2><p>On events that have positions, like for example <code>Tap*</code> or <code>Drag</code>, you will notice that the <code>eventPosition</code> attribute includes 2 fields: <code>global</code> and <code>widget</code>. Below you will find a brief explanation about each of them.</p><h3 id="global" tabindex="-1"><a class="header-anchor" href="#global"><span>global</span></a></h3><p>The position where the event occurred considering the entire screen, same as <code>globalPosition</code> in Flutter&#39;s native events.</p><h3 id="widget" tabindex="-1"><a class="header-anchor" href="#widget"><span>widget</span></a></h3><p>The position where the event occurred relative to the <code>GameWidget</code> position and size, same as <code>localPosition</code> in Flutter&#39;s native events.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyGame</span> <span class="token keyword">extends</span> <span class="token class-name">FlameGame</span> <span class="token keyword">with</span> <span class="token class-name">TapDetector</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Other methods omitted</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  bool <span class="token function">onTapDown</span><span class="token punctuation">(</span><span class="token class-name">TapDownInfo</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Player tap down on </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">info<span class="token punctuation">.</span>eventPosition<span class="token punctuation">.</span>widget</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token metadata function">@override</span></span>
<span class="line">  bool <span class="token function">onTapUp</span><span class="token punctuation">(</span><span class="token class-name">TapUpInfo</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Player tap up on </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">info<span class="token punctuation">.</span>eventPosition<span class="token punctuation">.</span>widget</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also check more complete examples <a href="https://github.com/flame-engine/flame/tree/main/examples/lib/stories/input/" target="_blank" rel="noopener noreferrer">here</a>.</p><h3 id="gesturehitboxes" tabindex="-1"><a class="header-anchor" href="#gesturehitboxes"><span>GestureHitboxes</span></a></h3><p>The <code>GestureHitboxes</code> mixin is used to more accurately recognize gestures on top of your <code>Component</code>s. Say that you have a fairly round rock as a <code>SpriteComponent</code> for example, then you don&#39;t want to register input that is in the corner of the image where the rock is not displayed, since a <code>PositionComponent</code> is rectangular by default. Then you can use the <code>GestureHitboxes</code> mixin to define a more accurate circle or polygon (or another shape) for which the input should be within for the event to be registered on your component.</p><p>You can add new hitboxes to the component that has the <code>GestureHitboxes</code> mixin just like they are added in the below <code>Collidable</code> example.</p>`,33)),e("p",null,[n[10]||(n[10]=s("More information about how to define hitboxes can be found in the hitbox section of the ")),t(a,{to:"/guide/flame/collision_detection.html#shapehitbox"},{default:l(()=>n[9]||(n[9]=[s("collision detection")])),_:1}),n[11]||(n[11]=s(" docs."))]),n[15]||(n[15]=e("p",null,[s("An example of how to use it can be seen "),e("a",{href:"https://github.com/flame-engine/flame/blob/main/examples/lib/stories/input/gesture_hitboxes_example.dart",target:"_blank",rel:"noopener noreferrer"},"here"),s(".")],-1))])}const b=i(d,[["render",u],["__file","gesture_input.html.vue"]]),h=JSON.parse('{"path":"/guide/flame/inputs/gesture_input.html","title":"Gesture Input","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Intro","slug":"intro","link":"#intro","children":[]},{"level":2,"title":"Touch and mouse detectors","slug":"touch-and-mouse-detectors","link":"#touch-and-mouse-detectors","children":[]},{"level":2,"title":"PanDetector and ScaleDetector","slug":"pandetector-and-scaledetector","link":"#pandetector-and-scaledetector","children":[]},{"level":2,"title":"Mouse cursor","slug":"mouse-cursor","link":"#mouse-cursor","children":[]},{"level":2,"title":"Event coordinate system","slug":"event-coordinate-system","link":"#event-coordinate-system","children":[{"level":3,"title":"global","slug":"global","link":"#global","children":[]},{"level":3,"title":"widget","slug":"widget","link":"#widget","children":[]}]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[{"level":3,"title":"GestureHitboxes","slug":"gesturehitboxes","link":"#gesturehitboxes","children":[]}]}],"git":{"updatedTime":1735743451000,"contributors":[{"name":"JackYanjiaqi","username":"JackYanjiaqi","email":"jackyanjiaqi@gmail.com","commits":2,"url":"https://github.com/JackYanjiaqi"}]},"filePathRelative":"guide/flame/inputs/gesture_input.md"}');export{b as comp,h as data};
